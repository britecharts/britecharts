{"version":3,"sources":["webpack:///webpack/universalModuleDefinition?5ca6**","webpack:///line.min.js","webpack:///webpack/bootstrap df964404de07f1dd3049?d1c4**","webpack:///./src/charts/line.js","webpack:///external \"d3\"?c0c4**","webpack:///external \"underscore\""],"names":["root","factory","exports","module","require","define","amd","a","i","this","__WEBPACK_EXTERNAL_MODULE_1__","__WEBPACK_EXTERNAL_MODULE_2__","modules","__webpack_require__","moduleId","installedModules","id","loaded","call","m","c","p","__WEBPACK_AMD_DEFINE_RESULT__","_","d3","_selection","each","_data","chartWidth","width","margin","left","right","chartHeight","height","top","bottom","data","dataByDate","readableDataType","buildScales","buildAxis","buildSVG","drawGridLines","drawAxis","drawLines","shouldShowTooltip","drawVerticalMarker","drawHoverOverlay","addMouseEvents","svg","on","handleMouseOver","handleMouseOut","handleMouseMove","adjustYTickLabels","selection","selectAll","attr","xAxis","axis","scale","xScale","orient","ticks","getMaxNumOfHorizontalTicks","length","tickSize","tickPadding","tickFormat","xTickDateFormat","xMonthAxis","time","months","xTickMonthFormat","yAxis","yScale","numVerticalTics","yTickNumberFormat","buildContainerGroups","container","append","classed","minX","min","kv","Data","getDate","maxX","max","minY","getValue","maxY","rangeRound","domain","linear","Math","abs","nice","colorScale","ordinal","range","colorRange","map","getTopic","topicColorMap","object","select","transition","ease","cleanDataPointHighlights","verticalMarkerContainer","remove","xAxisPadding","lines","undefined","topicLine","maskingRectangle","line","x","d","date","y","value","enter","style","stroke","getLineColor","exit","duration","maskGridLines","class","x1","x2","y1","y2","baseLine","overlay","overlayColor","verticalMarkerLine","findOutNearestDate","x0","d0","d1","Date","getTime","dataPointNumber","singleTickWidth","spacing","ticksForWidth","ceil","getMouseXPosition","event","mouse","getFormattedDateFromData","toISOString","split","getNearestDataPoint","mouseX","invertedX","invert","bisectDate","bisector","dataEntryIndex","dateOnCursorXPosition","dataEntryForXPosition","previousDataEntryForXPosition","nearestDataPoint","xPositionOffset","dataPoint","dataPointXPosition","moveVerticalMarker","highlightDataPoints","dispatch","customMouseMove","customMouseOut","customMouseOver","topics","chain","compact","sortBy","el","colorOrder","name","forEach","topic","index","marker","circleSize","cx","cy","r","verticalMarkerXPosition","tooltipThreshold","aspectRatio","#4DC2F5","#4DDB86","#E5C400","#FF4D7C","#9963D5","#051C48","format","_x","arguments","rebind"],"mappings":"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","file":"line.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"d3\"), require(\"underscore\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"d3\", \"underscore\"], factory);\n\telse {\n\t\tvar a = typeof exports === 'object' ? factory(require(\"d3\"), require(\"underscore\")) : factory(root[\"d3\"], root[\"underscore\"]);\n\t\tfor(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];\n\t}\n})(this, function(__WEBPACK_EXTERNAL_MODULE_1__, __WEBPACK_EXTERNAL_MODULE_2__) {\nreturn \n\n\n/** WEBPACK FOOTER **\n ** webpack/universalModuleDefinition\n **/","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"d3\"), require(\"underscore\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"d3\", \"underscore\"], factory);\n\telse {\n\t\tvar a = typeof exports === 'object' ? factory(require(\"d3\"), require(\"underscore\")) : factory(root[\"d3\"], root[\"underscore\"]);\n\t\tfor(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];\n\t}\n})(this, function(__WEBPACK_EXTERNAL_MODULE_1__, __WEBPACK_EXTERNAL_MODULE_2__) {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_RESULT__;'use strict';\n\t\n\t!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {\n\t    'use strict';\n\t\n\t    var _ = __webpack_require__(2),\n\t        d3 = __webpack_require__(1);\n\t\n\t    /**\n\t     * @fileOverview Line Chart reusable API module that allows us\n\t     * rendering a multi line and configurable chart.\n\t     *\n\t     * @tutorial line\n\t     * @exports charts/line\n\t     * @requires d3\n\t     * @version 0.0.1\n\t     */\n\t    return function module() {\n\t\n\t        var margin = {\n\t            top: 60,\n\t            right: 20,\n\t            bottom: 60,\n\t            left: 80\n\t        },\n\t            width = 960,\n\t            height = 500,\n\t            aspectRatio = null,\n\t            tooltipThreshold = 480,\n\t            svg = undefined,\n\t            chartWidth = undefined,\n\t            chartHeight = undefined,\n\t            xScale = undefined,\n\t            yScale = undefined,\n\t            colorScale = undefined,\n\t            xAxis = undefined,\n\t            xMonthAxis = undefined,\n\t            yAxis = undefined,\n\t            xAxisPadding = {\n\t            top: 0,\n\t            left: 15,\n\t            bottom: 0,\n\t            right: 0\n\t        },\n\t            colorRange = ['#4DC2F5', '#4DDB86', '#E5C400', '#FF4D7C', '#9963D5', '#051C48'],\n\t            colorOrder = {\n\t            '#4DC2F5': 0,\n\t            '#4DDB86': 1,\n\t            '#E5C400': 2,\n\t            '#FF4D7C': 3,\n\t            '#9963D5': 4,\n\t            '#051C48': 5\n\t        },\n\t            topicColorMap = undefined,\n\t            ease = 'ease',\n\t            data = undefined,\n\t            dataByDate = undefined,\n\t            readableDataType = undefined,\n\t            baseLine = undefined,\n\t            maskGridLines = undefined,\n\t            numVerticalTics = 5,\n\t            overlay = undefined,\n\t            overlayColor = 'rgba(0, 0, 0, 0)',\n\t            verticalMarkerContainer = undefined,\n\t            verticalMarkerLine = undefined,\n\t\n\t\n\t        // extractors\n\t        getDate = function getDate(d) {\n\t            return d.date;\n\t        },\n\t            getValue = function getValue(d) {\n\t            return d.value;\n\t        },\n\t            getTopic = function getTopic(d) {\n\t            return d.topic;\n\t        },\n\t            getLineColor = function getLineColor(d) {\n\t            return colorScale(d.topic);\n\t        },\n\t\n\t\n\t        // formats\n\t        yTickNumberFormat = d3.format('s'),\n\t            xTickDateFormat = d3.time.format('%e'),\n\t            xTickMonthFormat = d3.time.format('%B'),\n\t\n\t\n\t        // events\n\t        dispatch = d3.dispatch('customMouseOver', 'customMouseOut', 'customMouseMove');\n\t\n\t        /**\n\t         * This function creates the graph using the selection and data provided\n\t         * @param  {D3Selection} _selection A d3 selection that represents\n\t         * the container(s) where the chart(s) will be rendered\n\t         */\n\t        function exports(_selection) {\n\t            /** @param {object} _data The data to attach and generate the chart */\n\t            _selection.each(function (_data) {\n\t                chartWidth = width - margin.left - margin.right;\n\t                chartHeight = height - margin.top - margin.bottom;\n\t                data = _data.data;\n\t                dataByDate = _data.dataByDate;\n\t                readableDataType = _data.readableDataType;\n\t\n\t                buildScales();\n\t                buildAxis();\n\t                buildSVG(this);\n\t                drawGridLines();\n\t                drawAxis();\n\t                drawLines();\n\t\n\t                if (shouldShowTooltip()) {\n\t                    drawVerticalMarker();\n\t                    drawHoverOverlay();\n\t                    addMouseEvents();\n\t                }\n\t            });\n\t        }\n\t\n\t        /**\n\t         * Adds events to the container group if the environment is not mobile\n\t         * Adding: mouseover, mouseout and mousemove\n\t         */\n\t        function addMouseEvents() {\n\t            svg.on('mouseover', handleMouseOver).on('mouseout', handleMouseOut).on('mousemove', handleMouseMove);\n\t        }\n\t\n\t        /**\n\t         * Adjusts the position of the y axis' ticks\n\t         * @param  {D3Selection} selection Y axis group\n\t         * @return void\n\t         */\n\t        function adjustYTickLabels(selection) {\n\t            selection.selectAll('.tick text').attr('transform', 'translate(0, -7)');\n\t        }\n\t\n\t        /**\n\t         * Creates the d3 x and y axis, setting orientations\n\t         * @private\n\t         */\n\t        function buildAxis() {\n\t            xAxis = d3.svg.axis().scale(xScale).orient('bottom').ticks(getMaxNumOfHorizontalTicks(width, dataByDate.length)).tickSize(10, 0).tickPadding(5).tickFormat(xTickDateFormat);\n\t\n\t            xMonthAxis = d3.svg.axis().scale(xScale).ticks(d3.time.months).tickSize(0, 0).orient('bottom').tickFormat(xTickMonthFormat);\n\t\n\t            yAxis = d3.svg.axis().scale(yScale).orient('left').ticks(numVerticalTics).tickSize([0]).tickPadding([4]).tickFormat(yTickNumberFormat);\n\t        }\n\t\n\t        /**\n\t         * Builds containers for the chart, the axis and a wrapper for all of them\n\t         * NOTE: The order of drawing of this group elements is really important,\n\t         * as everything else will be drawn on top of them\n\t         * @private\n\t         */\n\t        function buildContainerGroups() {\n\t            var container = svg.append('g').classed('container-group', true).attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\t\n\t            container.append('g').classed('x-axis-group', true).append('g').classed('axis x', true);\n\t            container.selectAll('.x-axis-group').append('g').classed('month-axis', true);\n\t            container.append('g').classed('y-axis-group axis y', true);\n\t            container.append('g').classed('grid-lines-group', true);\n\t            container.append('g').classed('chart-group', true);\n\t            container.append('g').classed('metadata-group', true);\n\t        }\n\t\n\t        /**\n\t         * Creates the x and y scales of the graph\n\t         * @private\n\t         */\n\t        function buildScales() {\n\t            var minX = d3.min(data, function (kv) {\n\t                return d3.min(kv.Data, getDate);\n\t            }),\n\t                maxX = d3.max(data, function (kv) {\n\t                return d3.max(kv.Data, getDate);\n\t            }),\n\t                minY = d3.min(data, function (kv) {\n\t                return d3.min(kv.Data, getValue);\n\t            }),\n\t                maxY = d3.max(data, function (kv) {\n\t                return d3.max(kv.Data, getValue);\n\t            });\n\t\n\t            xScale = d3.time.scale().rangeRound([0, chartWidth]).domain([minX, maxX]);\n\t\n\t            yScale = d3.scale.linear().rangeRound([chartHeight, 0]).domain([Math.abs(minY), Math.abs(maxY)]).nice(3);\n\t\n\t            colorScale = d3.scale.ordinal().range(colorRange).domain(data.map(getTopic));\n\t\n\t            topicColorMap = _.object(colorScale.domain(), colorScale.range());\n\t        }\n\t\n\t        /**\n\t         * @param  {HTMLElement} container DOM element that will work as the container of the graph\n\t         * @private\n\t         */\n\t        function buildSVG(container) {\n\t            if (!svg) {\n\t                svg = d3.select(container).append('svg').classed('britechart line-chart', true);\n\t\n\t                buildContainerGroups();\n\t            }\n\t\n\t            svg.transition().ease(ease).attr({\n\t                width: width,\n\t                height: height\n\t            });\n\t        }\n\t\n\t        /**\n\t         * Removes all the datapoints highlighter circles added to the marker container\n\t         * @return void\n\t         */\n\t        function cleanDataPointHighlights() {\n\t            verticalMarkerContainer.selectAll('.circle-container').remove();\n\t        }\n\t\n\t        /**\n\t         * @description\n\t         * Draws the x and y axis on the svg object within their\n\t         * respective groups\n\t         * @private\n\t         */\n\t        function drawAxis() {\n\t            svg.select('.x-axis-group .axis.x').transition().ease(ease).attr('transform', 'translate(0,' + chartHeight + ')').call(xAxis);\n\t\n\t            svg.select('.x-axis-group .month-axis').transition().ease(ease).attr('transform', 'translate(0,' + (chartHeight + 28) + ')').call(xMonthAxis);\n\t\n\t            svg.select('.y-axis-group.axis.y').transition().ease(ease).attr('transform', 'translate(' + -xAxisPadding.left + ', 0)').call(yAxis).call(adjustYTickLabels);\n\t        }\n\t\n\t        /**\n\t         * Draws the line elements within the chart group\n\t         * @private\n\t         */\n\t        function drawLines() {\n\t            var lines = undefined,\n\t                topicLine = undefined,\n\t                maskingRectangle = undefined;\n\t\n\t            topicLine = d3.svg.line().x(function (d) {\n\t                return xScale(d.date);\n\t            }).y(function (d) {\n\t                return yScale(d.value);\n\t            });\n\t\n\t            lines = svg.select('.chart-group').selectAll('.line').data(data);\n\t\n\t            lines.enter().append('g').attr('class', 'topic').append('path').attr('class', 'line').attr('d', function (d) {\n\t                return topicLine(d.Data);\n\t            }).style({\n\t                'stroke': getLineColor\n\t            });\n\t\n\t            lines.exit().remove();\n\t\n\t            // We use a white rectangle to simulate the line drawing animation\n\t            maskingRectangle = svg.append('rect').attr('class', 'masking-rectangle').attr('width', width - 30).attr('height', height + 20).attr('x', 60).attr('y', -18);\n\t\n\t            maskingRectangle.transition().duration(2000).ease('cubic-out').attr('x', width).each('end', function () {\n\t                maskingRectangle.remove();\n\t            });\n\t        }\n\t\n\t        /**\n\t         * Draws grid lines on the background of the chart\n\t         * @return void\n\t         */\n\t        function drawGridLines() {\n\t            maskGridLines = svg.select('.grid-lines-group').selectAll('line.horizontal-grid-line').data(yScale.ticks(5)).enter().append('line').attr({\n\t                'class': 'horizontal-grid-line',\n\t                'x1': -xAxisPadding.left - 30,\n\t                'x2': chartWidth,\n\t                'y1': function y1(d) {\n\t                    return yScale(d);\n\t                },\n\t                'y2': function y2(d) {\n\t                    return yScale(d);\n\t                }\n\t            });\n\t\n\t            //draw a horizontal line to extend x-axis till the edges\n\t            baseLine = svg.select('.grid-lines-group').selectAll('line.extended-x-line').data([0]).enter().append('line').attr({\n\t                'class': 'extended-x-line',\n\t                'x1': -xAxisPadding.left - 30,\n\t                'x2': chartWidth,\n\t                'y1': height - margin.bottom - margin.top,\n\t                'y2': height - margin.bottom - margin.top\n\t            });\n\t        }\n\t\n\t        /**\n\t         * Draws an overlay element over the graph\n\t         * @inner\n\t         * @return void\n\t         */\n\t        function drawHoverOverlay() {\n\t            overlay = svg.select('.metadata-group').append('rect').attr('class', 'overlay').attr('y1', 0).attr('y2', height).attr('height', height - margin.top - margin.bottom).attr('width', width - margin.left - margin.right).attr('fill', overlayColor).style('display', 'none');\n\t        }\n\t\n\t        /**\n\t         * Creates the vertical marker\n\t         * @return void\n\t         */\n\t        function drawVerticalMarker() {\n\t            verticalMarkerContainer = svg.select('.metadata-group').append('g').attr('class', 'hover-marker').attr('transform', 'translate(' + '9999' + ',' + '0' + ')');\n\t\n\t            verticalMarkerLine = verticalMarkerContainer.selectAll('path').data([{\n\t                'x1': 0,\n\t                'y1': 0,\n\t                'x2': 0,\n\t                'y2': 0\n\t            }]).enter().append('line').classed('vertical-marker', true).attr({\n\t                'x1': 0,\n\t                'y1': height - margin.top - margin.bottom,\n\t                'x2': 0,\n\t                'y2': 0\n\t            });\n\t        }\n\t\n\t        /**\n\t         * Finds out which datapoint is closer to the given x position\n\t         * @param  {number} x0 Date value for data point\n\t         * @param  {obj} d0 Previous datapoint\n\t         * @param  {obj} d1 Next datapoint\n\t         * @return {obj}    d0 or d1, the datapoint with closest date to x0\n\t         */\n\t        function findOutNearestDate(x0, d0, d1) {\n\t            return new Date(x0).getTime() - new Date(d0.date).getTime() > new Date(d1.date).getTime() - new Date(x0).getTime() ? d0 : d1;\n\t        }\n\t\n\t        /**\n\t         * Calculates the maximum number of ticks for the x axis\n\t         * @param  {number} width Chart width\n\t         * @param  {number} dataPointNumber  Number of entries on the data\n\t         * @return {number}       Number of ticks to render\n\t         */\n\t        function getMaxNumOfHorizontalTicks(width, dataPointNumber) {\n\t            var singleTickWidth = 20,\n\t                spacing = 40,\n\t                ticksForWidth = Math.ceil(width / (singleTickWidth + spacing));\n\t\n\t            return Math.min(dataPointNumber, ticksForWidth);\n\t        }\n\t\n\t        /**\n\t         * Extract X position on the graph from a given mouse event\n\t         * @param  {obj} event D3 mouse event\n\t         * @return {number}       Position on the x axis of the mouse\n\t         */\n\t        function getMouseXPosition(event) {\n\t            return d3.mouse(event)[0];\n\t        }\n\t\n\t        /**\n\t         * Formats the date in ISOString\n\t         * @param  {string} date Date as given in data entries\n\t         * @return {string}      Date in ISO format in a neutral timezone\n\t         */\n\t        function getFormattedDateFromData(date) {\n\t            return date.toISOString().split('T')[0] + 'T00:00:00Z';\n\t        }\n\t\n\t        /**\n\t         * Finds out the data entry that is closer to the given position on pixels\n\t         * @param  {number} mouseX X position of the mouse\n\t         * @return {obj}        Data entry that is closer to that x axis position\n\t         */\n\t        function getNearestDataPoint(mouseX) {\n\t            var invertedX = xScale.invert(mouseX),\n\t                bisectDate = d3.bisector(getDate).left,\n\t                dataEntryIndex = undefined,\n\t                dateOnCursorXPosition = undefined,\n\t                dataEntryForXPosition = undefined,\n\t                previousDataEntryForXPosition = undefined,\n\t                nearestDataPoint = undefined;\n\t\n\t            dateOnCursorXPosition = getFormattedDateFromData(invertedX);\n\t            dataEntryIndex = bisectDate(dataByDate, dateOnCursorXPosition, 1);\n\t            dataEntryForXPosition = dataByDate[dataEntryIndex];\n\t            previousDataEntryForXPosition = dataByDate[dataEntryIndex - 1];\n\t\n\t            if (previousDataEntryForXPosition && dataEntryForXPosition) {\n\t                nearestDataPoint = findOutNearestDate(dateOnCursorXPosition, dataEntryForXPosition, previousDataEntryForXPosition);\n\t            } else {\n\t                nearestDataPoint = dataEntryForXPosition;\n\t            }\n\t\n\t            return nearestDataPoint;\n\t        }\n\t\n\t        /**\n\t         * MouseMove handler, calculates the nearest dataPoint to the cursor\n\t         * and updates metadata related to it\n\t         * @return void\n\t         */\n\t        function handleMouseMove() {\n\t            var xPositionOffset = -margin.left,\n\t                //Arbitrary number, will love to know how to assess it\n\t            dataPoint = getNearestDataPoint(getMouseXPosition(this) + xPositionOffset),\n\t                dataPointXPosition = undefined;\n\t\n\t            if (dataPoint) {\n\t                // More verticalMarker to that datapoint\n\t                moveVerticalMarker(dataPoint);\n\t                // Add data points highlighting\n\t                highlightDataPoints(dataPoint);\n\t                // Emit event with xPosition for tooltip or similar feature\n\t                dataPointXPosition = xScale(new Date(dataPoint.date));\n\t                dispatch.customMouseMove(dataPoint, topicColorMap, dataPointXPosition);\n\t            }\n\t        }\n\t\n\t        /**\n\t         * MouseOut handler, hides overlay and removes active class on verticalMarkerLine\n\t         * It also resets the container of the vertical marker\n\t         * @return void\n\t         */\n\t        function handleMouseOut(data) {\n\t            overlay.style('display', 'none');\n\t            verticalMarkerLine.classed('bc-is-active', false);\n\t            verticalMarkerContainer.attr('transform', 'translate(' + '9999' + ',' + '0' + ')');\n\t\n\t            dispatch.customMouseOut(data);\n\t        }\n\t\n\t        /**\n\t         * Mouseover handler, shows overlay and adds active class to verticalMarkerLine\n\t         * @return void\n\t         */\n\t        function handleMouseOver(data) {\n\t            overlay.style('display', 'block');\n\t            verticalMarkerLine.classed('bc-is-active', true);\n\t\n\t            dispatch.customMouseOver(data);\n\t        }\n\t\n\t        /**\n\t         * Creates coloured circles marking where the exact data y value is for a given data point\n\t         * @param  {obj} dataPoint Data point to extract info from\n\t         * @return void\n\t         */\n\t        function highlightDataPoints(dataPoint) {\n\t            cleanDataPointHighlights();\n\t\n\t            // sorting the topics based on the order of the colors,\n\t            // so that the order always stays constant\n\t            dataPoint.topics = _.chain(dataPoint.topics).compact().sortBy(function (el) {\n\t                return colorOrder[topicColorMap[el.name]];\n\t            }).value();\n\t\n\t            dataPoint.topics.forEach(function (topic, index) {\n\t                var marker = verticalMarkerContainer.append('g').classed('circle-container', true),\n\t                    circleSize = 12;\n\t\n\t                marker.append('circle').classed('data-point-highlighter', true).attr({\n\t                    'cx': circleSize,\n\t                    'cy': 0,\n\t                    'r': 5\n\t                }).style({\n\t                    'stroke': topicColorMap[topic.name]\n\t                });\n\t\n\t                marker.attr('transform', 'translate(' + -circleSize + ',' + yScale(dataPoint.topics[index].value) + ')');\n\t            });\n\t        }\n\t\n\t        /**\n\t         * Helper method to update the x position of the vertical marker\n\t         * @param  {obj} dataPoint Data entry to extract info\n\t         * @return void\n\t         */\n\t        function moveVerticalMarker(dataPoint) {\n\t            var date = new Date(dataPoint.date),\n\t                verticalMarkerXPosition = xScale(date);\n\t\n\t            verticalMarkerContainer.attr('transform', 'translate(' + verticalMarkerXPosition + ',0)');\n\t        }\n\t\n\t        /**\n\t         * Determines if we should add the tooltip related logic depending on the\n\t         * size of the chart and the tooltipThreshold variable value\n\t         * @return {boolean} Should we build the tooltip?\n\t         */\n\t        function shouldShowTooltip() {\n\t            return width > tooltipThreshold;\n\t        }\n\t\n\t        // API Methods\n\t\n\t        /**\n\t         * Gets or Sets the aspect ratio of the chart\n\t         * @param  {number} _x Desired aspect ratio for the graph\n\t         * @return { number | module} Current aspect ratio or Line Chart module to chain calls\n\t         * @public\n\t         */\n\t        exports.aspectRatio = function (_x) {\n\t            if (!arguments.length) {\n\t                return aspectRatio;\n\t            }\n\t            aspectRatio = _x;\n\t            return this;\n\t        };\n\t\n\t        /**\n\t         * Gets or Sets the height of the chart\n\t         * @param  {number} _x Desired width for the graph\n\t         * @return { height | module} Current height or Line Chart module to chain calls\n\t         * @public\n\t         */\n\t        exports.height = function (_x) {\n\t            if (!arguments.length) {\n\t                return height;\n\t            }\n\t            if (aspectRatio) {\n\t                width = Math.ceil(_x / aspectRatio);\n\t            }\n\t            height = _x;\n\t            return this;\n\t        };\n\t\n\t        /**\n\t         * Gets or Sets the margin of the chart\n\t         * @param  {object} _x Margin object to get/set\n\t         * @return { margin | module} Current margin or Line Chart module to chain calls\n\t         * @public\n\t         */\n\t        exports.margin = function (_x) {\n\t            if (!arguments.length) {\n\t                return margin;\n\t            }\n\t            margin = _x;\n\t            return this;\n\t        };\n\t\n\t        /**\n\t         * Gets or Sets the minimum width of the graph in order to show the tooltip\n\t         * NOTE: This could also depend on the aspect ratio\n\t         * @param  {number} _x Desired tooltip threshold for the graph\n\t         * @return { number | module} Current tooltip threshold or Line Chart module to chain calls\n\t         * @public\n\t         */\n\t        exports.tooltipThreshold = function (_x) {\n\t            if (!arguments.length) {\n\t                return tooltipThreshold;\n\t            }\n\t            tooltipThreshold = _x;\n\t            return this;\n\t        };\n\t\n\t        /**\n\t         * Gets or Sets the width of the chart\n\t         * @param  {number} _x Desired width for the graph\n\t         * @return { width | module} Current width or Line Chart module to chain calls\n\t         * @public\n\t         */\n\t        exports.width = function (_x) {\n\t            if (!arguments.length) {\n\t                return width;\n\t            }\n\t            if (aspectRatio) {\n\t                height = Math.ceil(_x * aspectRatio);\n\t            }\n\t            width = _x;\n\t            return this;\n\t        };\n\t\n\t        // Rebind 'customHover' event to the \"exports\" function, so it's available \"externally\" under the typical \"on\" method:\n\t        d3.rebind(exports, dispatch, 'on');\n\t\n\t        return exports;\n\t    };\n\t}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n/***/ },\n/* 1 */\n/***/ function(module, exports) {\n\n\tmodule.exports = __WEBPACK_EXTERNAL_MODULE_1__;\n\n/***/ },\n/* 2 */\n/***/ function(module, exports) {\n\n\tmodule.exports = __WEBPACK_EXTERNAL_MODULE_2__;\n\n/***/ }\n/******/ ])\n});\n;\n\n\n/** WEBPACK FOOTER **\n ** line.min.js\n **/"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap df964404de07f1dd3049\n **/","define(function(require){\n    'use strict';\n\n    const _ = require('underscore'),\n        d3 = require('d3');\n\n    /**\n     * @fileOverview Line Chart reusable API module that allows us\n     * rendering a multi line and configurable chart.\n     *\n     * @tutorial line\n     * @exports charts/line\n     * @requires d3\n     * @version 0.0.1\n     */\n    return function module(){\n\n        let margin = {\n                top: 60,\n                right: 20,\n                bottom: 60,\n                left: 80\n            },\n            width = 960,\n            height = 500,\n            aspectRatio = null,\n            tooltipThreshold = 480,\n            svg,\n            chartWidth, chartHeight,\n            xScale, yScale, colorScale,\n            xAxis, xMonthAxis, yAxis,\n            xAxisPadding = {\n                top: 0,\n                left: 15,\n                bottom: 0,\n                right: 0\n            },\n            colorRange = [\n                '#4DC2F5',\n                '#4DDB86',\n                '#E5C400',\n                '#FF4D7C',\n                '#9963D5',\n                '#051C48'\n            ],\n            colorOrder = {\n                '#4DC2F5': 0,\n                '#4DDB86': 1,\n                '#E5C400': 2,\n                '#FF4D7C': 3,\n                '#9963D5': 4,\n                '#051C48': 5\n            },\n            topicColorMap,\n            ease = 'ease',\n\n            data,\n            dataByDate,\n            readableDataType,\n\n            baseLine,\n            maskGridLines,\n            numVerticalTics = 5,\n\n            overlay,\n            overlayColor = 'rgba(0, 0, 0, 0)',\n            verticalMarkerContainer,\n            verticalMarkerLine,\n\n            // extractors\n            getDate = d => { return d.date; },\n            getValue = d => { return d.value; },\n            getTopic = d => { return d.topic; },\n            getLineColor = d => { return colorScale(d.topic); },\n\n            // formats\n            yTickNumberFormat = d3.format('s'),\n            xTickDateFormat = d3.time.format('%e'),\n            xTickMonthFormat = d3.time.format('%B'),\n\n            // events\n            dispatch = d3.dispatch('customMouseOver', 'customMouseOut', 'customMouseMove');\n\n        /**\n         * This function creates the graph using the selection and data provided\n         * @param  {D3Selection} _selection A d3 selection that represents\n         * the container(s) where the chart(s) will be rendered\n         */\n        function exports(_selection){\n            /** @param {object} _data The data to attach and generate the chart */\n            _selection.each(function(_data){\n                chartWidth = width - margin.left - margin.right;\n                chartHeight = height - margin.top - margin.bottom;\n                data = _data.data;\n                dataByDate = _data.dataByDate;\n                readableDataType = _data.readableDataType;\n\n                buildScales();\n                buildAxis();\n                buildSVG(this);\n                drawGridLines();\n                drawAxis();\n                drawLines();\n\n                if(shouldShowTooltip()){\n                    drawVerticalMarker();\n                    drawHoverOverlay();\n                    addMouseEvents();\n                }\n            });\n        }\n\n        /**\n         * Adds events to the container group if the environment is not mobile\n         * Adding: mouseover, mouseout and mousemove\n         */\n        function addMouseEvents(){\n            svg\n                .on('mouseover', handleMouseOver)\n                .on('mouseout', handleMouseOut)\n                .on('mousemove', handleMouseMove);\n        }\n\n        /**\n         * Adjusts the position of the y axis' ticks\n         * @param  {D3Selection} selection Y axis group\n         * @return void\n         */\n        function adjustYTickLabels(selection){\n            selection.selectAll('.tick text')\n                .attr('transform', 'translate(0, -7)');\n        }\n\n        /**\n         * Creates the d3 x and y axis, setting orientations\n         * @private\n         */\n        function buildAxis(){\n            xAxis = d3.svg.axis()\n                .scale(xScale)\n                .orient('bottom')\n                .ticks(getMaxNumOfHorizontalTicks(width, dataByDate.length))\n                .tickSize(10, 0).tickPadding(5)\n                .tickFormat(xTickDateFormat);\n\n            xMonthAxis = d3.svg.axis()\n                .scale(xScale)\n                .ticks(d3.time.months)\n                .tickSize(0, 0)\n                .orient('bottom')\n                .tickFormat(xTickMonthFormat);\n\n            yAxis = d3.svg.axis()\n                .scale(yScale)\n                .orient('left')\n                .ticks(numVerticalTics)\n                .tickSize([0])\n                .tickPadding([4])\n                .tickFormat(yTickNumberFormat);\n        }\n\n        /**\n         * Builds containers for the chart, the axis and a wrapper for all of them\n         * NOTE: The order of drawing of this group elements is really important,\n         * as everything else will be drawn on top of them\n         * @private\n         */\n        function buildContainerGroups(){\n           let container = svg.append('g')\n                .classed('container-group', true)\n                .attr('transform', `translate(${margin.left},${margin.top})`);\n\n            container\n                .append('g').classed('x-axis-group', true)\n                .append('g').classed('axis x', true);\n            container.selectAll('.x-axis-group')\n                .append('g').classed('month-axis', true);\n            container\n                .append('g').classed('y-axis-group axis y', true);\n            container\n                .append('g').classed('grid-lines-group', true);\n            container\n                .append('g').classed('chart-group', true);\n            container\n                .append('g').classed('metadata-group', true);\n        }\n\n        /**\n         * Creates the x and y scales of the graph\n         * @private\n         */\n        function buildScales(){\n            let minX = d3.min(data, kv => {\n                    return d3.min(kv.Data, getDate);\n                }),\n                maxX = d3.max(data, function(kv) { return d3.max(kv.Data, getDate); }),\n                minY = d3.min(data, function(kv) { return d3.min(kv.Data, getValue); }),\n                maxY = d3.max(data, function(kv) { return d3.max(kv.Data, getValue); });\n\n            xScale = d3.time.scale()\n                .rangeRound([0, chartWidth])\n                .domain([minX, maxX]);\n\n            yScale = d3.scale.linear()\n                .rangeRound([chartHeight, 0])\n                .domain([Math.abs(minY), Math.abs(maxY)])\n                .nice(3);\n\n            colorScale = d3.scale.ordinal()\n                .range(colorRange)\n                .domain(data.map(getTopic));\n\n            topicColorMap = _.object(\n                colorScale.domain(),\n                colorScale.range()\n            );\n        }\n\n        /**\n         * @param  {HTMLElement} container DOM element that will work as the container of the graph\n         * @private\n         */\n        function buildSVG(container){\n            if (!svg) {\n                svg = d3.select(container)\n                    .append('svg')\n                    .classed('britechart line-chart', true);\n\n                buildContainerGroups();\n            }\n\n            svg\n                .transition()\n                .ease(ease)\n                .attr({\n                    width: width,\n                    height: height\n                });\n        }\n\n        /**\n         * Removes all the datapoints highlighter circles added to the marker container\n         * @return void\n         */\n        function cleanDataPointHighlights(){\n            verticalMarkerContainer.selectAll('.circle-container').remove();\n        }\n\n        /**\n         * @description\n         * Draws the x and y axis on the svg object within their\n         * respective groups\n         * @private\n         */\n        function drawAxis(){\n            svg.select('.x-axis-group .axis.x')\n                .transition()\n                .ease(ease)\n                .attr('transform', 'translate(0,' + chartHeight + ')')\n                .call(xAxis);\n\n            svg.select('.x-axis-group .month-axis')\n                .transition()\n                .ease(ease)\n                .attr('transform', 'translate(0,' + (chartHeight + 28) + ')')\n                .call(xMonthAxis);\n\n            svg.select('.y-axis-group.axis.y')\n                .transition()\n                .ease(ease)\n                .attr('transform', 'translate(' + (-xAxisPadding.left) + ', 0)')\n                .call(yAxis)\n                .call(adjustYTickLabels);\n        }\n\n        /**\n         * Draws the line elements within the chart group\n         * @private\n         */\n        function drawLines(){\n            let lines,\n                topicLine,\n                maskingRectangle;\n\n            topicLine = d3.svg.line()\n                .x(function(d) {\n                    return xScale(d.date);\n                })\n                .y(function(d) { return yScale(d.value); });\n\n            lines = svg.select('.chart-group').selectAll('.line')\n                .data(data);\n\n            lines\n                .enter()\n                .append('g')\n                .attr('class', 'topic')\n                .append('path')\n                .attr('class', 'line')\n                .attr('d', function(d) {\n                    return topicLine(d.Data);\n                })\n                .style({\n                    'stroke': getLineColor\n                });\n\n            lines\n                .exit()\n                .remove();\n\n            // We use a white rectangle to simulate the line drawing animation\n            maskingRectangle = svg.append('rect')\n                .attr('class', 'masking-rectangle')\n                .attr('width', width - 30)\n                .attr('height', height + 20)\n                .attr('x', 60)\n                .attr('y', -18);\n\n            maskingRectangle.transition()\n                .duration(2000)\n                .ease('cubic-out')\n                .attr('x', width)\n                .each('end', function() {\n                    maskingRectangle.remove();\n                });\n        }\n\n        /**\n         * Draws grid lines on the background of the chart\n         * @return void\n         */\n        function drawGridLines(){\n            maskGridLines = svg.select('.grid-lines-group')\n                .selectAll('line.horizontal-grid-line')\n                .data(yScale.ticks(5))\n                .enter()\n                    .append('line')\n                    .attr({\n                        'class': 'horizontal-grid-line',\n                        'x1': (-xAxisPadding.left - 30),\n                        'x2': chartWidth,\n                        'y1': function(d) { return yScale(d); },\n                        'y2': function(d) { return yScale(d); }\n                    });\n\n            //draw a horizontal line to extend x-axis till the edges\n            baseLine = svg.select('.grid-lines-group')\n                .selectAll('line.extended-x-line')\n                .data([0])\n                .enter()\n                    .append('line')\n                    .attr({\n                        'class': 'extended-x-line',\n                        'x1': (-xAxisPadding.left - 30),\n                        'x2': chartWidth,\n                        'y1': height - margin.bottom - margin.top,\n                        'y2': height - margin.bottom - margin.top\n                    });\n        }\n\n        /**\n         * Draws an overlay element over the graph\n         * @inner\n         * @return void\n         */\n        function drawHoverOverlay(){\n            overlay = svg.select('.metadata-group')\n                .append('rect')\n                .attr('class','overlay')\n                .attr('y1', 0)\n                .attr('y2', height)\n                .attr('height', height - margin.top - margin.bottom)\n                .attr('width', width - margin.left - margin.right)\n                .attr('fill', overlayColor)\n                .style('display', 'none');\n        }\n\n        /**\n         * Creates the vertical marker\n         * @return void\n         */\n        function drawVerticalMarker(){\n            verticalMarkerContainer = svg.select('.metadata-group')\n                .append('g')\n                .attr('class', 'hover-marker')\n                .attr('transform', 'translate(' + '9999' + ',' + '0' + ')');\n\n            verticalMarkerLine = verticalMarkerContainer.selectAll('path')\n                .data([{\n                    'x1': 0,\n                    'y1': 0,\n                    'x2': 0,\n                    'y2': 0\n                }])\n                .enter()\n                .append('line')\n                .classed('vertical-marker', true)\n                .attr({\n                    'x1': 0,\n                    'y1': height - margin.top - margin.bottom,\n                    'x2': 0,\n                    'y2': 0\n                });\n        }\n\n        /**\n         * Finds out which datapoint is closer to the given x position\n         * @param  {number} x0 Date value for data point\n         * @param  {obj} d0 Previous datapoint\n         * @param  {obj} d1 Next datapoint\n         * @return {obj}    d0 or d1, the datapoint with closest date to x0\n         */\n        function findOutNearestDate(x0, d0, d1){\n            return (new Date(x0).getTime() - new Date(d0.date).getTime()) > (new Date(d1.date).getTime() - new Date(x0).getTime()) ? d0 : d1;\n        }\n\n        /**\n         * Calculates the maximum number of ticks for the x axis\n         * @param  {number} width Chart width\n         * @param  {number} dataPointNumber  Number of entries on the data\n         * @return {number}       Number of ticks to render\n         */\n        function getMaxNumOfHorizontalTicks(width, dataPointNumber) {\n            let singleTickWidth = 20,\n                spacing = 40,\n                ticksForWidth = Math.ceil(width / (singleTickWidth + spacing));\n\n            return Math.min(dataPointNumber, ticksForWidth);\n        }\n\n        /**\n         * Extract X position on the graph from a given mouse event\n         * @param  {obj} event D3 mouse event\n         * @return {number}       Position on the x axis of the mouse\n         */\n        function getMouseXPosition(event) {\n            return d3.mouse(event)[0];\n        }\n\n        /**\n         * Formats the date in ISOString\n         * @param  {string} date Date as given in data entries\n         * @return {string}      Date in ISO format in a neutral timezone\n         */\n        function getFormattedDateFromData(date) {\n            return date.toISOString().split('T')[0] + 'T00:00:00Z';\n        }\n\n        /**\n         * Finds out the data entry that is closer to the given position on pixels\n         * @param  {number} mouseX X position of the mouse\n         * @return {obj}        Data entry that is closer to that x axis position\n         */\n        function getNearestDataPoint(mouseX) {\n            let invertedX = xScale.invert(mouseX),\n                bisectDate = d3.bisector(getDate).left,\n                dataEntryIndex, dateOnCursorXPosition, dataEntryForXPosition, previousDataEntryForXPosition,\n                nearestDataPoint;\n\n            dateOnCursorXPosition = getFormattedDateFromData(invertedX);\n            dataEntryIndex = bisectDate(dataByDate, dateOnCursorXPosition, 1);\n            dataEntryForXPosition = dataByDate[dataEntryIndex];\n            previousDataEntryForXPosition = dataByDate[dataEntryIndex - 1];\n\n            if (previousDataEntryForXPosition && dataEntryForXPosition) {\n                nearestDataPoint = findOutNearestDate(dateOnCursorXPosition, dataEntryForXPosition, previousDataEntryForXPosition);\n            } else {\n                nearestDataPoint = dataEntryForXPosition;\n            }\n\n            return nearestDataPoint;\n        }\n\n        /**\n         * MouseMove handler, calculates the nearest dataPoint to the cursor\n         * and updates metadata related to it\n         * @return void\n         */\n        function handleMouseMove(){\n            let xPositionOffset = -margin.left, //Arbitrary number, will love to know how to assess it\n                dataPoint = getNearestDataPoint(getMouseXPosition(this) + xPositionOffset),\n                dataPointXPosition;\n\n            if(dataPoint) {\n                // More verticalMarker to that datapoint\n                moveVerticalMarker(dataPoint);\n                // Add data points highlighting\n                highlightDataPoints(dataPoint);\n                // Emit event with xPosition for tooltip or similar feature\n                dataPointXPosition = xScale(new Date(dataPoint.date));\n                dispatch.customMouseMove(dataPoint, topicColorMap, dataPointXPosition);\n            }\n        }\n\n        /**\n         * MouseOut handler, hides overlay and removes active class on verticalMarkerLine\n         * It also resets the container of the vertical marker\n         * @return void\n         */\n        function handleMouseOut(data){\n            overlay.style('display', 'none');\n            verticalMarkerLine.classed('bc-is-active', false);\n            verticalMarkerContainer.attr('transform', 'translate(' + '9999' + ',' + '0' + ')');\n\n            dispatch.customMouseOut(data);\n        }\n\n        /**\n         * Mouseover handler, shows overlay and adds active class to verticalMarkerLine\n         * @return void\n         */\n        function handleMouseOver(data){\n            overlay.style('display', 'block');\n            verticalMarkerLine.classed('bc-is-active', true);\n\n            dispatch.customMouseOver(data);\n        }\n\n        /**\n         * Creates coloured circles marking where the exact data y value is for a given data point\n         * @param  {obj} dataPoint Data point to extract info from\n         * @return void\n         */\n        function highlightDataPoints(dataPoint){\n            cleanDataPointHighlights();\n\n            // sorting the topics based on the order of the colors,\n            // so that the order always stays constant\n            dataPoint.topics = _.chain(dataPoint.topics)\n                .compact()\n                .sortBy(function(el) {\n                    return colorOrder[topicColorMap[el.name]];\n                })\n                .value();\n\n            dataPoint.topics.forEach(function(topic, index){\n                let marker = verticalMarkerContainer\n                                .append('g')\n                                .classed('circle-container', true),\n                    circleSize = 12;\n\n                marker.append('circle')\n                    .classed('data-point-highlighter', true)\n                    .attr({\n                        'cx': circleSize,\n                        'cy': 0,\n                        'r': 5\n                    })\n                    .style({\n                        'stroke': topicColorMap[topic.name]\n                    });\n\n                marker.attr('transform', 'translate(' + (- circleSize) + ',' + (yScale(dataPoint.topics[index].value)) + ')');\n            });\n        }\n\n        /**\n         * Helper method to update the x position of the vertical marker\n         * @param  {obj} dataPoint Data entry to extract info\n         * @return void\n         */\n        function moveVerticalMarker(dataPoint){\n            let date = new Date(dataPoint.date),\n                verticalMarkerXPosition = xScale(date);\n\n            verticalMarkerContainer.attr('transform', `translate(${verticalMarkerXPosition},0)`);\n        }\n\n        /**\n         * Determines if we should add the tooltip related logic depending on the\n         * size of the chart and the tooltipThreshold variable value\n         * @return {boolean} Should we build the tooltip?\n         */\n        function shouldShowTooltip() {\n            return width > tooltipThreshold;\n        }\n\n        // API Methods\n\n        /**\n         * Gets or Sets the aspect ratio of the chart\n         * @param  {number} _x Desired aspect ratio for the graph\n         * @return { number | module} Current aspect ratio or Line Chart module to chain calls\n         * @public\n         */\n        exports.aspectRatio = function(_x) {\n            if (!arguments.length) {\n                return aspectRatio;\n            }\n            aspectRatio = _x;\n            return this;\n        };\n\n        /**\n         * Gets or Sets the height of the chart\n         * @param  {number} _x Desired width for the graph\n         * @return { height | module} Current height or Line Chart module to chain calls\n         * @public\n         */\n        exports.height = function(_x) {\n            if (!arguments.length) {\n                return height;\n            }\n            if (aspectRatio) {\n                width = Math.ceil(_x / aspectRatio);\n            }\n            height = _x;\n            return this;\n        };\n\n        /**\n         * Gets or Sets the margin of the chart\n         * @param  {object} _x Margin object to get/set\n         * @return { margin | module} Current margin or Line Chart module to chain calls\n         * @public\n         */\n        exports.margin = function(_x) {\n            if (!arguments.length) {\n                return margin;\n            }\n            margin = _x;\n            return this;\n        };\n\n        /**\n         * Gets or Sets the minimum width of the graph in order to show the tooltip\n         * NOTE: This could also depend on the aspect ratio\n         * @param  {number} _x Desired tooltip threshold for the graph\n         * @return { number | module} Current tooltip threshold or Line Chart module to chain calls\n         * @public\n         */\n        exports.tooltipThreshold = function(_x) {\n            if (!arguments.length) {\n                return tooltipThreshold;\n            }\n            tooltipThreshold = _x;\n            return this;\n        };\n\n        /**\n         * Gets or Sets the width of the chart\n         * @param  {number} _x Desired width for the graph\n         * @return { width | module} Current width or Line Chart module to chain calls\n         * @public\n         */\n        exports.width = function(_x) {\n            if (!arguments.length) {\n                return width;\n            }\n            if (aspectRatio) {\n                height = Math.ceil(_x * aspectRatio);\n            }\n            width = _x;\n            return this;\n        };\n\n        // Rebind 'customHover' event to the \"exports\" function, so it's available \"externally\" under the typical \"on\" method:\n        d3.rebind(exports, dispatch, 'on');\n\n        return exports;\n    };\n\n});\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/charts/line.js\n **/","module.exports = __WEBPACK_EXTERNAL_MODULE_1__;\n\n\n/*****************\n ** WEBPACK FOOTER\n ** external \"d3\"\n ** module id = 1\n ** module chunks = 0 1 2 3 4\n **/","module.exports = __WEBPACK_EXTERNAL_MODULE_2__;\n\n\n/*****************\n ** WEBPACK FOOTER\n ** external \"underscore\"\n ** module id = 2\n ** module chunks = 3\n **/"],"sourceRoot":""}