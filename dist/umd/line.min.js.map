{"version":3,"sources":["webpack:///webpack/universalModuleDefinition?5ca6***","webpack:///line.min.js","webpack:///webpack/bootstrap 55e57523fbdb728288bc?177e***","webpack:///./src/charts/line.js","webpack:///external \"d3\"?c0c4***","webpack:///./src/charts/helpers/exportChart.js?f69b*","webpack:///./src/charts/helpers/serializeWithStyles.js?b833*","webpack:///./~/base-64/base64.js?68a6*","webpack:///(webpack)/buildin/module.js?c3c2*"],"names":["root","factory","exports","module","require","define","amd","a","i","this","__WEBPACK_EXTERNAL_MODULE_1__","modules","__webpack_require__","moduleId","installedModules","id","loaded","call","m","c","p","__WEBPACK_AMD_DEFINE_RESULT__","d3","exportChart","_selection","each","_data","data","dataByDate","chartWidth","width","margin","left","right","chartHeight","height","top","bottom","buildScales","buildAxis","buildSVG","drawGridLines","drawAxis","buildGradient","drawLines","shouldShowTooltip","drawVerticalMarker","drawHoverOverlay","addMouseEvents","svg","on","handleMouseOver","handleMouseOut","handleMouseMove","adjustYTickLabels","selection","selectAll","attr","xAxis","axis","scale","xScale","orient","ticks","getMaxNumOfHorizontalTicks","length","tickSize","tickPadding","tickFormat","xTickDateFormat","xMonthAxis","time","months","xTickMonthFormat","yAxis","yScale","numVerticalTics","yTickNumberFormat","buildContainerGroups","container","append","classed","select","offset","color","singleLineGradientColors","enter","_ref5","_ref6","minX","min","_ref7","Data","getDate","maxX","max","_ref8","minY","_ref9","getValue","maxY","_ref10","rangeRound","domain","linear","Math","abs","nice","colorScale","ordinal","range","colorRange","map","getTopic","topicColorMap","reduce","memo","item","transition","ease","cleanDataPointHighlights","verticalMarkerContainer","remove","xAxisPadding","lines","topicLine","maskingRectangle","line","x","_ref11","date","y","_ref12","value","_ref13","style","d","getLineColor","exit","duration","maskGridLines","class","x1","x2","y1","y2","baseLine","overlay","overlayColor","verticalMarkerLine","findOutNearestDate","x0","d0","d1","Date","getTime","dataPointNumber","singleTickWidth","spacing","ticksForWidth","ceil","getMouseXPosition","event","mouse","getFormattedDateFromData","toISOString","split","getNearestDataPoint","mouseX","invertedX","invert","bisectDate","bisector","dataEntryIndex","dateOnCursorXPosition","dataEntryForXPosition","previousDataEntryForXPosition","nearestDataPoint","xPositionOffset","dataPoint","dataPointXPosition","moveVerticalMarker","highlightDataPoints","dispatch","customMouseMove","customMouseOut","customMouseOver","topics","filter","t","sort","b","name","forEach","_ref14","index","marker","circleSize","cx","cy","r","stroke","verticalMarkerXPosition","tooltipThreshold","aspectRatio","_ref","_ref2","_ref3","topic","_ref4","format","_x","arguments","filename","rebind","undefined","d3svg","canvasWidth","canvasHeight","html","convertSvgToHtml","canvas","createCanvas","img","createImage","onload","handleImageLoad","bind","e","preventDefault","drawImageOnCanvas","downloadCanvas","config","defaultFilename","serializer","serializeWithStyles","initializeSerializer","version","xmlns","serialized","node","replace","styleBackgroundString","document","createElement","svgHtml","Image","src","imageSourceBase","encoder","image","getContext","drawImage","extensionType","url","toDataURL","link","href","download","body","appendChild","click","removeChild","window","btoa","encode","styleClass","chartBackground","computeDefaultStyleByTagName","tagName","defaultStyle","element","computedStyle","getComputedStyle","getDefaultStyleByTagName","toUpperCase","defaultStylesByTagName","elem","cssTexts","elements","result","nodeType","Node","ELEMENT_NODE","querySelectorAll","el","noStyleTags","cssText","cssPropName","outerHTML","console","error","BASE","HEAD","HTML","META","NOFRAME","NOSCRIPT","PARAM","SCRIPT","STYLE","TITLE","tagNames","global","freeExports","freeGlobal","InvalidCharacterError","message","prototype","Error","TABLE","REGEX_SPACE_CHARACTERS","decode","input","String","test","bitStorage","buffer","bitCounter","output","position","indexOf","charAt","fromCharCode","padding","charCodeAt","base64","webpackPolyfill","deprecate","paths","children"],"mappings":"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","file":"line.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"d3\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"d3\"], factory);\n\telse {\n\t\tvar a = typeof exports === 'object' ? factory(require(\"d3\")) : factory(root[\"d3\"]);\n\t\tfor(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];\n\t}\n})(this, function(__WEBPACK_EXTERNAL_MODULE_1__) {\nreturn \n\n\n/** WEBPACK FOOTER **\n ** webpack/universalModuleDefinition\n **/","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"d3\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"d3\"], factory);\n\telse {\n\t\tvar a = typeof exports === 'object' ? factory(require(\"d3\")) : factory(root[\"d3\"]);\n\t\tfor(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];\n\t}\n})(this, function(__WEBPACK_EXTERNAL_MODULE_1__) {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_RESULT__;'use strict';\n\t\n\t!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {\n\t    'use strict';\n\t\n\t    var d3 = __webpack_require__(1);\n\t\n\t    var exportChart = __webpack_require__(2);\n\t\n\t    /**\n\t     * @typedef D3Selection\n\t     * @type {Array[]}\n\t     * @property {Number} length            Size of the selection\n\t     * @property {DOMElement} parentNode    Parent of the selection\n\t     */\n\t\n\t    /**\n\t     * @typedef lineChartPointByTopic\n\t     * @type {Object}\n\t     * @property {Object[]} Data       All data entries for a given topic (required)\n\t     * @property {Number} topic        Topic identifier (required)\n\t     * @property {String} topicName    Topic name (required)\n\t     *\n\t     * @example\n\t     * {\n\t     *     Data: [\n\t     *         {\n\t     *             date: '',\n\t     *             fullDate: '',\n\t     *             value: 1\n\t     *         },\n\t     *         {\n\t     *             date: '',\n\t     *             fullDate: '',\n\t     *             value: 2\n\t     *         }\n\t     *     ],\n\t     *     topic: 123,\n\t     *     topicName: 'San Francisco'\n\t     * }\n\t     */\n\t\n\t    /**\n\t     * @typedef lineChartPointByDate\n\t     * @type {Object}\n\t     * @property {Date} date               Date value (required)\n\t     * @property {Object[]} topics         Data entries for that day (required)\n\t     *\n\t     * @example\n\t     * {\n\t     *     date: '2015-06-27T07:00:00.000Z'\n\t     *     topics: [\n\t     *         {\n\t     *             name: 123,\n\t     *             topicName: 'San Francisco',\n\t     *             value: 1\n\t     *         },\n\t     *         {\n\t     *             name: 345,\n\t     *             topicName: 'Other',\n\t     *             value: 2\n\t     *         }\n\t     *     ]\n\t     * }\n\t     */\n\t\n\t    /**\n\t     * @typedef LineChartData\n\t     * @type {Object[]}\n\t     * @property {lineChartPointByTopic[]} data                   Data values to chart (required)\n\t     * @property {lineChartPointByDate[]} dataByDate    Data values to chart ordered by date (required)\n\t     *\n\t     * @example\n\t     * {\n\t     *     data: [\n\t     *         {\n\t     *             Data: [\n\t     *                 {\n\t     *                     date: '',\n\t     *                     fullDate: '',\n\t     *                     value: 1\n\t     *                 },\n\t     *                 {\n\t     *                     date: '',\n\t     *                     fullDate: '',\n\t     *                     value: 2\n\t     *                 }\n\t     *             ],\n\t     *             topic: 123,\n\t     *             topicName: 'San Francisco'\n\t     *         },\n\t     *         {\n\t     *             Data: [\n\t     *                 {...},\n\t     *                 {...}\n\t     *             ],\n\t     *             topic: 345,\n\t     *             topicName: 'Other'\n\t     *         }\n\t     *     ],\n\t     *     dataByDate: [\n\t     *         {\n\t     *             date: '2015-06-27T07:00:00.000Z'\n\t     *             topics: [\n\t     *                 {\n\t     *                     name: 123,\n\t     *                     topicName: 'San Francisco',\n\t     *                     value: 1\n\t     *                 },\n\t     *                 {\n\t     *                     name: 345,\n\t     *                     topicName: 'Other',\n\t     *                     value: 2\n\t     *                 }\n\t     *             ]\n\t     *         },\n\t     *         {...}\n\t     *     ]\n\t     * }\n\t     */\n\t\n\t    /**\n\t     * Line Chart reusable API module that allows us\n\t     * rendering a multi line and configurable chart.\n\t     *\n\t     * @module Line\n\t     * @version 0.0.1\n\t     * @tutorial line\n\t     * @requires d3\n\t     *\n\t     * @example\n\t     * var lineChart = line();\n\t     *\n\t     * lineChart\n\t     *     .aspectRatio(0.5)\n\t     *     .width(500);\n\t     *\n\t     * d3.select('.css-selector')\n\t     *     .datum(dataset)\n\t     *     .call(lineChart);\n\t     *\n\t     */\n\t    return function line() {\n\t\n\t        var margin = {\n\t            top: 60,\n\t            right: 20,\n\t            bottom: 60,\n\t            left: 80\n\t        },\n\t            width = 960,\n\t            height = 500,\n\t            aspectRatio = null,\n\t            tooltipThreshold = 480,\n\t            svg = void 0,\n\t            chartWidth = void 0,\n\t            chartHeight = void 0,\n\t            xScale = void 0,\n\t            yScale = void 0,\n\t            colorScale = void 0,\n\t            xAxis = void 0,\n\t            xMonthAxis = void 0,\n\t            yAxis = void 0,\n\t            xAxisPadding = {\n\t            top: 0,\n\t            left: 15,\n\t            bottom: 0,\n\t            right: 0\n\t        },\n\t            colorRange = ['#4DC2F5', '#4DDB86', '#E5C400', '#FF4D7C', '#9963D5', '#051C48'],\n\t            colorOrder = {\n\t            '#4DC2F5': 0,\n\t            '#4DDB86': 1,\n\t            '#E5C400': 2,\n\t            '#FF4D7C': 3,\n\t            '#9963D5': 4,\n\t            '#051C48': 5\n\t        },\n\t            singleLineGradientColors = ['#39C7EA', '#4CDCBA'],\n\t            topicColorMap = void 0,\n\t            ease = 'ease',\n\t            data = void 0,\n\t            dataByDate = void 0,\n\t            numVerticalTics = 5,\n\t            overlay = void 0,\n\t            overlayColor = 'rgba(0, 0, 0, 0)',\n\t            verticalMarkerContainer = void 0,\n\t            verticalMarkerLine = void 0,\n\t            maskGridLines = void 0,\n\t            baseLine = void 0,\n\t\n\t\n\t        // extractors\n\t        getDate = function getDate(_ref) {\n\t            var date = _ref.date;\n\t            return date;\n\t        },\n\t            getValue = function getValue(_ref2) {\n\t            var value = _ref2.value;\n\t            return value;\n\t        },\n\t            getTopic = function getTopic(_ref3) {\n\t            var topic = _ref3.topic;\n\t            return topic;\n\t        },\n\t            getLineColor = function getLineColor(_ref4) {\n\t            var topic = _ref4.topic;\n\t            return colorScale(topic);\n\t        },\n\t\n\t\n\t        // formats\n\t        yTickNumberFormat = d3.format('s'),\n\t            xTickDateFormat = d3.time.format('%e'),\n\t            xTickMonthFormat = d3.time.format('%b'),\n\t\n\t\n\t        // events\n\t        dispatch = d3.dispatch('customMouseOver', 'customMouseOut', 'customMouseMove');\n\t\n\t        /**\n\t         * This function creates the graph using the selection and data provided\n\t         *\n\t         * @param {D3Selection} _selection A d3 selection that represents\n\t         *                                  the container(s) where the chart(s) will be rendered\n\t         * @param {LineChartData} _data The data to attach and generate the chart\n\t         */\n\t        function exports(_selection) {\n\t            _selection.each(function (_data) {\n\t                data = _data.data;\n\t                dataByDate = _data.dataByDate;\n\t\n\t\n\t                chartWidth = width - margin.left - margin.right;\n\t                chartHeight = height - margin.top - margin.bottom;\n\t\n\t                buildScales();\n\t                buildAxis();\n\t                buildSVG(this);\n\t                drawGridLines();\n\t                drawAxis();\n\t                buildGradient();\n\t                drawLines();\n\t\n\t                if (shouldShowTooltip()) {\n\t                    drawVerticalMarker();\n\t                    drawHoverOverlay();\n\t                    addMouseEvents();\n\t                }\n\t            });\n\t        }\n\t\n\t        /**\n\t         * Adds events to the container group if the environment is not mobile\n\t         * Adding: mouseover, mouseout and mousemove\n\t         */\n\t        function addMouseEvents() {\n\t            svg.on('mouseover', handleMouseOver).on('mouseout', handleMouseOut).on('mousemove', handleMouseMove);\n\t        }\n\t\n\t        /**\n\t         * Adjusts the position of the y axis' ticks\n\t         * @param  {D3Selection} selection Y axis group\n\t         * @return void\n\t         */\n\t        function adjustYTickLabels(selection) {\n\t            selection.selectAll('.tick text').attr('transform', 'translate(0, -7)');\n\t        }\n\t\n\t        /**\n\t         * Creates the d3 x and y axis, setting orientations\n\t         * @private\n\t         */\n\t        function buildAxis() {\n\t            xAxis = d3.svg.axis().scale(xScale).orient('bottom').ticks(getMaxNumOfHorizontalTicks(width, dataByDate.length)).tickSize(10, 0).tickPadding(5).tickFormat(xTickDateFormat);\n\t\n\t            xMonthAxis = d3.svg.axis().scale(xScale).ticks(d3.time.months).tickSize(0, 0).orient('bottom').tickFormat(xTickMonthFormat);\n\t\n\t            yAxis = d3.svg.axis().scale(yScale).orient('left').ticks(numVerticalTics).tickSize([0]).tickPadding([4]).tickFormat(yTickNumberFormat);\n\t        }\n\t\n\t        /**\n\t         * Builds containers for the chart, the axis and a wrapper for all of them\n\t         * NOTE: The order of drawing of this group elements is really important,\n\t         * as everything else will be drawn on top of them\n\t         * @private\n\t         */\n\t        function buildContainerGroups() {\n\t            var container = svg.append('g').classed('container-group', true).attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\t\n\t            container.append('g').classed('x-axis-group', true).append('g').classed('axis x', true);\n\t            container.selectAll('.x-axis-group').append('g').classed('month-axis', true);\n\t            container.append('g').classed('y-axis-group axis y', true);\n\t            container.append('g').classed('grid-lines-group', true);\n\t            container.append('g').classed('chart-group', true);\n\t            container.append('g').classed('metadata-group', true);\n\t        }\n\t\n\t        /**\n\t         * Builds the gradient element to be used later\n\t         * @return {void}\n\t         */\n\t        function buildGradient() {\n\t            svg.select('.metadata-group').append('linearGradient').attr('id', 'line-area-gradient').attr('x1', '0%').attr('y1', '0%').attr('x2', '100%').attr('y2', '0%').selectAll('stop').data([{ offset: '0%', color: singleLineGradientColors[0] }, { offset: '100%', color: singleLineGradientColors[1] }]).enter().append('stop').attr('offset', function (_ref5) {\n\t                var offset = _ref5.offset;\n\t                return offset;\n\t            }).attr('stop-color', function (_ref6) {\n\t                var color = _ref6.color;\n\t                return color;\n\t            });\n\t        }\n\t\n\t        /**\n\t         * Creates the x and y scales of the graph\n\t         * @private\n\t         */\n\t        function buildScales() {\n\t            var minX = d3.min(data, function (_ref7) {\n\t                var Data = _ref7.Data;\n\t                return d3.min(Data, getDate);\n\t            }),\n\t                maxX = d3.max(data, function (_ref8) {\n\t                var Data = _ref8.Data;\n\t                return d3.max(Data, getDate);\n\t            }),\n\t                minY = d3.min(data, function (_ref9) {\n\t                var Data = _ref9.Data;\n\t                return d3.min(Data, getValue);\n\t            }),\n\t                maxY = d3.max(data, function (_ref10) {\n\t                var Data = _ref10.Data;\n\t                return d3.max(Data, getValue);\n\t            });\n\t\n\t            xScale = d3.time.scale().rangeRound([0, chartWidth]).domain([minX, maxX]);\n\t\n\t            yScale = d3.scale.linear().rangeRound([chartHeight, 0]).domain([Math.abs(minY), Math.abs(maxY)]).nice(3);\n\t\n\t            colorScale = d3.scale.ordinal().range(colorRange).domain(data.map(getTopic));\n\t\n\t            // TODO add spread and rest operators to britecharts\n\t            /*\n\t                let range = colorScale.range();\n\t                topicColorMap = colorScale.domain().reduce((memo, item, i) => ({...memo, [item]: range[i], }), {});\n\t             */\n\t\n\t            var range = colorScale.range();\n\t            topicColorMap = colorScale.domain().reduce(function (memo, item, i) {\n\t                memo[item] = range[i];\n\t                return memo;\n\t            }, {});\n\t        }\n\t\n\t        /**\n\t         * Builds the SVG element that will contain the chart\n\t         *\n\t         * @param  {HTMLElement} container DOM element that will work as the container of the graph\n\t         * @private\n\t         */\n\t        function buildSVG(container) {\n\t            if (!svg) {\n\t                svg = d3.select(container).append('svg').classed('britechart line-chart', true);\n\t\n\t                buildContainerGroups();\n\t            }\n\t\n\t            svg.transition().ease(ease).attr({\n\t                width: width,\n\t                height: height\n\t            });\n\t        }\n\t\n\t        /**\n\t         * Removes all the datapoints highlighter circles added to the marker container\n\t         * @return void\n\t         */\n\t        function cleanDataPointHighlights() {\n\t            verticalMarkerContainer.selectAll('.circle-container').remove();\n\t        }\n\t\n\t        /**\n\t         * Draws the x and y axis on the svg object within their\n\t         * respective groups\n\t         * @private\n\t         */\n\t        function drawAxis() {\n\t            svg.select('.x-axis-group .axis.x').transition().ease(ease).attr('transform', 'translate(0, ' + chartHeight + ')').call(xAxis);\n\t\n\t            svg.select('.x-axis-group .month-axis').transition().ease(ease).attr('transform', 'translate(0, ' + (chartHeight + 28) + ')').call(xMonthAxis);\n\t\n\t            svg.select('.y-axis-group.axis.y').transition().ease(ease).attr('transform', 'translate(' + -xAxisPadding.left + ', 0)').call(yAxis).call(adjustYTickLabels);\n\t        }\n\t\n\t        /**\n\t         * Draws the line elements within the chart group\n\t         * @private\n\t         */\n\t        function drawLines() {\n\t            var lines = void 0,\n\t                topicLine = void 0,\n\t                maskingRectangle = void 0;\n\t\n\t            topicLine = d3.svg.line().x(function (_ref11) {\n\t                var date = _ref11.date;\n\t                return xScale(date);\n\t            }).y(function (_ref12) {\n\t                var value = _ref12.value;\n\t                return yScale(value);\n\t            });\n\t\n\t            lines = svg.select('.chart-group').selectAll('.line').data(data);\n\t\n\t            lines.enter().append('g').attr('class', 'topic').append('path').attr('class', 'line').attr('d', function (_ref13) {\n\t                var Data = _ref13.Data;\n\t                return topicLine(Data);\n\t            }).style('stroke', function (d) {\n\t                return data.length === 1 ? 'url(#line-area-gradient)' : getLineColor(d);\n\t            });\n\t\n\t            lines.exit().remove();\n\t\n\t            // We use a white rectangle to simulate the line drawing animation\n\t            maskingRectangle = svg.append('rect').attr('class', 'masking-rectangle').attr('width', width - 30).attr('height', height + 20).attr('x', 60).attr('y', -18);\n\t\n\t            maskingRectangle.transition().duration(2000).ease('cubic-out').attr('x', width).each('end', function () {\n\t                return maskingRectangle.remove();\n\t            });\n\t        }\n\t\n\t        /**\n\t         * Draws grid lines on the background of the chart\n\t         * @return void\n\t         */\n\t        function drawGridLines() {\n\t            maskGridLines = svg.select('.grid-lines-group').selectAll('line.horizontal-grid-line').data(yScale.ticks(5)).enter().append('line').attr({\n\t                class: 'horizontal-grid-line',\n\t                x1: -xAxisPadding.left - 30,\n\t                x2: chartWidth,\n\t                y1: function y1(d) {\n\t                    return yScale(d);\n\t                },\n\t                y2: function y2(d) {\n\t                    return yScale(d);\n\t                }\n\t            });\n\t\n\t            //draw a horizontal line to extend x-axis till the edges\n\t            baseLine = svg.select('.grid-lines-group').selectAll('line.extended-x-line').data([0]).enter().append('line').attr({\n\t                class: 'extended-x-line',\n\t                x1: -xAxisPadding.left - 30,\n\t                x2: chartWidth,\n\t                y1: height - margin.bottom - margin.top,\n\t                y2: height - margin.bottom - margin.top\n\t            });\n\t        }\n\t\n\t        /**\n\t         * Draws an overlay element over the graph\n\t         * @inner\n\t         * @return void\n\t         */\n\t        function drawHoverOverlay() {\n\t            overlay = svg.select('.metadata-group').append('rect').attr('class', 'overlay').attr('y1', 0).attr('y2', height).attr('height', height - margin.top - margin.bottom).attr('width', width - margin.left - margin.right).attr('fill', overlayColor).style('display', 'none');\n\t        }\n\t\n\t        /**\n\t         * Creates the vertical marker\n\t         * @return void\n\t         */\n\t        function drawVerticalMarker() {\n\t            verticalMarkerContainer = svg.select('.metadata-group').append('g').attr('class', 'hover-marker vertical-marker-container').attr('transform', 'translate(9999, 0)');\n\t\n\t            verticalMarkerLine = verticalMarkerContainer.selectAll('path').data([{\n\t                x1: 0,\n\t                y1: 0,\n\t                x2: 0,\n\t                y2: 0\n\t            }]).enter().append('line').classed('vertical-marker', true).attr({\n\t                x1: 0,\n\t                y1: height - margin.top - margin.bottom,\n\t                x2: 0,\n\t                y2: 0\n\t            });\n\t        }\n\t\n\t        /**\n\t         * Finds out which datapoint is closer to the given x position\n\t         * @param  {Number} x0 Date value for data point\n\t         * @param  {Object} d0 Previous datapoint\n\t         * @param  {Object} d1 Next datapoint\n\t         * @return {Object}    d0 or d1, the datapoint with closest date to x0\n\t         */\n\t        function findOutNearestDate(x0, d0, d1) {\n\t            return new Date(x0).getTime() - new Date(d0.date).getTime() > new Date(d1.date).getTime() - new Date(x0).getTime() ? d0 : d1;\n\t        }\n\t\n\t        /**\n\t         * Calculates the maximum number of ticks for the x axis\n\t         * @param  {Number} width Chart width\n\t         * @param  {Number} dataPointNumber  Number of entries on the data\n\t         * @return {Number}       Number of ticks to render\n\t         */\n\t        function getMaxNumOfHorizontalTicks(width, dataPointNumber) {\n\t            var singleTickWidth = 20,\n\t                spacing = 40,\n\t                ticksForWidth = Math.ceil(width / (singleTickWidth + spacing));\n\t\n\t            return Math.min(dataPointNumber, ticksForWidth);\n\t        }\n\t\n\t        /**\n\t         * Extract X position on the graph from a given mouse event\n\t         * @param  {Object} event D3 mouse event\n\t         * @return {Number}       Position on the x axis of the mouse\n\t         */\n\t        function getMouseXPosition(event) {\n\t            return d3.mouse(event)[0];\n\t        }\n\t\n\t        /**\n\t         * Formats the date in ISOString\n\t         * @param  {String} date Date as given in data entries\n\t         * @return {String}      Date in ISO format in a neutral timezone\n\t         */\n\t        function getFormattedDateFromData(date) {\n\t            return date.toISOString().split('T')[0] + 'T00:00:00Z';\n\t        }\n\t\n\t        /**\n\t         * Finds out the data entry that is closer to the given position on pixels\n\t         * @param  {Number} mouseX X position of the mouse\n\t         * @return {Object}        Data entry that is closer to that x axis position\n\t         */\n\t        function getNearestDataPoint(mouseX) {\n\t            var invertedX = xScale.invert(mouseX),\n\t                bisectDate = d3.bisector(getDate).left,\n\t                dataEntryIndex = void 0,\n\t                dateOnCursorXPosition = void 0,\n\t                dataEntryForXPosition = void 0,\n\t                previousDataEntryForXPosition = void 0,\n\t                nearestDataPoint = void 0;\n\t\n\t            dateOnCursorXPosition = getFormattedDateFromData(invertedX);\n\t            dataEntryIndex = bisectDate(dataByDate, dateOnCursorXPosition, 1);\n\t            dataEntryForXPosition = dataByDate[dataEntryIndex];\n\t            previousDataEntryForXPosition = dataByDate[dataEntryIndex - 1];\n\t\n\t            if (previousDataEntryForXPosition && dataEntryForXPosition) {\n\t                nearestDataPoint = findOutNearestDate(dateOnCursorXPosition, dataEntryForXPosition, previousDataEntryForXPosition);\n\t            } else {\n\t                nearestDataPoint = dataEntryForXPosition;\n\t            }\n\t\n\t            return nearestDataPoint;\n\t        }\n\t\n\t        /**\n\t         * MouseMove handler, calculates the nearest dataPoint to the cursor\n\t         * and updates metadata related to it\n\t         * @private\n\t         */\n\t        function handleMouseMove() {\n\t            var xPositionOffset = -margin.left,\n\t                //Arbitrary number, will love to know how to assess it\n\t            dataPoint = getNearestDataPoint(getMouseXPosition(this) + xPositionOffset),\n\t                dataPointXPosition = void 0;\n\t\n\t            if (dataPoint) {\n\t                dataPointXPosition = xScale(new Date(dataPoint.date));\n\t                // More verticalMarker to that datapoint\n\t                moveVerticalMarker(dataPointXPosition);\n\t                // Add data points highlighting\n\t                highlightDataPoints(dataPoint);\n\t                // Emit event with xPosition for tooltip or similar feature\n\t                dispatch.customMouseMove(dataPoint, topicColorMap, dataPointXPosition);\n\t            }\n\t        }\n\t\n\t        /**\n\t         * MouseOut handler, hides overlay and removes active class on verticalMarkerLine\n\t         * It also resets the container of the vertical marker\n\t         * @private\n\t         */\n\t        function handleMouseOut(data) {\n\t            overlay.style('display', 'none');\n\t            verticalMarkerLine.classed('bc-is-active', false);\n\t            verticalMarkerContainer.attr('transform', 'translate(9999, 0)');\n\t\n\t            dispatch.customMouseOut(data);\n\t        }\n\t\n\t        /**\n\t         * Mouseover handler, shows overlay and adds active class to verticalMarkerLine\n\t         * @private\n\t         */\n\t        function handleMouseOver(data) {\n\t            overlay.style('display', 'block');\n\t            verticalMarkerLine.classed('bc-is-active', true);\n\t\n\t            dispatch.customMouseOver(data);\n\t        }\n\t\n\t        /**\n\t         * Creates coloured circles marking where the exact data y value is for a given data point\n\t         * @param  {Object} dataPoint Data point to extract info from\n\t         * @private\n\t         */\n\t        function highlightDataPoints(dataPoint) {\n\t            cleanDataPointHighlights();\n\t\n\t            // sorting the topics based on the order of the colors,\n\t            // so that the order always stays constant\n\t            dataPoint.topics = dataPoint.topics.filter(function (t) {\n\t                return !!t;\n\t            }).sort(function (a, b) {\n\t                return topicColorMap[a.name] > topicColorMap[b.name];\n\t            });\n\t\n\t            dataPoint.topics.forEach(function (_ref14, index) {\n\t                var name = _ref14.name;\n\t\n\t                var marker = verticalMarkerContainer.append('g').classed('circle-container', true),\n\t                    circleSize = 12;\n\t\n\t                marker.append('circle').classed('data-point-highlighter', true).attr({\n\t                    cx: circleSize,\n\t                    cy: 0,\n\t                    r: 5\n\t                }).style({\n\t                    stroke: topicColorMap[name]\n\t                });\n\t\n\t                marker.attr('transform', 'translate( ' + -circleSize + ', ' + yScale(dataPoint.topics[index].value) + ' )');\n\t            });\n\t        }\n\t\n\t        /**\n\t         * Helper method to update the x position of the vertical marker\n\t         * @param  {Object} dataPoint Data entry to extract info\n\t         * @return void\n\t         */\n\t        function moveVerticalMarker(verticalMarkerXPosition) {\n\t            verticalMarkerContainer.attr('transform', 'translate(' + verticalMarkerXPosition + ',0)');\n\t        }\n\t\n\t        /**\n\t         * Determines if we should add the tooltip related logic depending on the\n\t         * size of the chart and the tooltipThreshold variable value\n\t         * @return {Boolean} Should we build the tooltip?\n\t         */\n\t        function shouldShowTooltip() {\n\t            return width > tooltipThreshold;\n\t        }\n\t\n\t        // API Methods\n\t\n\t        /**\n\t         * Gets or Sets the aspect ratio of the chart\n\t         * @param  {Number} _x Desired aspect ratio for the graph\n\t         * @return { (Number | Module) } Current aspect ratio or Line Chart module to chain calls\n\t         * @public\n\t         */\n\t        exports.aspectRatio = function (_x) {\n\t            if (!arguments.length) {\n\t                return aspectRatio;\n\t            }\n\t            aspectRatio = _x;\n\t            return this;\n\t        };\n\t\n\t        /**\n\t         * Gets or Sets the ease of the chart\n\t         * @param  {Number} _x Desired width for the graph\n\t         * @return { (Number | Module) } Current ease animation or Line Chart module to chain calls\n\t         * @public\n\t         */\n\t        exports.ease = function (_x) {\n\t            if (!arguments.length) {\n\t                return ease;\n\t            }\n\t            ease = _x;\n\t            return this;\n\t        };\n\t\n\t        /**\n\t         * Gets or Sets the height of the chart\n\t         * @param  {Number} _x Desired width for the graph\n\t         * @return { (Number | Module) } Current height or Line Chart module to chain calls\n\t         * @public\n\t         */\n\t        exports.height = function (_x) {\n\t            if (!arguments.length) {\n\t                return height;\n\t            }\n\t            if (aspectRatio) {\n\t                width = Math.ceil(_x / aspectRatio);\n\t            }\n\t            height = _x;\n\t            return this;\n\t        };\n\t\n\t        /**\n\t         * Gets or Sets the margin of the chart\n\t         * @param  {Object} _x Margin object to get/set\n\t         * @return { (Number | Module) } Current margin or Line Chart module to chain calls\n\t         * @public\n\t         */\n\t        exports.margin = function (_x) {\n\t            if (!arguments.length) {\n\t                return margin;\n\t            }\n\t            margin = _x;\n\t            return this;\n\t        };\n\t\n\t        /**\n\t         * Gets or Sets the minimum width of the graph in order to show the tooltip\n\t         * NOTE: This could also depend on the aspect ratio\n\t         * @param  {Number} _x Desired tooltip threshold for the graph\n\t         * @return { (Number | Module) } Current tooltip threshold or Line Chart module to chain calls\n\t         * @public\n\t         */\n\t        exports.tooltipThreshold = function (_x) {\n\t            if (!arguments.length) {\n\t                return tooltipThreshold;\n\t            }\n\t            tooltipThreshold = _x;\n\t            return this;\n\t        };\n\t\n\t        /**\n\t         * Gets or Sets the width of the chart\n\t         * @param  {Number} _x Desired width for the graph\n\t         * @return { (Number | Module) } Current width or Line Chart module to chain calls\n\t         * @public\n\t         */\n\t        exports.width = function (_x) {\n\t            if (!arguments.length) {\n\t                return width;\n\t            }\n\t            if (aspectRatio) {\n\t                height = Math.ceil(_x * aspectRatio);\n\t            }\n\t            width = _x;\n\t            return this;\n\t        };\n\t\n\t        /**\n\t         * Chart exported to png and a download action is fired\n\t         * @public\n\t         */\n\t        exports.exportChart = function (filename) {\n\t            exportChart.call(exports, svg, filename);\n\t        };\n\t\n\t        // Rebind 'customHover' event to the \"exports\" function, so it's available \"externally\" under the typical \"on\" method:\n\t        d3.rebind(exports, dispatch, 'on');\n\t\n\t        return exports;\n\t    };\n\t}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n/***/ },\n/* 1 */\n/***/ function(module, exports) {\n\n\tmodule.exports = __WEBPACK_EXTERNAL_MODULE_1__;\n\n/***/ },\n/* 2 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_RESULT__;'use strict';\n\t\n\t!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {\n\t\n\t    'use strict';\n\t\n\t    var serializeWithStyles = __webpack_require__(3);\n\t\n\t    var encoder = window.btoa;\n\t\n\t    if (!encoder) {\n\t        encoder = __webpack_require__(4).encode;\n\t    }\n\t\n\t    var config = {\n\t        styleClass: 'britechartStyle',\n\t        defaultFilename: 'britechart.png',\n\t        chartBackground: 'white',\n\t        imageSourceBase: 'data:image/svg+xml;base64,',\n\t        get styleBackgroundString() {\n\t            return '<style>svg{background:' + this.chartBackground + ';}</style>';\n\t        }\n\t    };\n\t\n\t    /**\n\t     * Main function to be used as a method by chart instances to export charts to png\n\t     * @param  {array} svgs (or an svg element) pass in both chart & legend as array or just chart as svg or in array\n\t     * @param  {string} filename [download to be called <filename>.png]\n\t     */\n\t    function exportChart(d3svg, filename) {\n\t        var canvasWidth = this.width(),\n\t            canvasHeight = this.height();\n\t\n\t        var html = convertSvgToHtml(d3svg);\n\t\n\t        var canvas = createCanvas(canvasWidth, canvasHeight);\n\t\n\t        var img = createImage(html);\n\t\n\t        img.onload = handleImageLoad.bind(img, canvas, filename);\n\t    }\n\t\n\t    /**\n\t     * Handles on load event fired by img.onload, this=img\n\t     * @param  {object} canvas TYPE: el <canvas>\n\t     * @param  {string} filename\n\t     * @param  {object} e\n\t     */\n\t    function handleImageLoad(canvas, filename, e) {\n\t        e.preventDefault();\n\t        drawImageOnCanvas(this, canvas);\n\t        downloadCanvas(canvas, filename || config.defaultFilename);\n\t    }\n\t\n\t    /**\n\t     * takes d3 svg el, adds proper svg tags, adds inline styles\n\t     * from stylesheets, adds white background and returns string\n\t     * @param  {object} d3svg TYPE d3 svg element\n\t     * @return {string} string of passed d3\n\t     */\n\t    function convertSvgToHtml(d3svg) {\n\t        var serializer = serializeWithStyles.initializeSerializer();\n\t\n\t        if (!d3svg) {\n\t            return;\n\t        }\n\t\n\t        d3svg.attr({ version: 1.1, xmlns: 'http://www.w3.org/2000/svg' });\n\t\n\t        var serialized = serializer(d3svg.node());\n\t\n\t        return serialized.replace('>', '>' + config.styleBackgroundString);\n\t    }\n\t\n\t    /**\n\t     * Create Canvas\n\t     * @param  {number} width\n\t     * @param  {number} height\n\t     * @return {object} TYPE canvas element\n\t     */\n\t    function createCanvas(width, height) {\n\t        var canvas = document.createElement('canvas');\n\t\n\t        canvas.height = height;\n\t        canvas.width = width;\n\t        return canvas;\n\t    }\n\t\n\t    /**\n\t     * Create Image\n\t     * @param  {string} svgHtml string representation of svg el\n\t     * @return {object}  TYPE element <img>, src points at svg\n\t     */\n\t    function createImage(svgHtml) {\n\t        var img = new Image();\n\t\n\t        img.src = '' + config.imageSourceBase + encoder(svgHtml);\n\t        return img;\n\t    };\n\t\n\t    /**\n\t     * Draws image on canvas\n\t     * @param  {object} image TYPE:el <img>, to be drawn\n\t     * @param  {object} canvas TYPE: el <canvas>, to draw on\n\t     */\n\t    function drawImageOnCanvas(image, canvas) {\n\t        canvas.getContext('2d').drawImage(image, 0, 0);\n\t    }\n\t\n\t    /**\n\t     * Triggers browser to download image, convert canvas to url,\n\t     * we need to append the link el to the dom before clicking it for Firefox to register\n\t     * point <a> at it and trigger click\n\t     * @param  {object} canvas TYPE: el <canvas>\n\t     * @param  {string} filename\n\t     * @param  {string} extensionType\n\t     */\n\t    function downloadCanvas(canvas) {\n\t        var filename = arguments.length <= 1 || arguments[1] === undefined ? 'britechart.png' : arguments[1];\n\t        var extensionType = arguments.length <= 2 || arguments[2] === undefined ? 'image/png' : arguments[2];\n\t\n\t        var url = canvas.toDataURL(extensionType);\n\t        var link = document.createElement('a');\n\t\n\t        link.href = url;\n\t        link.download = filename;\n\t        document.body.appendChild(link);\n\t        link.click();\n\t        document.body.removeChild(link);\n\t    }\n\t\n\t    return exportChart;\n\t}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n/***/ },\n/* 3 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tmodule.exports = function () {\n\t\n\t    'use strict';\n\t\n\t    return {\n\t\n\t        /**\n\t         * returns serializer function, only run it when you know you want to serialize your chart\n\t         * @return {func} serializer to add styles in line to dom string\n\t         */\n\t        initializeSerializer: function initializeSerializer() {\n\t\n\t            // Mapping between tag names and css default values lookup tables. This allows to exclude default values in the result.\n\t            var defaultStylesByTagName = {};\n\t\n\t            // Styles inherited from style sheets will not be rendered for elements with these tag names\n\t            var noStyleTags = { 'BASE': true, 'HEAD': true, 'HTML': true, 'META': true, 'NOFRAME': true, 'NOSCRIPT': true, 'PARAM': true, 'SCRIPT': true, 'STYLE': true, 'TITLE': true };\n\t\n\t            // This list determines which css default values lookup tables are precomputed at load time\n\t            // Lookup tables for other tag names will be automatically built at runtime if needed\n\t            var tagNames = ['A', 'ABBR', 'ADDRESS', 'AREA', 'ARTICLE', 'ASIDE', 'AUDIO', 'B', 'BASE', 'BDI', 'BDO', 'BLOCKQUOTE', 'BODY', 'BR', 'BUTTON', 'CANVAS', 'CAPTION', 'CENTER', 'CITE', 'CODE', 'COL', 'COLGROUP', 'COMMAND', 'DATALIST', 'DD', 'DEL', 'DETAILS', 'DFN', 'DIV', 'DL', 'DT', 'EM', 'EMBED', 'FIELDSET', 'FIGCAPTION', 'FIGURE', 'FONT', 'FOOTER', 'FORM', 'H1', 'H2', 'H3', 'H4', 'H5', 'H6', 'HEAD', 'HEADER', 'HGROUP', 'HR', 'HTML', 'I', 'IFRAME', 'IMG', 'INPUT', 'INS', 'KBD', 'LABEL', 'LEGEND', 'LI', 'LINK', 'MAP', 'MARK', 'MATH', 'MENU', 'META', 'METER', 'NAV', 'NOBR', 'NOSCRIPT', 'OBJECT', 'OL', 'OPTION', 'OPTGROUP', 'OUTPUT', 'P', 'PARAM', 'PRE', 'PROGRESS', 'Q', 'RP', 'RT', 'RUBY', 'S', 'SAMP', 'SCRIPT', 'SECTION', 'SELECT', 'SMALL', 'SOURCE', 'SPAN', 'STRONG', 'STYLE', 'SUB', 'SUMMARY', 'SUP', 'SVG', 'TABLE', 'TBODY', 'TD', 'TEXTAREA', 'TFOOT', 'TH', 'THEAD', 'TIME', 'TITLE', 'TR', 'TRACK', 'U', 'UL', 'VAR', 'VIDEO', 'WBR'];\n\t\n\t            // Precompute the lookup tables.\n\t            [].forEach.call(tagNames, function (name) {\n\t                if (!noStyleTags[name]) {\n\t                    defaultStylesByTagName[name] = computeDefaultStyleByTagName(name);\n\t                }\n\t            });\n\t\n\t            function computeDefaultStyleByTagName(tagName) {\n\t                var defaultStyle = {},\n\t                    element = document.body.appendChild(document.createElement(tagName)),\n\t                    computedStyle = window.getComputedStyle(element);\n\t\n\t                [].forEach.call(computedStyle, function (style) {\n\t                    defaultStyle[style] = computedStyle[style];\n\t                });\n\t                document.body.removeChild(element);\n\t                return defaultStyle;\n\t            }\n\t\n\t            function getDefaultStyleByTagName(tagName) {\n\t                tagName = tagName.toUpperCase();\n\t                if (!defaultStylesByTagName[tagName]) {\n\t                    defaultStylesByTagName[tagName] = computeDefaultStyleByTagName(tagName);\n\t                }\n\t                return defaultStylesByTagName[tagName];\n\t            };\n\t\n\t            function serializeWithStyles(elem) {\n\t\n\t                var cssTexts = [],\n\t                    elements = void 0,\n\t                    computedStyle = void 0,\n\t                    defaultStyle = void 0,\n\t                    result = void 0;\n\t\n\t                if (!elem || elem.nodeType !== Node.ELEMENT_NODE) {\n\t                    console.error('Error: Object passed in to serializeWithSyles not of nodeType Node.ELEMENT_NODE');\n\t                    return;\n\t                }\n\t\n\t                cssTexts = [];\n\t                elements = elem.querySelectorAll('*');\n\t\n\t                [].forEach.call(elements, function (el, i) {\n\t                    if (!noStyleTags[el.tagName]) {\n\t                        computedStyle = window.getComputedStyle(el);\n\t                        defaultStyle = getDefaultStyleByTagName(el.tagName);\n\t                        cssTexts[i] = el.style.cssText;\n\t                        [].forEach.call(computedStyle, function (cssPropName) {\n\t                            if (computedStyle[cssPropName] !== defaultStyle[cssPropName]) {\n\t                                el.style[cssPropName] = computedStyle[cssPropName];\n\t                            }\n\t                        });\n\t                    }\n\t                });\n\t\n\t                result = elem.outerHTML;\n\t                elements = [].map.call(elements, function (el, i) {\n\t                    el.style.cssText = cssTexts[i];\n\t                    return el;\n\t                });\n\t\n\t                return result;\n\t            };\n\t\n\t            return serializeWithStyles;\n\t        }\n\t    };\n\t}();\n\n/***/ },\n/* 4 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(module, global) {/*! http://mths.be/base64 v0.1.0 by @mathias | MIT license */\n\t;(function(root) {\n\t\n\t\t// Detect free variables `exports`.\n\t\tvar freeExports = typeof exports == 'object' && exports;\n\t\n\t\t// Detect free variable `module`.\n\t\tvar freeModule = typeof module == 'object' && module &&\n\t\t\tmodule.exports == freeExports && module;\n\t\n\t\t// Detect free variable `global`, from Node.js or Browserified code, and use\n\t\t// it as `root`.\n\t\tvar freeGlobal = typeof global == 'object' && global;\n\t\tif (freeGlobal.global === freeGlobal || freeGlobal.window === freeGlobal) {\n\t\t\troot = freeGlobal;\n\t\t}\n\t\n\t\t/*--------------------------------------------------------------------------*/\n\t\n\t\tvar InvalidCharacterError = function(message) {\n\t\t\tthis.message = message;\n\t\t};\n\t\tInvalidCharacterError.prototype = new Error;\n\t\tInvalidCharacterError.prototype.name = 'InvalidCharacterError';\n\t\n\t\tvar error = function(message) {\n\t\t\t// Note: the error messages used throughout this file match those used by\n\t\t\t// the native `atob`/`btoa` implementation in Chromium.\n\t\t\tthrow new InvalidCharacterError(message);\n\t\t};\n\t\n\t\tvar TABLE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\n\t\t// http://whatwg.org/html/common-microsyntaxes.html#space-character\n\t\tvar REGEX_SPACE_CHARACTERS = /[\\t\\n\\f\\r ]/g;\n\t\n\t\t// `decode` is designed to be fully compatible with `atob` as described in the\n\t\t// HTML Standard. http://whatwg.org/html/webappapis.html#dom-windowbase64-atob\n\t\t// The optimized base64-decoding algorithm used is based on @atk’s excellent\n\t\t// implementation. https://gist.github.com/atk/1020396\n\t\tvar decode = function(input) {\n\t\t\tinput = String(input)\n\t\t\t\t.replace(REGEX_SPACE_CHARACTERS, '');\n\t\t\tvar length = input.length;\n\t\t\tif (length % 4 == 0) {\n\t\t\t\tinput = input.replace(/==?$/, '');\n\t\t\t\tlength = input.length;\n\t\t\t}\n\t\t\tif (\n\t\t\t\tlength % 4 == 1 ||\n\t\t\t\t// http://whatwg.org/C#alphanumeric-ascii-characters\n\t\t\t\t/[^+a-zA-Z0-9/]/.test(input)\n\t\t\t) {\n\t\t\t\terror(\n\t\t\t\t\t'Invalid character: the string to be decoded is not correctly encoded.'\n\t\t\t\t);\n\t\t\t}\n\t\t\tvar bitCounter = 0;\n\t\t\tvar bitStorage;\n\t\t\tvar buffer;\n\t\t\tvar output = '';\n\t\t\tvar position = -1;\n\t\t\twhile (++position < length) {\n\t\t\t\tbuffer = TABLE.indexOf(input.charAt(position));\n\t\t\t\tbitStorage = bitCounter % 4 ? bitStorage * 64 + buffer : buffer;\n\t\t\t\t// Unless this is the first of a group of 4 characters…\n\t\t\t\tif (bitCounter++ % 4) {\n\t\t\t\t\t// …convert the first 8 bits to a single ASCII character.\n\t\t\t\t\toutput += String.fromCharCode(\n\t\t\t\t\t\t0xFF & bitStorage >> (-2 * bitCounter & 6)\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn output;\n\t\t};\n\t\n\t\t// `encode` is designed to be fully compatible with `btoa` as described in the\n\t\t// HTML Standard: http://whatwg.org/html/webappapis.html#dom-windowbase64-btoa\n\t\tvar encode = function(input) {\n\t\t\tinput = String(input);\n\t\t\tif (/[^\\0-\\xFF]/.test(input)) {\n\t\t\t\t// Note: no need to special-case astral symbols here, as surrogates are\n\t\t\t\t// matched, and the input is supposed to only contain ASCII anyway.\n\t\t\t\terror(\n\t\t\t\t\t'The string to be encoded contains characters outside of the ' +\n\t\t\t\t\t'Latin1 range.'\n\t\t\t\t);\n\t\t\t}\n\t\t\tvar padding = input.length % 3;\n\t\t\tvar output = '';\n\t\t\tvar position = -1;\n\t\t\tvar a;\n\t\t\tvar b;\n\t\t\tvar c;\n\t\t\tvar d;\n\t\t\tvar buffer;\n\t\t\t// Make sure any padding is handled outside of the loop.\n\t\t\tvar length = input.length - padding;\n\t\n\t\t\twhile (++position < length) {\n\t\t\t\t// Read three bytes, i.e. 24 bits.\n\t\t\t\ta = input.charCodeAt(position) << 16;\n\t\t\t\tb = input.charCodeAt(++position) << 8;\n\t\t\t\tc = input.charCodeAt(++position);\n\t\t\t\tbuffer = a + b + c;\n\t\t\t\t// Turn the 24 bits into four chunks of 6 bits each, and append the\n\t\t\t\t// matching character for each of them to the output.\n\t\t\t\toutput += (\n\t\t\t\t\tTABLE.charAt(buffer >> 18 & 0x3F) +\n\t\t\t\t\tTABLE.charAt(buffer >> 12 & 0x3F) +\n\t\t\t\t\tTABLE.charAt(buffer >> 6 & 0x3F) +\n\t\t\t\t\tTABLE.charAt(buffer & 0x3F)\n\t\t\t\t);\n\t\t\t}\n\t\n\t\t\tif (padding == 2) {\n\t\t\t\ta = input.charCodeAt(position) << 8;\n\t\t\t\tb = input.charCodeAt(++position);\n\t\t\t\tbuffer = a + b;\n\t\t\t\toutput += (\n\t\t\t\t\tTABLE.charAt(buffer >> 10) +\n\t\t\t\t\tTABLE.charAt((buffer >> 4) & 0x3F) +\n\t\t\t\t\tTABLE.charAt((buffer << 2) & 0x3F) +\n\t\t\t\t\t'='\n\t\t\t\t);\n\t\t\t} else if (padding == 1) {\n\t\t\t\tbuffer = input.charCodeAt(position);\n\t\t\t\toutput += (\n\t\t\t\t\tTABLE.charAt(buffer >> 2) +\n\t\t\t\t\tTABLE.charAt((buffer << 4) & 0x3F) +\n\t\t\t\t\t'=='\n\t\t\t\t);\n\t\t\t}\n\t\n\t\t\treturn output;\n\t\t};\n\t\n\t\tvar base64 = {\n\t\t\t'encode': encode,\n\t\t\t'decode': decode,\n\t\t\t'version': '0.1.0'\n\t\t};\n\t\n\t\t// Some AMD build optimizers, like r.js, check for specific condition patterns\n\t\t// like the following:\n\t\tif (\n\t\t\ttrue\n\t\t) {\n\t\t\t!(__WEBPACK_AMD_DEFINE_RESULT__ = function() {\n\t\t\t\treturn base64;\n\t\t\t}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t\t}\telse if (freeExports && !freeExports.nodeType) {\n\t\t\tif (freeModule) { // in Node.js or RingoJS v0.8.0+\n\t\t\t\tfreeModule.exports = base64;\n\t\t\t} else { // in Narwhal or RingoJS v0.7.0-\n\t\t\t\tfor (var key in base64) {\n\t\t\t\t\tbase64.hasOwnProperty(key) && (freeExports[key] = base64[key]);\n\t\t\t\t}\n\t\t\t}\n\t\t} else { // in Rhino or a web browser\n\t\t\troot.base64 = base64;\n\t\t}\n\t\n\t}(this));\n\t\n\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(5)(module), (function() { return this; }())))\n\n/***/ },\n/* 5 */\n/***/ function(module, exports) {\n\n\tmodule.exports = function(module) {\r\n\t\tif(!module.webpackPolyfill) {\r\n\t\t\tmodule.deprecate = function() {};\r\n\t\t\tmodule.paths = [];\r\n\t\t\t// module.parent = undefined by default\r\n\t\t\tmodule.children = [];\r\n\t\t\tmodule.webpackPolyfill = 1;\r\n\t\t}\r\n\t\treturn module;\r\n\t}\r\n\n\n/***/ }\n/******/ ])\n});\n;\n\n\n/** WEBPACK FOOTER **\n ** line.min.js\n **/"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap 55e57523fbdb728288bc\n **/","define(function(require){\n    'use strict';\n\n    const d3 = require('d3');\n\n    const exportChart = require('./helpers/exportChart');\n\n    /**\n     * @typedef D3Selection\n     * @type {Array[]}\n     * @property {Number} length            Size of the selection\n     * @property {DOMElement} parentNode    Parent of the selection\n     */\n\n     /**\n      * @typedef lineChartPointByTopic\n      * @type {Object}\n      * @property {Object[]} Data       All data entries for a given topic (required)\n      * @property {Number} topic        Topic identifier (required)\n      * @property {String} topicName    Topic name (required)\n      *\n      * @example\n      * {\n      *     Data: [\n      *         {\n      *             date: '',\n      *             fullDate: '',\n      *             value: 1\n      *         },\n      *         {\n      *             date: '',\n      *             fullDate: '',\n      *             value: 2\n      *         }\n      *     ],\n      *     topic: 123,\n      *     topicName: 'San Francisco'\n      * }\n      */\n\n     /**\n      * @typedef lineChartPointByDate\n      * @type {Object}\n      * @property {Date} date               Date value (required)\n      * @property {Object[]} topics         Data entries for that day (required)\n      *\n      * @example\n      * {\n      *     date: '2015-06-27T07:00:00.000Z'\n      *     topics: [\n      *         {\n      *             name: 123,\n      *             topicName: 'San Francisco',\n      *             value: 1\n      *         },\n      *         {\n      *             name: 345,\n      *             topicName: 'Other',\n      *             value: 2\n      *         }\n      *     ]\n      * }\n      */\n\n\n     /**\n      * @typedef LineChartData\n      * @type {Object[]}\n      * @property {lineChartPointByTopic[]} data                   Data values to chart (required)\n      * @property {lineChartPointByDate[]} dataByDate    Data values to chart ordered by date (required)\n      *\n      * @example\n      * {\n      *     data: [\n      *         {\n      *             Data: [\n      *                 {\n      *                     date: '',\n      *                     fullDate: '',\n      *                     value: 1\n      *                 },\n      *                 {\n      *                     date: '',\n      *                     fullDate: '',\n      *                     value: 2\n      *                 }\n      *             ],\n      *             topic: 123,\n      *             topicName: 'San Francisco'\n      *         },\n      *         {\n      *             Data: [\n      *                 {...},\n      *                 {...}\n      *             ],\n      *             topic: 345,\n      *             topicName: 'Other'\n      *         }\n      *     ],\n      *     dataByDate: [\n      *         {\n      *             date: '2015-06-27T07:00:00.000Z'\n      *             topics: [\n      *                 {\n      *                     name: 123,\n      *                     topicName: 'San Francisco',\n      *                     value: 1\n      *                 },\n      *                 {\n      *                     name: 345,\n      *                     topicName: 'Other',\n      *                     value: 2\n      *                 }\n      *             ]\n      *         },\n      *         {...}\n      *     ]\n      * }\n      */\n\n\n    /**\n     * Line Chart reusable API module that allows us\n     * rendering a multi line and configurable chart.\n     *\n     * @module Line\n     * @version 0.0.1\n     * @tutorial line\n     * @requires d3\n     *\n     * @example\n     * var lineChart = line();\n     *\n     * lineChart\n     *     .aspectRatio(0.5)\n     *     .width(500);\n     *\n     * d3.select('.css-selector')\n     *     .datum(dataset)\n     *     .call(lineChart);\n     *\n     */\n    return function line(){\n\n        let margin = {\n                top: 60,\n                right: 20,\n                bottom: 60,\n                left: 80\n            },\n            width = 960,\n            height = 500,\n            aspectRatio = null,\n            tooltipThreshold = 480,\n            svg,\n            chartWidth, chartHeight,\n            xScale, yScale, colorScale,\n            xAxis, xMonthAxis, yAxis,\n            xAxisPadding = {\n                top: 0,\n                left: 15,\n                bottom: 0,\n                right: 0\n            },\n            colorRange = [\n                '#4DC2F5',\n                '#4DDB86',\n                '#E5C400',\n                '#FF4D7C',\n                '#9963D5',\n                '#051C48'\n            ],\n            colorOrder = {\n                '#4DC2F5': 0,\n                '#4DDB86': 1,\n                '#E5C400': 2,\n                '#FF4D7C': 3,\n                '#9963D5': 4,\n                '#051C48': 5\n            },\n            singleLineGradientColors = [\n                '#39C7EA',\n                '#4CDCBA'\n            ],\n            topicColorMap,\n            ease = 'ease',\n\n            data,\n            dataByDate,\n\n            numVerticalTics = 5,\n\n            overlay,\n            overlayColor = 'rgba(0, 0, 0, 0)',\n            verticalMarkerContainer,\n            verticalMarkerLine,\n            maskGridLines,\n            baseLine,\n\n            // extractors\n            getDate = ({date}) => date,\n            getValue = ({value}) => value,\n            getTopic = ({topic}) => topic,\n            getLineColor = ({topic}) => colorScale(topic),\n\n            // formats\n            yTickNumberFormat = d3.format('s'),\n            xTickDateFormat = d3.time.format('%e'),\n            xTickMonthFormat = d3.time.format('%b'),\n\n            // events\n            dispatch = d3.dispatch('customMouseOver', 'customMouseOut', 'customMouseMove');\n\n        /**\n         * This function creates the graph using the selection and data provided\n         *\n         * @param {D3Selection} _selection A d3 selection that represents\n         *                                  the container(s) where the chart(s) will be rendered\n         * @param {LineChartData} _data The data to attach and generate the chart\n         */\n        function exports(_selection){\n            _selection.each(function(_data) {\n                ({\n                    data,\n                    dataByDate\n                } = _data);\n\n                chartWidth = width - margin.left - margin.right;\n                chartHeight = height - margin.top - margin.bottom;\n\n                buildScales();\n                buildAxis();\n                buildSVG(this);\n                drawGridLines();\n                drawAxis();\n                buildGradient();\n                drawLines();\n\n                if (shouldShowTooltip()){\n                    drawVerticalMarker();\n                    drawHoverOverlay();\n                    addMouseEvents();\n                }\n            });\n        }\n\n        /**\n         * Adds events to the container group if the environment is not mobile\n         * Adding: mouseover, mouseout and mousemove\n         */\n        function addMouseEvents(){\n            svg\n                .on('mouseover', handleMouseOver)\n                .on('mouseout', handleMouseOut)\n                .on('mousemove', handleMouseMove);\n        }\n\n        /**\n         * Adjusts the position of the y axis' ticks\n         * @param  {D3Selection} selection Y axis group\n         * @return void\n         */\n        function adjustYTickLabels(selection){\n            selection.selectAll('.tick text')\n                .attr('transform', 'translate(0, -7)');\n        }\n\n        /**\n         * Creates the d3 x and y axis, setting orientations\n         * @private\n         */\n        function buildAxis(){\n            xAxis = d3.svg.axis()\n                .scale(xScale)\n                .orient('bottom')\n                .ticks(getMaxNumOfHorizontalTicks(width, dataByDate.length))\n                .tickSize(10, 0).tickPadding(5)\n                .tickFormat(xTickDateFormat);\n\n            xMonthAxis = d3.svg.axis()\n                .scale(xScale)\n                .ticks(d3.time.months)\n                .tickSize(0, 0)\n                .orient('bottom')\n                .tickFormat(xTickMonthFormat);\n\n            yAxis = d3.svg.axis()\n                .scale(yScale)\n                .orient('left')\n                .ticks(numVerticalTics)\n                .tickSize([0])\n                .tickPadding([4])\n                .tickFormat(yTickNumberFormat);\n        }\n\n        /**\n         * Builds containers for the chart, the axis and a wrapper for all of them\n         * NOTE: The order of drawing of this group elements is really important,\n         * as everything else will be drawn on top of them\n         * @private\n         */\n        function buildContainerGroups(){\n           let container = svg.append('g')\n                .classed('container-group', true)\n                .attr('transform', `translate(${margin.left},${margin.top})`);\n\n            container\n              .append('g').classed('x-axis-group', true)\n              .append('g').classed('axis x', true);\n            container.selectAll('.x-axis-group')\n              .append('g').classed('month-axis', true);\n            container\n              .append('g').classed('y-axis-group axis y', true);\n            container\n              .append('g').classed('grid-lines-group', true);\n            container\n              .append('g').classed('chart-group', true);\n            container\n              .append('g').classed('metadata-group', true);\n        }\n\n        /**\n         * Builds the gradient element to be used later\n         * @return {void}\n         */\n        function buildGradient() {\n            svg.select('.metadata-group')\n              .append('linearGradient')\n                .attr('id', 'line-area-gradient')\n                .attr('x1', '0%')\n                .attr('y1', '0%')\n                .attr('x2', '100%')\n                .attr('y2', '0%')\n                .selectAll('stop')\n                .data([\n                    {offset:'0%', color: singleLineGradientColors[0]},\n                    {offset:'100%', color: singleLineGradientColors[1]}\n                ])\n                .enter()\n              .append('stop')\n                .attr('offset', ({offset}) => offset)\n                .attr('stop-color', ({color}) => color)\n        }\n\n        /**\n         * Creates the x and y scales of the graph\n         * @private\n         */\n        function buildScales(){\n            let minX = d3.min(data, ({Data}) => d3.min(Data, getDate)),\n                maxX = d3.max(data, ({Data}) => d3.max(Data, getDate)),\n                minY = d3.min(data, ({Data}) => d3.min(Data, getValue)),\n                maxY = d3.max(data, ({Data}) => d3.max(Data, getValue));\n\n            xScale = d3.time.scale()\n                .rangeRound([0, chartWidth])\n                .domain([minX, maxX]);\n\n            yScale = d3.scale.linear()\n                .rangeRound([chartHeight, 0])\n                .domain([Math.abs(minY), Math.abs(maxY)])\n                .nice(3);\n\n            colorScale = d3.scale.ordinal()\n                .range(colorRange)\n                .domain(data.map(getTopic));\n\n\n            // TODO add spread and rest operators to britecharts\n            /*\n                let range = colorScale.range();\n                topicColorMap = colorScale.domain().reduce((memo, item, i) => ({...memo, [item]: range[i], }), {});\n             */\n\n            let range = colorScale.range();\n            topicColorMap = colorScale.domain().reduce((memo, item, i) => {\n                memo[item] = range[i];\n                return memo;\n            }, {});\n        }\n\n        /**\n         * Builds the SVG element that will contain the chart\n         *\n         * @param  {HTMLElement} container DOM element that will work as the container of the graph\n         * @private\n         */\n        function buildSVG(container){\n            if (!svg) {\n                svg = d3.select(container)\n                  .append('svg')\n                    .classed('britechart line-chart', true);\n\n                buildContainerGroups();\n            }\n\n            svg\n                .transition()\n                .ease(ease)\n                .attr({\n                    width,\n                    height\n                });\n        }\n\n        /**\n         * Removes all the datapoints highlighter circles added to the marker container\n         * @return void\n         */\n        function cleanDataPointHighlights(){\n            verticalMarkerContainer.selectAll('.circle-container').remove();\n        }\n\n        /**\n         * Draws the x and y axis on the svg object within their\n         * respective groups\n         * @private\n         */\n        function drawAxis(){\n            svg.select('.x-axis-group .axis.x')\n                .transition()\n                .ease(ease)\n                .attr('transform', `translate(0, ${chartHeight})`)\n                .call(xAxis);\n\n            svg.select('.x-axis-group .month-axis')\n                .transition()\n                .ease(ease)\n                .attr('transform', `translate(0, ${(chartHeight + 28)})`)\n                .call(xMonthAxis);\n\n            svg.select('.y-axis-group.axis.y')\n                .transition()\n                .ease(ease)\n                .attr('transform', `translate(${-xAxisPadding.left}, 0)`)\n                .call(yAxis)\n                .call(adjustYTickLabels);\n        }\n\n        /**\n         * Draws the line elements within the chart group\n         * @private\n         */\n        function drawLines(){\n            let lines,\n                topicLine,\n                maskingRectangle;\n\n            topicLine = d3.svg.line()\n                .x(({date}) => xScale(date))\n                .y(({value}) => yScale(value));\n\n            lines = svg.select('.chart-group').selectAll('.line')\n                .data(data);\n\n            lines\n                .enter()\n              .append('g')\n                .attr('class', 'topic')\n              .append('path')\n                .attr('class', 'line')\n                .attr('d', ({Data}) => topicLine(Data))\n                .style('stroke', (d) => (\n                    data.length === 1 ? 'url(#line-area-gradient)' : getLineColor(d)\n                ));\n\n            lines\n                .exit()\n                .remove();\n\n            // We use a white rectangle to simulate the line drawing animation\n            maskingRectangle = svg.append('rect')\n                .attr('class', 'masking-rectangle')\n                .attr('width', width - 30)\n                .attr('height', height + 20)\n                .attr('x', 60)\n                .attr('y', -18);\n\n            maskingRectangle.transition()\n                .duration(2000)\n                .ease('cubic-out')\n                .attr('x', width)\n                .each('end', () => maskingRectangle.remove());\n        }\n\n        /**\n         * Draws grid lines on the background of the chart\n         * @return void\n         */\n        function drawGridLines(){\n            maskGridLines = svg.select('.grid-lines-group')\n                .selectAll('line.horizontal-grid-line')\n                .data(yScale.ticks(5))\n                .enter()\n                    .append('line')\n                    .attr({\n                        class: 'horizontal-grid-line',\n                        x1: (-xAxisPadding.left - 30),\n                        x2: chartWidth,\n                        y1: (d) => yScale(d),\n                        y2: (d) => yScale(d)\n                    });\n\n            //draw a horizontal line to extend x-axis till the edges\n            baseLine = svg.select('.grid-lines-group')\n                .selectAll('line.extended-x-line')\n                .data([0])\n                .enter()\n              .append('line')\n                .attr({\n                    class: 'extended-x-line',\n                    x1: (-xAxisPadding.left - 30),\n                    x2: chartWidth,\n                    y1: height - margin.bottom - margin.top,\n                    y2: height - margin.bottom - margin.top\n                });\n        }\n\n        /**\n         * Draws an overlay element over the graph\n         * @inner\n         * @return void\n         */\n        function drawHoverOverlay(){\n            overlay = svg.select('.metadata-group')\n              .append('rect')\n                .attr('class','overlay')\n                .attr('y1', 0)\n                .attr('y2', height)\n                .attr('height', height - margin.top - margin.bottom)\n                .attr('width', width - margin.left - margin.right)\n                .attr('fill', overlayColor)\n                .style('display', 'none');\n        }\n\n        /**\n         * Creates the vertical marker\n         * @return void\n         */\n        function drawVerticalMarker(){\n            verticalMarkerContainer = svg.select('.metadata-group')\n              .append('g')\n                .attr('class', 'hover-marker vertical-marker-container')\n                .attr('transform', 'translate(9999, 0)');\n\n            verticalMarkerLine = verticalMarkerContainer.selectAll('path')\n                .data([{\n                    x1: 0,\n                    y1: 0,\n                    x2: 0,\n                    y2: 0\n                }])\n                .enter()\n              .append('line')\n                .classed('vertical-marker', true)\n                .attr({\n                    x1: 0,\n                    y1: height - margin.top - margin.bottom,\n                    x2: 0,\n                    y2: 0\n                });\n        }\n\n        /**\n         * Finds out which datapoint is closer to the given x position\n         * @param  {Number} x0 Date value for data point\n         * @param  {Object} d0 Previous datapoint\n         * @param  {Object} d1 Next datapoint\n         * @return {Object}    d0 or d1, the datapoint with closest date to x0\n         */\n        function findOutNearestDate(x0, d0, d1){\n            return (new Date(x0).getTime() - new Date(d0.date).getTime()) > (new Date(d1.date).getTime() - new Date(x0).getTime()) ? d0 : d1;\n        }\n\n        /**\n         * Calculates the maximum number of ticks for the x axis\n         * @param  {Number} width Chart width\n         * @param  {Number} dataPointNumber  Number of entries on the data\n         * @return {Number}       Number of ticks to render\n         */\n        function getMaxNumOfHorizontalTicks(width, dataPointNumber) {\n            let singleTickWidth = 20,\n                spacing = 40,\n                ticksForWidth = Math.ceil(width / (singleTickWidth + spacing));\n\n            return Math.min(dataPointNumber, ticksForWidth);\n        }\n\n        /**\n         * Extract X position on the graph from a given mouse event\n         * @param  {Object} event D3 mouse event\n         * @return {Number}       Position on the x axis of the mouse\n         */\n        function getMouseXPosition(event) {\n            return d3.mouse(event)[0];\n        }\n\n        /**\n         * Formats the date in ISOString\n         * @param  {String} date Date as given in data entries\n         * @return {String}      Date in ISO format in a neutral timezone\n         */\n        function getFormattedDateFromData(date) {\n            return date.toISOString().split('T')[0] + 'T00:00:00Z';\n        }\n\n        /**\n         * Finds out the data entry that is closer to the given position on pixels\n         * @param  {Number} mouseX X position of the mouse\n         * @return {Object}        Data entry that is closer to that x axis position\n         */\n        function getNearestDataPoint(mouseX) {\n            let invertedX = xScale.invert(mouseX),\n                bisectDate = d3.bisector(getDate).left,\n                dataEntryIndex, dateOnCursorXPosition, dataEntryForXPosition, previousDataEntryForXPosition,\n                nearestDataPoint;\n\n            dateOnCursorXPosition = getFormattedDateFromData(invertedX);\n            dataEntryIndex = bisectDate(dataByDate, dateOnCursorXPosition, 1);\n            dataEntryForXPosition = dataByDate[dataEntryIndex];\n            previousDataEntryForXPosition = dataByDate[dataEntryIndex - 1];\n\n            if (previousDataEntryForXPosition && dataEntryForXPosition) {\n                nearestDataPoint = findOutNearestDate(dateOnCursorXPosition, dataEntryForXPosition, previousDataEntryForXPosition);\n            } else {\n                nearestDataPoint = dataEntryForXPosition;\n            }\n\n            return nearestDataPoint;\n        }\n\n        /**\n         * MouseMove handler, calculates the nearest dataPoint to the cursor\n         * and updates metadata related to it\n         * @private\n         */\n        function handleMouseMove(){\n            let xPositionOffset = -margin.left, //Arbitrary number, will love to know how to assess it\n                dataPoint = getNearestDataPoint(getMouseXPosition(this) + xPositionOffset),\n                dataPointXPosition;\n\n            if (dataPoint) {\n                dataPointXPosition = xScale(new Date(dataPoint.date));\n                // More verticalMarker to that datapoint\n                moveVerticalMarker(dataPointXPosition);\n                // Add data points highlighting\n                highlightDataPoints(dataPoint);\n                // Emit event with xPosition for tooltip or similar feature\n                dispatch.customMouseMove(dataPoint, topicColorMap, dataPointXPosition);\n            }\n        }\n\n        /**\n         * MouseOut handler, hides overlay and removes active class on verticalMarkerLine\n         * It also resets the container of the vertical marker\n         * @private\n         */\n        function handleMouseOut(data){\n            overlay.style('display', 'none');\n            verticalMarkerLine.classed('bc-is-active', false);\n            verticalMarkerContainer.attr('transform', 'translate(9999, 0)');\n\n            dispatch.customMouseOut(data);\n        }\n\n        /**\n         * Mouseover handler, shows overlay and adds active class to verticalMarkerLine\n         * @private\n         */\n        function handleMouseOver(data){\n            overlay.style('display', 'block');\n            verticalMarkerLine.classed('bc-is-active', true);\n\n            dispatch.customMouseOver(data);\n        }\n\n        /**\n         * Creates coloured circles marking where the exact data y value is for a given data point\n         * @param  {Object} dataPoint Data point to extract info from\n         * @private\n         */\n        function highlightDataPoints(dataPoint) {\n            cleanDataPointHighlights();\n\n            // sorting the topics based on the order of the colors,\n            // so that the order always stays constant\n            dataPoint.topics = dataPoint.topics\n                                    .filter(t => !!t)\n                                    .sort((a, b) => topicColorMap[a.name] > topicColorMap[b.name]);\n\n            dataPoint.topics.forEach(({name}, index) => {\n                let marker = verticalMarkerContainer\n                                .append('g')\n                                .classed('circle-container', true),\n                    circleSize = 12;\n\n                marker.append('circle')\n                    .classed('data-point-highlighter', true)\n                    .attr({\n                        cx: circleSize,\n                        cy: 0,\n                        r: 5\n                    })\n                    .style({\n                        stroke: topicColorMap[name]\n                    });\n\n                marker.attr('transform', `translate( ${(- circleSize)}, ${(yScale(dataPoint.topics[index].value))} )` );\n            });\n        }\n\n        /**\n         * Helper method to update the x position of the vertical marker\n         * @param  {Object} dataPoint Data entry to extract info\n         * @return void\n         */\n        function moveVerticalMarker(verticalMarkerXPosition){\n            verticalMarkerContainer.attr('transform', `translate(${verticalMarkerXPosition},0)`);\n        }\n\n        /**\n         * Determines if we should add the tooltip related logic depending on the\n         * size of the chart and the tooltipThreshold variable value\n         * @return {Boolean} Should we build the tooltip?\n         */\n        function shouldShowTooltip() {\n            return width > tooltipThreshold;\n        }\n\n        // API Methods\n\n        /**\n         * Gets or Sets the aspect ratio of the chart\n         * @param  {Number} _x Desired aspect ratio for the graph\n         * @return { (Number | Module) } Current aspect ratio or Line Chart module to chain calls\n         * @public\n         */\n        exports.aspectRatio = function(_x) {\n            if (!arguments.length) {\n                return aspectRatio;\n            }\n            aspectRatio = _x;\n            return this;\n        };\n\n        /**\n         * Gets or Sets the ease of the chart\n         * @param  {Number} _x Desired width for the graph\n         * @return { (Number | Module) } Current ease animation or Line Chart module to chain calls\n         * @public\n         */\n        exports.ease = function(_x) {\n            if (!arguments.length) {\n                return ease;\n            }\n            ease = _x;\n            return this;\n        };\n\n        /**\n         * Gets or Sets the height of the chart\n         * @param  {Number} _x Desired width for the graph\n         * @return { (Number | Module) } Current height or Line Chart module to chain calls\n         * @public\n         */\n        exports.height = function(_x) {\n            if (!arguments.length) {\n                return height;\n            }\n            if (aspectRatio) {\n                width = Math.ceil(_x / aspectRatio);\n            }\n            height = _x;\n            return this;\n        };\n\n        /**\n         * Gets or Sets the margin of the chart\n         * @param  {Object} _x Margin object to get/set\n         * @return { (Number | Module) } Current margin or Line Chart module to chain calls\n         * @public\n         */\n        exports.margin = function(_x) {\n            if (!arguments.length) {\n                return margin;\n            }\n            margin = _x;\n            return this;\n        };\n\n        /**\n         * Gets or Sets the minimum width of the graph in order to show the tooltip\n         * NOTE: This could also depend on the aspect ratio\n         * @param  {Number} _x Desired tooltip threshold for the graph\n         * @return { (Number | Module) } Current tooltip threshold or Line Chart module to chain calls\n         * @public\n         */\n        exports.tooltipThreshold = function(_x) {\n            if (!arguments.length) {\n                return tooltipThreshold;\n            }\n            tooltipThreshold = _x;\n            return this;\n        };\n\n        /**\n         * Gets or Sets the width of the chart\n         * @param  {Number} _x Desired width for the graph\n         * @return { (Number | Module) } Current width or Line Chart module to chain calls\n         * @public\n         */\n        exports.width = function(_x) {\n            if (!arguments.length) {\n                return width;\n            }\n            if (aspectRatio) {\n                height = Math.ceil(_x * aspectRatio);\n            }\n            width = _x;\n            return this;\n        };\n\n        /**\n         * Chart exported to png and a download action is fired\n         * @public\n         */\n        exports.exportChart = function(filename) {\n            exportChart.call(exports, svg, filename);\n        };\n\n        // Rebind 'customHover' event to the \"exports\" function, so it's available \"externally\" under the typical \"on\" method:\n        d3.rebind(exports, dispatch, 'on');\n\n        return exports;\n    };\n\n});\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/charts/line.js\n **/","module.exports = __WEBPACK_EXTERNAL_MODULE_1__;\n\n\n/*****************\n ** WEBPACK FOOTER\n ** external \"d3\"\n ** module id = 1\n ** module chunks = 0 1 2 3 4 5 6 7 8\n **/","define(function(require) {\n\n    'use strict';\n\n    const serializeWithStyles = require('./serializeWithStyles.js');\n\n    let encoder = window.btoa;\n\n    if (!encoder) {\n        encoder = require('base-64').encode;\n    }\n\n    const config = {\n        styleClass : 'britechartStyle',\n        defaultFilename: 'britechart.png',\n        chartBackground: 'white',\n        imageSourceBase: 'data:image/svg+xml;base64,',\n        get styleBackgroundString () {\n            return `<style>svg{background:${this.chartBackground};}</style>`;\n        }\n    };\n\n    /**\n     * Main function to be used as a method by chart instances to export charts to png\n     * @param  {array} svgs (or an svg element) pass in both chart & legend as array or just chart as svg or in array\n     * @param  {string} filename [download to be called <filename>.png]\n     */\n    function exportChart(d3svg, filename) {\n        let canvasWidth = this.width(),\n            canvasHeight = this.height();\n\n        let html = convertSvgToHtml(d3svg);\n\n        let canvas = createCanvas(canvasWidth, canvasHeight);\n\n        let img = createImage(html);\n\n        img.onload = handleImageLoad.bind(img, canvas, filename);\n    }\n\n    /**\n     * Handles on load event fired by img.onload, this=img\n     * @param  {object} canvas TYPE: el <canvas>\n     * @param  {string} filename\n     * @param  {object} e\n     */\n    function handleImageLoad(canvas, filename, e) {\n        e.preventDefault();\n        drawImageOnCanvas(this, canvas);\n        downloadCanvas(canvas, filename || config.defaultFilename);\n    }\n\n    /**\n     * takes d3 svg el, adds proper svg tags, adds inline styles\n     * from stylesheets, adds white background and returns string\n     * @param  {object} d3svg TYPE d3 svg element\n     * @return {string} string of passed d3\n     */\n    function convertSvgToHtml (d3svg) {\n        let serializer = serializeWithStyles.initializeSerializer();\n\n        if (!d3svg){ return; }\n\n        d3svg.attr({ version: 1.1, xmlns: 'http://www.w3.org/2000/svg'});\n\n        let serialized = serializer(d3svg.node());\n\n        return serialized.replace('>',`>${config.styleBackgroundString}`);\n    }\n\n    /**\n     * Create Canvas\n     * @param  {number} width\n     * @param  {number} height\n     * @return {object} TYPE canvas element\n     */\n    function createCanvas(width, height) {\n        let canvas = document.createElement('canvas');\n\n        canvas.height = height;\n        canvas.width = width;\n        return canvas;\n    }\n\n    /**\n     * Create Image\n     * @param  {string} svgHtml string representation of svg el\n     * @return {object}  TYPE element <img>, src points at svg\n     */\n    function createImage(svgHtml) {\n        let img = new Image();\n\n        img.src = `${config.imageSourceBase}${encoder(svgHtml)}`;\n        return img;\n    };\n\n    /**\n     * Draws image on canvas\n     * @param  {object} image TYPE:el <img>, to be drawn\n     * @param  {object} canvas TYPE: el <canvas>, to draw on\n     */\n    function drawImageOnCanvas(image, canvas) {\n        canvas.getContext('2d').drawImage(image, 0, 0);\n    }\n\n    /**\n     * Triggers browser to download image, convert canvas to url,\n     * we need to append the link el to the dom before clicking it for Firefox to register\n     * point <a> at it and trigger click\n     * @param  {object} canvas TYPE: el <canvas>\n     * @param  {string} filename\n     * @param  {string} extensionType\n     */\n    function downloadCanvas(canvas, filename='britechart.png', extensionType='image/png') {\n        let url = canvas.toDataURL(extensionType);\n        let link = document.createElement('a');\n\n        link.href = url;\n        link.download = filename;\n        document.body.appendChild(link);\n        link.click();\n        document.body.removeChild(link);\n    }\n\n    return exportChart;\n});\n\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/charts/helpers/exportChart.js\n **/","module.exports = (function() {\n\n    'use strict';\n\n    return {\n\n        /**\n         * returns serializer function, only run it when you know you want to serialize your chart\n         * @return {func} serializer to add styles in line to dom string\n         */\n        initializeSerializer() {\n\n            // Mapping between tag names and css default values lookup tables. This allows to exclude default values in the result.\n            const defaultStylesByTagName = {};\n\n            // Styles inherited from style sheets will not be rendered for elements with these tag names\n            const noStyleTags = {'BASE':true,'HEAD':true,'HTML':true,'META':true,'NOFRAME':true,'NOSCRIPT':true,'PARAM':true,'SCRIPT':true,'STYLE':true,'TITLE':true};\n\n            // This list determines which css default values lookup tables are precomputed at load time\n            // Lookup tables for other tag names will be automatically built at runtime if needed\n            const tagNames = ['A','ABBR','ADDRESS','AREA','ARTICLE','ASIDE','AUDIO','B','BASE','BDI','BDO','BLOCKQUOTE','BODY','BR','BUTTON','CANVAS','CAPTION','CENTER','CITE','CODE','COL','COLGROUP','COMMAND','DATALIST','DD','DEL','DETAILS','DFN','DIV','DL','DT','EM','EMBED','FIELDSET','FIGCAPTION','FIGURE','FONT','FOOTER','FORM','H1','H2','H3','H4','H5','H6','HEAD','HEADER','HGROUP','HR','HTML','I','IFRAME','IMG','INPUT','INS','KBD','LABEL','LEGEND','LI','LINK','MAP','MARK','MATH','MENU','META','METER','NAV','NOBR','NOSCRIPT','OBJECT','OL','OPTION','OPTGROUP','OUTPUT','P','PARAM','PRE','PROGRESS','Q','RP','RT','RUBY','S','SAMP','SCRIPT','SECTION','SELECT','SMALL','SOURCE','SPAN','STRONG','STYLE','SUB','SUMMARY','SUP','SVG','TABLE','TBODY','TD','TEXTAREA','TFOOT','TH','THEAD','TIME','TITLE','TR','TRACK','U','UL','VAR','VIDEO','WBR'];\n\n            // Precompute the lookup tables.\n            [].forEach.call(tagNames, (name) => {\n                if (!noStyleTags[name]) {\n                    defaultStylesByTagName[name] = computeDefaultStyleByTagName(name);\n                }\n            });\n\n            function computeDefaultStyleByTagName(tagName) {\n                let defaultStyle = {},\n                    element = document.body.appendChild(document.createElement(tagName)),\n                    computedStyle = window.getComputedStyle(element);\n\n                [].forEach.call(computedStyle, (style) => {\n                    defaultStyle[style] = computedStyle[style];\n                });\n                document.body.removeChild(element);\n                return defaultStyle;\n            }\n\n            function getDefaultStyleByTagName (tagName) {\n                tagName = tagName.toUpperCase();\n                if (!defaultStylesByTagName[tagName]) {\n                    defaultStylesByTagName[tagName] = computeDefaultStyleByTagName(tagName);\n                }\n                return defaultStylesByTagName[tagName];\n            };\n\n            function serializeWithStyles(elem) {\n\n                let cssTexts = [],\n                    elements,\n                    computedStyle,\n                    defaultStyle,\n                    result;\n\n                if (!elem || elem.nodeType !== Node.ELEMENT_NODE) {\n                    console.error('Error: Object passed in to serializeWithSyles not of nodeType Node.ELEMENT_NODE');\n                    return;\n                }\n\n                cssTexts = [];\n                elements = elem.querySelectorAll('*');\n\n                [].forEach.call(elements, (el, i) => {\n                    if (!noStyleTags[el.tagName]) {\n                        computedStyle = window.getComputedStyle(el);\n                        defaultStyle = getDefaultStyleByTagName(el.tagName);\n                        cssTexts[i] = el.style.cssText;\n                        [].forEach.call(computedStyle, (cssPropName) => {\n                            if (computedStyle[cssPropName] !== defaultStyle[cssPropName]) {\n                                el.style[cssPropName] = computedStyle[cssPropName];\n                            }\n                        });\n                    }\n                });\n\n                result = elem.outerHTML;\n                elements = [].map.call(elements, (el, i) => {\n                    el.style.cssText = cssTexts[i];\n                    return el;\n                });\n\n                return result;\n\n            };\n\n            return serializeWithStyles;\n        }\n    }\n})();\n\n\n/** WEBPACK FOOTER **\n ** ./src/charts/helpers/serializeWithStyles.js\n **/","/*! http://mths.be/base64 v0.1.0 by @mathias | MIT license */\n;(function(root) {\n\n\t// Detect free variables `exports`.\n\tvar freeExports = typeof exports == 'object' && exports;\n\n\t// Detect free variable `module`.\n\tvar freeModule = typeof module == 'object' && module &&\n\t\tmodule.exports == freeExports && module;\n\n\t// Detect free variable `global`, from Node.js or Browserified code, and use\n\t// it as `root`.\n\tvar freeGlobal = typeof global == 'object' && global;\n\tif (freeGlobal.global === freeGlobal || freeGlobal.window === freeGlobal) {\n\t\troot = freeGlobal;\n\t}\n\n\t/*--------------------------------------------------------------------------*/\n\n\tvar InvalidCharacterError = function(message) {\n\t\tthis.message = message;\n\t};\n\tInvalidCharacterError.prototype = new Error;\n\tInvalidCharacterError.prototype.name = 'InvalidCharacterError';\n\n\tvar error = function(message) {\n\t\t// Note: the error messages used throughout this file match those used by\n\t\t// the native `atob`/`btoa` implementation in Chromium.\n\t\tthrow new InvalidCharacterError(message);\n\t};\n\n\tvar TABLE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\n\t// http://whatwg.org/html/common-microsyntaxes.html#space-character\n\tvar REGEX_SPACE_CHARACTERS = /[\\t\\n\\f\\r ]/g;\n\n\t// `decode` is designed to be fully compatible with `atob` as described in the\n\t// HTML Standard. http://whatwg.org/html/webappapis.html#dom-windowbase64-atob\n\t// The optimized base64-decoding algorithm used is based on @atk’s excellent\n\t// implementation. https://gist.github.com/atk/1020396\n\tvar decode = function(input) {\n\t\tinput = String(input)\n\t\t\t.replace(REGEX_SPACE_CHARACTERS, '');\n\t\tvar length = input.length;\n\t\tif (length % 4 == 0) {\n\t\t\tinput = input.replace(/==?$/, '');\n\t\t\tlength = input.length;\n\t\t}\n\t\tif (\n\t\t\tlength % 4 == 1 ||\n\t\t\t// http://whatwg.org/C#alphanumeric-ascii-characters\n\t\t\t/[^+a-zA-Z0-9/]/.test(input)\n\t\t) {\n\t\t\terror(\n\t\t\t\t'Invalid character: the string to be decoded is not correctly encoded.'\n\t\t\t);\n\t\t}\n\t\tvar bitCounter = 0;\n\t\tvar bitStorage;\n\t\tvar buffer;\n\t\tvar output = '';\n\t\tvar position = -1;\n\t\twhile (++position < length) {\n\t\t\tbuffer = TABLE.indexOf(input.charAt(position));\n\t\t\tbitStorage = bitCounter % 4 ? bitStorage * 64 + buffer : buffer;\n\t\t\t// Unless this is the first of a group of 4 characters…\n\t\t\tif (bitCounter++ % 4) {\n\t\t\t\t// …convert the first 8 bits to a single ASCII character.\n\t\t\t\toutput += String.fromCharCode(\n\t\t\t\t\t0xFF & bitStorage >> (-2 * bitCounter & 6)\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t\treturn output;\n\t};\n\n\t// `encode` is designed to be fully compatible with `btoa` as described in the\n\t// HTML Standard: http://whatwg.org/html/webappapis.html#dom-windowbase64-btoa\n\tvar encode = function(input) {\n\t\tinput = String(input);\n\t\tif (/[^\\0-\\xFF]/.test(input)) {\n\t\t\t// Note: no need to special-case astral symbols here, as surrogates are\n\t\t\t// matched, and the input is supposed to only contain ASCII anyway.\n\t\t\terror(\n\t\t\t\t'The string to be encoded contains characters outside of the ' +\n\t\t\t\t'Latin1 range.'\n\t\t\t);\n\t\t}\n\t\tvar padding = input.length % 3;\n\t\tvar output = '';\n\t\tvar position = -1;\n\t\tvar a;\n\t\tvar b;\n\t\tvar c;\n\t\tvar d;\n\t\tvar buffer;\n\t\t// Make sure any padding is handled outside of the loop.\n\t\tvar length = input.length - padding;\n\n\t\twhile (++position < length) {\n\t\t\t// Read three bytes, i.e. 24 bits.\n\t\t\ta = input.charCodeAt(position) << 16;\n\t\t\tb = input.charCodeAt(++position) << 8;\n\t\t\tc = input.charCodeAt(++position);\n\t\t\tbuffer = a + b + c;\n\t\t\t// Turn the 24 bits into four chunks of 6 bits each, and append the\n\t\t\t// matching character for each of them to the output.\n\t\t\toutput += (\n\t\t\t\tTABLE.charAt(buffer >> 18 & 0x3F) +\n\t\t\t\tTABLE.charAt(buffer >> 12 & 0x3F) +\n\t\t\t\tTABLE.charAt(buffer >> 6 & 0x3F) +\n\t\t\t\tTABLE.charAt(buffer & 0x3F)\n\t\t\t);\n\t\t}\n\n\t\tif (padding == 2) {\n\t\t\ta = input.charCodeAt(position) << 8;\n\t\t\tb = input.charCodeAt(++position);\n\t\t\tbuffer = a + b;\n\t\t\toutput += (\n\t\t\t\tTABLE.charAt(buffer >> 10) +\n\t\t\t\tTABLE.charAt((buffer >> 4) & 0x3F) +\n\t\t\t\tTABLE.charAt((buffer << 2) & 0x3F) +\n\t\t\t\t'='\n\t\t\t);\n\t\t} else if (padding == 1) {\n\t\t\tbuffer = input.charCodeAt(position);\n\t\t\toutput += (\n\t\t\t\tTABLE.charAt(buffer >> 2) +\n\t\t\t\tTABLE.charAt((buffer << 4) & 0x3F) +\n\t\t\t\t'=='\n\t\t\t);\n\t\t}\n\n\t\treturn output;\n\t};\n\n\tvar base64 = {\n\t\t'encode': encode,\n\t\t'decode': decode,\n\t\t'version': '0.1.0'\n\t};\n\n\t// Some AMD build optimizers, like r.js, check for specific condition patterns\n\t// like the following:\n\tif (\n\t\ttypeof define == 'function' &&\n\t\ttypeof define.amd == 'object' &&\n\t\tdefine.amd\n\t) {\n\t\tdefine(function() {\n\t\t\treturn base64;\n\t\t});\n\t}\telse if (freeExports && !freeExports.nodeType) {\n\t\tif (freeModule) { // in Node.js or RingoJS v0.8.0+\n\t\t\tfreeModule.exports = base64;\n\t\t} else { // in Narwhal or RingoJS v0.7.0-\n\t\t\tfor (var key in base64) {\n\t\t\t\tbase64.hasOwnProperty(key) && (freeExports[key] = base64[key]);\n\t\t\t}\n\t\t}\n\t} else { // in Rhino or a web browser\n\t\troot.base64 = base64;\n\t}\n\n}(this));\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/base-64/base64.js\n ** module id = 4\n ** module chunks = 0 2 4 5 6 7\n **/","module.exports = function(module) {\r\n\tif(!module.webpackPolyfill) {\r\n\t\tmodule.deprecate = function() {};\r\n\t\tmodule.paths = [];\r\n\t\t// module.parent = undefined by default\r\n\t\tmodule.children = [];\r\n\t\tmodule.webpackPolyfill = 1;\r\n\t}\r\n\treturn module;\r\n}\r\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** (webpack)/buildin/module.js\n ** module id = 5\n ** module chunks = 0 2 4 5 6 7\n **/"],"sourceRoot":""}