{"version":3,"sources":["webpack:///webpack/universalModuleDefinition?5ca6","webpack:///donut.min.js","webpack:///webpack/bootstrap df964404de07f1dd3049?d1c4","webpack:///./src/charts/donut.js","webpack:///external \"d3\"?c0c4"],"names":["root","factory","exports","module","require","define","amd","a","i","this","__WEBPACK_EXTERNAL_MODULE_1__","modules","__webpack_require__","moduleId","installedModules","id","loaded","call","m","c","p","__WEBPACK_AMD_DEFINE_RESULT__","d3","_selection","each","_data","chartWidth","width","margin","left","right","chartHeight","height","top","bottom","data","buildLayout","buildColorScale","buildShape","buildSVG","drawSlices","initTooltip","colorScheme","colorScale","scale","ordinal","range","buildContainerGroups","container","svg","append","classed","attr","transform","layout","pie","padAngle","paddingAngle","value","getQuantity","sort","sortComparator","shape","arc","innerRadius","internalRadius","padRadius","externalRadius","select","selectAll","enter","transition","ease","drawLegend","obj","text","percentage","name","wrapText","legendWidth","slices","duration","arcTransitionDuration","attrTween","tweenArc","storeAngle","reduceOuterRadius","on","handleMouseOver","handleMouseOut","getSliceFill","tweenGrowthFactory","radiusHoverOffset","pieHoverTransitionDuration","pieDrawingTransitionDuration","tweenLoading","cleanLegend","datum","dispatch","customMouseOver","customMouseOut","interpolate","_current","t","outerRadius","delay","d","b","undefined","startAngle","endAngle","words","split","reverse","word","line","lineNumber","lineHeight","smallLineHeight","smallTextOffset","y","dy","parseFloat","fontSize","smallFontSize","tspan","style","pop","push","join","node","getComputedTextLength","category20c","quantity","parseInt","_x","arguments","length","rebind"],"mappings":"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","file":"donut.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"d3\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"d3\"], factory);\n\telse {\n\t\tvar a = typeof exports === 'object' ? factory(require(\"d3\")) : factory(root[\"d3\"]);\n\t\tfor(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];\n\t}\n})(this, function(__WEBPACK_EXTERNAL_MODULE_1__) {\nreturn \n\n\n/** WEBPACK FOOTER **\n ** webpack/universalModuleDefinition\n **/","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"d3\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"d3\"], factory);\n\telse {\n\t\tvar a = typeof exports === 'object' ? factory(require(\"d3\")) : factory(root[\"d3\"]);\n\t\tfor(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];\n\t}\n})(this, function(__WEBPACK_EXTERNAL_MODULE_1__) {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_RESULT__;'use strict';\n\t\n\t!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {\n\t    'use strict';\n\t\n\t    var d3 = __webpack_require__(1);\n\t\n\t    /**\n\t     * @typdef D3Selection\n\t     * @type Array[]\n\t     */\n\t\n\t    /**\n\t     * @fileOverview Reusable Donut Chart API class that renders a\n\t     * simple and configurable donut chart.\n\t     *\n\t     * @tutorial donut\n\t     * @exports charts/donut\n\t     * @requires d3\n\t     * @version 0.0.1\n\t     */\n\t    return function module() {\n\t\n\t        var margin = {\n\t            top: 60,\n\t            right: 60,\n\t            bottom: 60,\n\t            left: 60\n\t        },\n\t            width = 300,\n\t            height = 300,\n\t            ease = 'cubic-in-out',\n\t            arcTransitionDuration = 750,\n\t            pieDrawingTransitionDuration = 1200,\n\t            pieHoverTransitionDuration = 150,\n\t            radiusHoverOffset = 15,\n\t            paddingAngle = 0.015,\n\t            data = undefined,\n\t            chartWidth = undefined,\n\t            chartHeight = undefined,\n\t            externalRadius = 140,\n\t            internalRadius = 45.5,\n\t            legendWidth = externalRadius + internalRadius,\n\t            layout = undefined,\n\t            shape = undefined,\n\t            slices = undefined,\n\t            svg = undefined,\n\t\n\t\n\t        // colors\n\t        colorScale = d3.scale.category20c(),\n\t            colorScheme = ['#00AF38', '#41C2C9', '#F6C664', '#F4693A', '#9A66D7'],\n\t\n\t\n\t        // utils\n\t        storeAngle = function storeAngle(d) {\n\t            this._current = d;\n\t        },\n\t            reduceOuterRadius = function reduceOuterRadius(d) {\n\t            d.outerRadius = externalRadius - radiusHoverOffset;\n\t        },\n\t            sortComparator = function sortComparator(a, b) {\n\t            return b.quantity - a.quantity;\n\t        },\n\t\n\t\n\t        // extractors\n\t        getQuantity = function getQuantity(d) {\n\t            return parseInt(d.quantity, 10);\n\t        },\n\t            getSliceFill = function getSliceFill(d) {\n\t            return colorScale(d.data.name);\n\t        },\n\t\n\t\n\t        // events\n\t        dispatch = d3.dispatch('customMouseOver', 'customMouseOut', 'customMouseMove');\n\t\n\t        /**\n\t         * This function creates the graph using the selection as container\n\t         * @param  {D3Selection} _selection A d3 selection that represents\n\t         *                                  the container(s) where the chart(s) will be rendered\n\t         */\n\t        function exports(_selection) {\n\t            /* @param {object} _data The data to attach and generate the chart */\n\t            _selection.each(function (_data) {\n\t                chartWidth = width - margin.left - margin.right;\n\t                chartHeight = height - margin.top - margin.bottom;\n\t                data = _data;\n\t\n\t                buildLayout();\n\t                buildColorScale();\n\t                buildShape();\n\t                buildSVG(this);\n\t                drawSlices();\n\t                initTooltip();\n\t            });\n\t        }\n\t\n\t        /**\n\t         * Builds color scale for chart, if any colorScheme was defined\n\t         * @private\n\t         */\n\t        function buildColorScale() {\n\t            if (colorScheme) {\n\t                colorScale = d3.scale.ordinal().range(colorScheme);\n\t            }\n\t        }\n\t\n\t        /**\n\t         * Builds containers for the chart, the legend and a wrapper for all of them\n\t         * @private\n\t         */\n\t        function buildContainerGroups() {\n\t            var container = svg.append('g').classed('container-group', true).attr({\n\t                transform: 'translate(' + width / 2 + ', ' + height / 2 + ')'\n\t            });\n\t\n\t            container.append('g').classed('chart-group', true);\n\t            container.append('g').classed('legend-group', true);\n\t        }\n\t\n\t        /**\n\t         * Builds the pie layout that will produce data ready to draw\n\t         * @private\n\t         */\n\t        function buildLayout() {\n\t            layout = d3.layout.pie().padAngle(paddingAngle).value(getQuantity).sort(sortComparator);\n\t        }\n\t\n\t        /**\n\t         * Builds the shape function\n\t         * @private\n\t         */\n\t        function buildShape() {\n\t            shape = d3.svg.arc().innerRadius(internalRadius).padRadius(externalRadius);\n\t        }\n\t\n\t        /**\n\t         * Builds the SVG element that will contain the chart\n\t         * @param  {HTMLElement} container DOM element that will work as the container of the graph\n\t         * @private\n\t         */\n\t        function buildSVG(container) {\n\t            svg = d3.select(container).selectAll('svg').data([data]);\n\t\n\t            svg.enter().append('svg').attr('class', 'britechart donut-chart');\n\t\n\t            buildContainerGroups();\n\t\n\t            svg.transition().ease(ease).attr('width', width + margin.left + margin.right).attr('height', height + margin.top + margin.bottom);\n\t        }\n\t\n\t        /**\n\t         * Draws the values on the donut slice inside the text element\n\t         * @param  {obj} obj Data object\n\t         * @private\n\t         */\n\t        function drawLegend(obj) {\n\t            if (obj.data) {\n\t                svg.select('.donut-text').text(function () {\n\t                    return obj.data.percentage + '% ' + obj.data.name;\n\t                }).attr('dy', '.2em').attr('text-anchor', 'middle');\n\t\n\t                svg.select('.donut-text').call(wrapText, legendWidth);\n\t            }\n\t        }\n\t\n\t        /**\n\t         * Draws the slices of the donut\n\t         * @private\n\t         */\n\t        function drawSlices() {\n\t            if (!slices) {\n\t                slices = svg.select('.chart-group').selectAll('g.arc').data(layout(data));\n\t\n\t                slices.enter().append('g').each(storeAngle).each(reduceOuterRadius).classed('arc', true).on('mouseover', handleMouseOver).on('mouseout', handleMouseOut);\n\t\n\t                slices.append('path').attr('fill', getSliceFill).on('mouseover', tweenGrowthFactory(externalRadius, 0)).on('mouseout', tweenGrowthFactory(externalRadius - radiusHoverOffset, pieHoverTransitionDuration)).transition().ease(ease).duration(pieDrawingTransitionDuration).attrTween('d', tweenLoading);\n\t            } else {\n\t                slices = svg.select('.chart-group').selectAll('path').data(layout(data));\n\t\n\t                slices.attr('d', shape);\n\t\n\t                // Redraws the angles of the data\n\t                slices.transition().duration(arcTransitionDuration).attrTween('d', tweenArc);\n\t            }\n\t        }\n\t\n\t        /**\n\t         * Cleans any value that could be on the legend text element\n\t         * @private\n\t         */\n\t        function cleanLegend() {\n\t            svg.select('.donut-text').text('');\n\t        }\n\t\n\t        function handleMouseOver(datum) {\n\t            drawLegend(datum);\n\t\n\t            dispatch.customMouseOver(datum);\n\t        }\n\t\n\t        function handleMouseOut() {\n\t            cleanLegend();\n\t\n\t            dispatch.customMouseOut();\n\t        }\n\t\n\t        /**\n\t         * Creates the text element that will hold the legend of the chart\n\t         */\n\t        function initTooltip() {\n\t            svg.select('.legend-group').append('text').attr('class', 'donut-text');\n\t        }\n\t\n\t        /**\n\t         * Stores current angles and interpolates with new angles\n\t         * @param {obj} a New data for slice\n\t         *\n\t         * Check out {@link http://bl.ocks.org/mbostock/1346410| this example}\n\t         * @private\n\t         */\n\t        function tweenArc(a) {\n\t            var i = d3.interpolate(this._current, a);\n\t\n\t            this._current = i(0);\n\t\n\t            return function (t) {\n\t                return shape(i(t));\n\t            };\n\t        }\n\t\n\t        /**\n\t         * Generates animations with tweens depending on the attributes given\n\t         * @param  {number} outerRadius Final outer radius value\n\t         * @param  {number} delay       Delay of animation\n\t         * @return {function}           Function that when called will tween the element\n\t         * @private\n\t         */\n\t        function tweenGrowthFactory(outerRadius, delay) {\n\t            return function () {\n\t                d3.select(this).transition().delay(delay).attrTween('d', function (d) {\n\t                    var i = d3.interpolate(d.outerRadius, outerRadius);\n\t\n\t                    return function (t) {\n\t                        d.outerRadius = i(t);\n\t\n\t                        return shape(d);\n\t                    };\n\t                });\n\t            };\n\t        }\n\t\n\t        /**\n\t         * Animation for chart loading\n\t         * @param  {obj} b Data point\n\t         * @return {funct}   Tween function\n\t         * Check out {@link http://bl.ocks.org/mbostock/4341574| this example}\n\t         * @private\n\t         */\n\t        function tweenLoading(b) {\n\t            var i = undefined;\n\t\n\t            b.innerRadius = 0;\n\t            i = d3.interpolate({ startAngle: 0, endAngle: 0 }, b);\n\t\n\t            return function (t) {\n\t                return shape(i(t));\n\t            };\n\t        }\n\t\n\t        /**\n\t         * Utility function that wraps a text into the given width\n\t         * TODO: Candidate to refactoring\n\t         * @param  {string} text         Text to write\n\t         * @param  {number} legendWidth Width of the container\n\t         * @private\n\t         */\n\t        function wrapText(text, legendWidth) {\n\t            text.each(function () {\n\t                var text = d3.select(this),\n\t                    words = text.text().split(/\\s+/).reverse(),\n\t                    word = undefined,\n\t                    line = [],\n\t                    lineNumber = 0,\n\t                    lineHeight = 1.2,\n\t                    smallLineHeight = lineHeight * 0.9,\n\t                    smallTextOffset = 15,\n\t                    y = text.attr('y'),\n\t                    dy = parseFloat(text.attr('dy')),\n\t                    fontSize = externalRadius / 4,\n\t                    smallFontSize = fontSize / 2.5,\n\t                    tspan = text.text(null).append('tspan').attr('x', 0).attr('y', y - 5).attr('dy', dy + 'em').classed('donut-value', true).style('font-size', fontSize + 'px');\n\t\n\t                tspan.text(words.pop());\n\t                tspan = text.append('tspan').classed('donut-label', true).attr('x', 0).attr('y', y + smallTextOffset).attr('dy', ++lineNumber * smallLineHeight + dy + 'em').style('font-size', smallFontSize + 'px');\n\t\n\t                while (word = words.pop()) {\n\t                    line.push(word);\n\t                    tspan.text(line.join(' '));\n\t                    if (tspan.node().getComputedTextLength() > legendWidth - 50) {\n\t                        line.pop();\n\t                        tspan.text(line.join(' '));\n\t                        line = [word];\n\t                        tspan = text.append('tspan').classed('donut-label', true).attr('x', 0).attr('y', y + smallTextOffset).attr('dy', ++lineNumber * smallLineHeight + dy + 'em').text(word).style('font-size', smallFontSize + 'px');\n\t                    }\n\t                }\n\t            });\n\t        }\n\t\n\t        /**\n\t         * Gets or Sets the colorScheme of the chart\n\t         * @param  {array} _x Color scheme array to get/set\n\t         * @return { colorScheme | module} Current colorScheme or Donut Chart module to chain calls\n\t         * @public\n\t         */\n\t        exports.colorScheme = function (_x) {\n\t            if (!arguments.length) {\n\t                return colorScheme;\n\t            }\n\t            colorScheme = _x;\n\t            return this;\n\t        };\n\t\n\t        /**\n\t         * Gets or Sets the externalRadius of the chart\n\t         * @param  {number} _x ExternalRadius number to get/set\n\t         * @return { externalRadius | module} Current externalRadius or Donut Chart module to chain calls\n\t         * @public\n\t         */\n\t        exports.externalRadius = function (_x) {\n\t            if (!arguments.length) {\n\t                return externalRadius;\n\t            }\n\t            externalRadius = _x;\n\t            return this;\n\t        };\n\t\n\t        /**\n\t         * Gets or Sets the height of the chart\n\t         * @param  {number} _x Desired width for the graph\n\t         * @return { height | module} Current height or Donut Chart module to chain calls\n\t         * @public\n\t         */\n\t        exports.height = function (_x) {\n\t            if (!arguments.length) {\n\t                return height;\n\t            }\n\t            height = _x;\n\t            return this;\n\t        };\n\t\n\t        /**\n\t         * Gets or Sets the internalRadius of the chart\n\t         * @param  {number} _x InternalRadius number to get/set\n\t         * @return { internalRadius | module} Current internalRadius or Donut Chart module to chain calls\n\t         * @public\n\t         */\n\t        exports.internalRadius = function (_x) {\n\t            if (!arguments.length) {\n\t                return internalRadius;\n\t            }\n\t            internalRadius = _x;\n\t            return this;\n\t        };\n\t\n\t        /**\n\t         * Gets or Sets the margin of the chart\n\t         * @param  {object} _x Margin object to get/set\n\t         * @return { margin | module} Current margin or Donut Chart module to chain calls\n\t         * @public\n\t         */\n\t        exports.margin = function (_x) {\n\t            if (!arguments.length) {\n\t                return margin;\n\t            }\n\t            margin = _x;\n\t            return this;\n\t        };\n\t\n\t        /**\n\t         * Gets or Sets the width of the chart\n\t         * @param  {number} _x Desired width for the graph\n\t         * @return { width | module} Current width or Donut Chart module to chain calls\n\t         * @public\n\t         */\n\t        exports.width = function (_x) {\n\t            if (!arguments.length) {\n\t                return width;\n\t            }\n\t            width = _x;\n\t            return this;\n\t        };\n\t\n\t        // Rebind 'customHover' event to the \"exports\" function, so it's available \"externally\" under the typical \"on\" method:\n\t        d3.rebind(exports, dispatch, 'on');\n\t\n\t        return exports;\n\t    };\n\t}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n/***/ },\n/* 1 */\n/***/ function(module, exports) {\n\n\tmodule.exports = __WEBPACK_EXTERNAL_MODULE_1__;\n\n/***/ }\n/******/ ])\n});\n;\n\n\n/** WEBPACK FOOTER **\n ** donut.min.js\n **/"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap df964404de07f1dd3049\n **/","define(function(require){\n    'use strict';\n\n    const d3 = require('d3');\n\n    /**\n     * @typdef D3Selection\n     * @type Array[]\n     */\n\n    /**\n     * @fileOverview Reusable Donut Chart API class that renders a\n     * simple and configurable donut chart.\n     *\n     * @tutorial donut\n     * @exports charts/donut\n     * @requires d3\n     * @version 0.0.1\n     */\n    return function module() {\n\n        let margin = {\n                top: 60,\n                right: 60,\n                bottom: 60,\n                left: 60\n            },\n            width = 300,\n            height = 300,\n            ease = 'cubic-in-out',\n            arcTransitionDuration = 750,\n            pieDrawingTransitionDuration = 1200,\n            pieHoverTransitionDuration = 150,\n            radiusHoverOffset = 15,\n            paddingAngle = 0.015,\n            data,\n            chartWidth, chartHeight,\n            externalRadius = 140,\n            internalRadius = 45.5,\n            legendWidth = externalRadius + internalRadius,\n            layout,\n            shape,\n            slices,\n            svg,\n\n            // colors\n            colorScale = d3.scale.category20c(),\n            colorScheme = ['#00AF38', '#41C2C9', '#F6C664', '#F4693A', '#9A66D7'],\n\n            // utils\n            storeAngle = function(d) {\n                this._current = d;\n            },\n            reduceOuterRadius = d => {\n                d.outerRadius = externalRadius - radiusHoverOffset;\n            },\n            sortComparator = (a, b) => b.quantity - a.quantity,\n\n            // extractors\n            getQuantity = d => parseInt(d.quantity, 10),\n            getSliceFill = d => colorScale(d.data.name),\n\n            // events\n            dispatch = d3.dispatch('customMouseOver', 'customMouseOut', 'customMouseMove');\n\n        /**\n         * This function creates the graph using the selection as container\n         * @param  {D3Selection} _selection A d3 selection that represents\n         *                                  the container(s) where the chart(s) will be rendered\n         */\n        function exports(_selection) {\n            /* @param {object} _data The data to attach and generate the chart */\n            _selection.each(function(_data) {\n                chartWidth = width - margin.left - margin.right;\n                chartHeight = height - margin.top - margin.bottom;\n                data = _data;\n\n                buildLayout();\n                buildColorScale();\n                buildShape();\n                buildSVG(this);\n                drawSlices();\n                initTooltip();\n            });\n        }\n\n        /**\n         * Builds color scale for chart, if any colorScheme was defined\n         * @private\n         */\n        function buildColorScale() {\n            if (colorScheme) {\n                colorScale = d3.scale.ordinal().range(colorScheme);\n            }\n        }\n\n        /**\n         * Builds containers for the chart, the legend and a wrapper for all of them\n         * @private\n         */\n        function buildContainerGroups() {\n            let container = svg.append('g')\n                .classed('container-group', true)\n                .attr({\n                    transform: `translate(${width / 2}, ${height / 2})`\n                });\n\n            container.append('g').classed('chart-group', true);\n            container.append('g').classed('legend-group', true);\n        }\n\n        /**\n         * Builds the pie layout that will produce data ready to draw\n         * @private\n         */\n        function buildLayout() {\n            layout = d3.layout.pie()\n                .padAngle(paddingAngle)\n                .value(getQuantity)\n                .sort(sortComparator);\n        }\n\n        /**\n         * Builds the shape function\n         * @private\n         */\n        function buildShape() {\n            shape = d3.svg.arc()\n                .innerRadius(internalRadius)\n                .padRadius(externalRadius);\n        }\n\n        /**\n         * Builds the SVG element that will contain the chart\n         * @param  {HTMLElement} container DOM element that will work as the container of the graph\n         * @private\n         */\n        function buildSVG(container) {\n            svg = d3.select(container)\n                .selectAll('svg')\n                .data([data]);\n\n            svg.enter().append('svg')\n                .attr('class', 'britechart donut-chart');\n\n            buildContainerGroups();\n\n            svg.transition().ease(ease)\n                .attr('width', width + margin.left + margin.right)\n                .attr('height', height + margin.top + margin.bottom);\n        }\n\n        /**\n         * Draws the values on the donut slice inside the text element\n         * @param  {obj} obj Data object\n         * @private\n         */\n        function drawLegend(obj) {\n            if (obj.data) {\n                svg.select('.donut-text')\n                    .text(() => `${obj.data.percentage}% ${ obj.data.name}`)\n                    .attr('dy', '.2em')\n                    .attr('text-anchor', 'middle');\n\n                svg.select('.donut-text').call(wrapText, legendWidth);\n            }\n        }\n\n        /**\n         * Draws the slices of the donut\n         * @private\n         */\n        function drawSlices() {\n            if (!slices) {\n                slices = svg.select('.chart-group')\n                    .selectAll('g.arc')\n                    .data(layout(data));\n\n                slices.enter()\n                    .append('g')\n                    .each(storeAngle)\n                    .each(reduceOuterRadius)\n                    .classed('arc', true)\n                    .on('mouseover', handleMouseOver)\n                    .on('mouseout', handleMouseOut);\n\n                slices\n                    .append('path')\n                    .attr('fill', getSliceFill)\n                    .on('mouseover', tweenGrowthFactory(externalRadius, 0))\n                    .on('mouseout', tweenGrowthFactory(externalRadius - radiusHoverOffset, pieHoverTransitionDuration))\n                  .transition()\n                    .ease(ease)\n                    .duration(pieDrawingTransitionDuration)\n                    .attrTween('d', tweenLoading);\n\n            } else {\n                slices = svg.select('.chart-group')\n                    .selectAll('path')\n                    .data(layout(data));\n\n                slices\n                    .attr('d', shape);\n\n                // Redraws the angles of the data\n                slices\n                    .transition().duration(arcTransitionDuration)\n                    .attrTween('d', tweenArc);\n            }\n        }\n\n        /**\n         * Cleans any value that could be on the legend text element\n         * @private\n         */\n        function cleanLegend() {\n            svg.select('.donut-text').text('');\n        }\n\n        function handleMouseOver(datum) {\n            drawLegend(datum);\n\n            dispatch.customMouseOver(datum);\n        }\n\n        function handleMouseOut() {\n            cleanLegend();\n\n            dispatch.customMouseOut();\n        }\n\n        /**\n         * Creates the text element that will hold the legend of the chart\n         */\n        function initTooltip() {\n            svg.select('.legend-group')\n                .append('text')\n                .attr('class', 'donut-text');\n        }\n\n        /**\n         * Stores current angles and interpolates with new angles\n         * @param {obj} a New data for slice\n         *\n         * Check out {@link http://bl.ocks.org/mbostock/1346410| this example}\n         * @private\n         */\n        function tweenArc(a) {\n            let i = d3.interpolate(this._current, a);\n\n            this._current = i(0);\n\n            return function(t) {\n                return shape(i(t));\n            };\n        }\n\n        /**\n         * Generates animations with tweens depending on the attributes given\n         * @param  {number} outerRadius Final outer radius value\n         * @param  {number} delay       Delay of animation\n         * @return {function}           Function that when called will tween the element\n         * @private\n         */\n        function tweenGrowthFactory(outerRadius, delay) {\n            return function() {\n                d3.select(this)\n                    .transition()\n                    .delay(delay)\n                    .attrTween('d', function(d) {\n                        let i = d3.interpolate(d.outerRadius, outerRadius);\n\n                        return (t) => {\n                            d.outerRadius = i(t);\n\n                            return shape(d);\n                        };\n                    });\n            };\n        }\n\n        /**\n         * Animation for chart loading\n         * @param  {obj} b Data point\n         * @return {funct}   Tween function\n         * Check out {@link http://bl.ocks.org/mbostock/4341574| this example}\n         * @private\n         */\n        function tweenLoading(b) {\n            let i;\n\n            b.innerRadius = 0;\n            i = d3.interpolate({ startAngle: 0, endAngle: 0}, b);\n\n            return function(t) { return shape(i(t)); };\n        }\n\n        /**\n         * Utility function that wraps a text into the given width\n         * TODO: Candidate to refactoring\n         * @param  {string} text         Text to write\n         * @param  {number} legendWidth Width of the container\n         * @private\n         */\n        function wrapText(text, legendWidth) {\n            text.each(function() {\n                let text = d3.select(this),\n                    words = text.text().split(/\\s+/).reverse(),\n                    word,\n                    line = [],\n                    lineNumber = 0,\n                    lineHeight = 1.2,\n                    smallLineHeight = lineHeight * 0.9,\n                    smallTextOffset = 15,\n                    y = text.attr('y'),\n                    dy = parseFloat(text.attr('dy')),\n                    fontSize = externalRadius / 4,\n                    smallFontSize = fontSize / 2.5,\n                    tspan = text.text(null).append('tspan')\n                        .attr('x', 0)\n                        .attr('y', y - 5)\n                        .attr('dy', dy + 'em')\n                        .classed('donut-value', true)\n                        .style('font-size', fontSize + 'px');\n\n                tspan.text(words.pop());\n                tspan = text.append('tspan')\n                    .classed('donut-label', true)\n                    .attr('x', 0)\n                    .attr('y', y + smallTextOffset)\n                    .attr('dy', ++lineNumber * smallLineHeight + dy + 'em')\n                    .style('font-size', smallFontSize + 'px');\n\n                while (word = words.pop()) {\n                    line.push(word);\n                    tspan.text(line.join(' '));\n                    if (tspan.node().getComputedTextLength() > legendWidth - 50) {\n                        line.pop();\n                        tspan.text(line.join(' '));\n                        line = [word];\n                        tspan = text.append('tspan')\n                            .classed('donut-label', true)\n                            .attr('x', 0)\n                            .attr('y', y+ smallTextOffset)\n                            .attr('dy', ++lineNumber * smallLineHeight + dy + 'em')\n                            .text(word)\n                            .style('font-size', smallFontSize + 'px');\n                    }\n                }\n            });\n        }\n\n        /**\n         * Gets or Sets the colorScheme of the chart\n         * @param  {array} _x Color scheme array to get/set\n         * @return { colorScheme | module} Current colorScheme or Donut Chart module to chain calls\n         * @public\n         */\n        exports.colorScheme = function(_x) {\n            if (!arguments.length) {\n                return colorScheme;\n            }\n            colorScheme = _x;\n            return this;\n        };\n\n        /**\n         * Gets or Sets the externalRadius of the chart\n         * @param  {number} _x ExternalRadius number to get/set\n         * @return { externalRadius | module} Current externalRadius or Donut Chart module to chain calls\n         * @public\n         */\n        exports.externalRadius = function(_x) {\n            if (!arguments.length) {\n                return externalRadius;\n            }\n            externalRadius = _x;\n            return this;\n        };\n\n        /**\n         * Gets or Sets the height of the chart\n         * @param  {number} _x Desired width for the graph\n         * @return { height | module} Current height or Donut Chart module to chain calls\n         * @public\n         */\n        exports.height = function(_x) {\n            if (!arguments.length) {\n                return height;\n            }\n            height = _x;\n            return this;\n        };\n\n        /**\n         * Gets or Sets the internalRadius of the chart\n         * @param  {number} _x InternalRadius number to get/set\n         * @return { internalRadius | module} Current internalRadius or Donut Chart module to chain calls\n         * @public\n         */\n        exports.internalRadius = function(_x) {\n            if (!arguments.length) {\n                return internalRadius;\n            }\n            internalRadius = _x;\n            return this;\n        };\n\n        /**\n         * Gets or Sets the margin of the chart\n         * @param  {object} _x Margin object to get/set\n         * @return { margin | module} Current margin or Donut Chart module to chain calls\n         * @public\n         */\n        exports.margin = function(_x) {\n            if (!arguments.length) {\n                return margin;\n            }\n            margin = _x;\n            return this;\n        };\n\n        /**\n         * Gets or Sets the width of the chart\n         * @param  {number} _x Desired width for the graph\n         * @return { width | module} Current width or Donut Chart module to chain calls\n         * @public\n         */\n        exports.width = function(_x) {\n            if (!arguments.length) {\n                return width;\n            }\n            width = _x;\n            return this;\n        };\n\n        // Rebind 'customHover' event to the \"exports\" function, so it's available \"externally\" under the typical \"on\" method:\n        d3.rebind(exports, dispatch, 'on');\n\n        return exports;\n    };\n});\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/charts/donut.js\n **/","module.exports = __WEBPACK_EXTERNAL_MODULE_1__;\n\n\n/*****************\n ** WEBPACK FOOTER\n ** external \"d3\"\n ** module id = 1\n ** module chunks = 0 1 2 3 4\n **/"],"sourceRoot":""}