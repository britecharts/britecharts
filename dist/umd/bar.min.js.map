{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///bar.min.js","webpack:///webpack/bootstrap df964404de07f1dd3049","webpack:///./src/charts/bar.js","webpack:///external \"d3\""],"names":["root","factory","exports","module","require","define","amd","a","i","this","__WEBPACK_EXTERNAL_MODULE_1__","modules","__webpack_require__","moduleId","installedModules","id","loaded","call","m","c","p","__WEBPACK_AMD_DEFINE_RESULT__","d3","_selection","each","_data","chartWidth","width","margin","left","right","chartHeight","height","top","bottom","data","buildScales","buildAxis","buildSVG","drawBars","drawAxis","xAxis","svg","axis","scale","xScale","orient","yAxis","yScale","ticks","buildContainerGroups","container","append","classed","attr","transform","ordinal","domain","map","getLetter","rangeRoundBands","linear","max","getFrequency","range","select","transition","ease","gapSize","rangeBand","gap","barW","bars","selectAll","enter","x","y","d","frequency","on","dispatch","customHover","letter","exit","style","opacity","remove","undefined","_x","arguments","length","rebind"],"mappings":"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","file":"bar.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"d3\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"d3\"], factory);\n\telse {\n\t\tvar a = typeof exports === 'object' ? factory(require(\"d3\")) : factory(root[\"d3\"]);\n\t\tfor(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];\n\t}\n})(this, function(__WEBPACK_EXTERNAL_MODULE_1__) {\nreturn \n\n\n/** WEBPACK FOOTER **\n ** webpack/universalModuleDefinition\n **/","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"d3\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"d3\"], factory);\n\telse {\n\t\tvar a = typeof exports === 'object' ? factory(require(\"d3\")) : factory(root[\"d3\"]);\n\t\tfor(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];\n\t}\n})(this, function(__WEBPACK_EXTERNAL_MODULE_1__) {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_RESULT__;'use strict';\n\t\n\t!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {\n\t    'use strict';\n\t\n\t    var d3 = __webpack_require__(1);\n\t\n\t    /**\n\t     * @typdef D3Selection\n\t     * @type Array[]\n\t     */\n\t\n\t    /**\n\t     * @fileOverview Bar Chart reusable API class that renders a\n\t     * simple and configurable bar chart.\n\t     *\n\t     * @tutorial bar\n\t     * @exports charts/bar\n\t     * @requires d3\n\t     * @version 0.0.3\n\t     */\n\t    return function module() {\n\t\n\t        var margin = { top: 20, right: 20, bottom: 30, left: 40 },\n\t            width = 960,\n\t            height = 500,\n\t            ease = 'ease',\n\t            gap = 2,\n\t            data = undefined,\n\t            chartWidth = undefined,\n\t            chartHeight = undefined,\n\t            xScale = undefined,\n\t            yScale = undefined,\n\t            xAxis = undefined,\n\t            yAxis = undefined,\n\t            svg = undefined,\n\t\n\t\n\t        // Dispatcher object to broadcast the 'customHover' event\n\t        // Ref: https://github.com/mbostock/d3/wiki/Internals#d3_dispatch\n\t        dispatch = d3.dispatch('customHover'),\n\t\n\t\n\t        // extractors\n\t        getLetter = function getLetter(d) {\n\t            return d.letter;\n\t        },\n\t            getFrequency = function getFrequency(d) {\n\t            return d.frequency;\n\t        };\n\t\n\t        /**\n\t         * This function creates the graph using the selection as container\n\t         * @param  {D3Selection} _selection A d3 selection that represents\n\t         *                                  the container(s) where the chart(s) will be rendered\n\t         */\n\t        function exports(_selection) {\n\t            /* @param {object} _data The data to attach and generate the chart */\n\t            _selection.each(function (_data) {\n\t                chartWidth = width - margin.left - margin.right;\n\t                chartHeight = height - margin.top - margin.bottom;\n\t                data = _data;\n\t\n\t                buildScales();\n\t                buildAxis();\n\t                buildSVG(this);\n\t                drawBars();\n\t                drawAxis();\n\t            });\n\t        }\n\t\n\t        /**\n\t         * Creates the d3 x and y axis, setting orientations\n\t         * @private\n\t         */\n\t        function buildAxis() {\n\t            xAxis = d3.svg.axis().scale(xScale).orient('bottom');\n\t\n\t            yAxis = d3.svg.axis().scale(yScale).orient('left').ticks(10, '%');\n\t        }\n\t\n\t        /**\n\t         * Builds containers for the chart, the axis and a wrapper for all of them\n\t         * Also applies the Margin convention\n\t         * @private\n\t         */\n\t        function buildContainerGroups() {\n\t            var container = svg.append('g').classed('container-group', true).attr({\n\t                transform: 'translate(' + margin.left + ', ' + margin.top + ')'\n\t            });\n\t\n\t            container.append('g').classed('chart-group', true);\n\t            container.append('g').classed('x-axis-group axis', true);\n\t            container.append('g').classed('y-axis-group axis', true);\n\t        }\n\t\n\t        /**\n\t         * Creates the x and y scales of the graph\n\t         * @private\n\t         */\n\t        function buildScales() {\n\t            xScale = d3.scale.ordinal().domain(data.map(getLetter)).rangeRoundBands([0, chartWidth], 0.1);\n\t\n\t            yScale = d3.scale.linear().domain([0, d3.max(data, getFrequency)]).range([chartHeight, 0]);\n\t        }\n\t\n\t        /**\n\t         * Builds the SVG element that will contain the chart\n\t         * @param  {HTMLElement} container DOM element that will work as the container of the graph\n\t         * @private\n\t         */\n\t        function buildSVG(container) {\n\t            if (!svg) {\n\t                svg = d3.select(container).append('svg').classed('britechart bar-chart', true);\n\t\n\t                buildContainerGroups();\n\t            }\n\t            svg.transition().attr({\n\t                width: width + margin.left + margin.right,\n\t                height: height + margin.top + margin.bottom\n\t            });\n\t        }\n\t\n\t        /**\n\t         * Draws the x and y axis on the svg object within their\n\t         * respective groups\n\t         * @private\n\t         */\n\t        function drawAxis() {\n\t            svg.select('.x-axis-group.axis').transition().ease(ease).attr('transform', 'translate(0,' + chartHeight + ')').call(xAxis);\n\t\n\t            svg.select('.y-axis-group.axis').call(yAxis);\n\t        }\n\t\n\t        /**\n\t         * Draws the bar elements within the chart group\n\t         * @private\n\t         */\n\t        function drawBars() {\n\t            var gapSize = xScale.rangeBand() / 100 * gap,\n\t                barW = xScale.rangeBand() - gapSize,\n\t                bars = svg.select('.chart-group').selectAll('.bar').data(data);\n\t\n\t            // Enter\n\t            bars.enter().append('rect').classed('bar', true).attr({\n\t                width: barW,\n\t                x: chartWidth, // Initially drawing the bars at the end of Y axis\n\t                y: function y(d) {\n\t                    return yScale(d.frequency);\n\t                },\n\t                height: function height(d) {\n\t                    return chartHeight - yScale(d.frequency);\n\t                }\n\t            }).on('mouseover', dispatch.customHover);\n\t\n\t            // Update\n\t            bars.transition().ease(ease).attr({\n\t                width: barW,\n\t                x: function x(d) {\n\t                    return xScale(d.letter) + gapSize / 2;\n\t                },\n\t                y: function y(d) {\n\t                    return yScale(d.frequency);\n\t                },\n\t                height: function height(d) {\n\t                    return chartHeight - yScale(d.frequency);\n\t                }\n\t            });\n\t\n\t            // Exit\n\t            bars.exit().transition().style({ opacity: 0 }).remove();\n\t        }\n\t\n\t        /**\n\t         * Gets or Sets the margin of the chart\n\t         * @param  {object} _x Margin object to get/set\n\t         * @return { margin | module} Current margin or Bar Chart module to chain calls\n\t         * @public\n\t         */\n\t        exports.margin = function (_x) {\n\t            if (!arguments.length) {\n\t                return margin;\n\t            }\n\t            margin = _x;\n\t            return this;\n\t        };\n\t\n\t        /**\n\t         * Gets or Sets the width of the chart\n\t         * @param  {number} _x Desired width for the graph\n\t         * @return { width | module} Current width or Bar Chart module to chain calls\n\t         * @public\n\t         */\n\t        exports.width = function (_x) {\n\t            if (!arguments.length) {\n\t                return width;\n\t            }\n\t            width = _x;\n\t            return this;\n\t        };\n\t\n\t        /**\n\t         * Gets or Sets the height of the chart\n\t         * @param  {number} _x Desired width for the graph\n\t         * @return { height | module} Current height or Bar Chart module to chain calls\n\t         * @public\n\t         */\n\t        exports.height = function (_x) {\n\t            if (!arguments.length) {\n\t                return height;\n\t            }\n\t            height = _x;\n\t            return this;\n\t        };\n\t\n\t        // Copies the method \"on\" from dispatch to exports, making it accesible\n\t        // from outside\n\t        // Reference: https://github.com/mbostock/d3/wiki/Internals#rebind\n\t        d3.rebind(exports, dispatch, 'on');\n\t\n\t        return exports;\n\t    };\n\t}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n/***/ },\n/* 1 */\n/***/ function(module, exports) {\n\n\tmodule.exports = __WEBPACK_EXTERNAL_MODULE_1__;\n\n/***/ }\n/******/ ])\n});\n;\n\n\n/** WEBPACK FOOTER **\n ** bar.min.js\n **/"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap df964404de07f1dd3049\n **/","define(function(require){\n    'use strict';\n\n    const d3 = require('d3');\n\n    /**\n     * @typdef D3Selection\n     * @type Array[]\n     */\n\n    /**\n     * @fileOverview Bar Chart reusable API class that renders a\n     * simple and configurable bar chart.\n     *\n     * @tutorial bar\n     * @exports charts/bar\n     * @requires d3\n     * @version 0.0.3\n     */\n    return function module(){\n\n        let margin = {top: 20, right: 20, bottom: 30, left: 40},\n            width = 960,\n            height = 500,\n            ease = 'ease',\n            gap = 2,\n            data,\n            chartWidth, chartHeight,\n            xScale, yScale,\n            xAxis, yAxis,\n            svg,\n\n            // Dispatcher object to broadcast the 'customHover' event\n            // Ref: https://github.com/mbostock/d3/wiki/Internals#d3_dispatch\n            dispatch = d3.dispatch('customHover'),\n\n            // extractors\n            getLetter = d => d.letter,\n            getFrequency = d => d.frequency;\n\n\n        /**\n         * This function creates the graph using the selection as container\n         * @param  {D3Selection} _selection A d3 selection that represents\n         *                                  the container(s) where the chart(s) will be rendered\n         */\n        function exports(_selection){\n            /* @param {object} _data The data to attach and generate the chart */\n            _selection.each(function(_data){\n                chartWidth = width - margin.left - margin.right;\n                chartHeight = height - margin.top - margin.bottom;\n                data = _data;\n\n                buildScales();\n                buildAxis();\n                buildSVG(this);\n                drawBars();\n                drawAxis();\n            });\n        }\n\n        /**\n         * Creates the d3 x and y axis, setting orientations\n         * @private\n         */\n        function buildAxis(){\n            xAxis = d3.svg.axis()\n                .scale(xScale)\n                .orient('bottom');\n\n            yAxis = d3.svg.axis()\n                .scale(yScale)\n                .orient('left')\n                .ticks(10, '%');\n        }\n\n        /**\n         * Builds containers for the chart, the axis and a wrapper for all of them\n         * Also applies the Margin convention\n         * @private\n         */\n        function buildContainerGroups(){\n            let container = svg.append('g')\n                .classed('container-group', true)\n                .attr({\n                    transform: `translate(${margin.left}, ${margin.top})`\n                });\n\n            container.append('g').classed('chart-group', true);\n            container.append('g').classed('x-axis-group axis', true);\n            container.append('g').classed('y-axis-group axis', true);\n        }\n\n        /**\n         * Creates the x and y scales of the graph\n         * @private\n         */\n        function buildScales(){\n            xScale = d3.scale.ordinal()\n                .domain(data.map(getLetter))\n                .rangeRoundBands([0, chartWidth], 0.1);\n\n            yScale = d3.scale.linear()\n                .domain([0, d3.max(data, getFrequency)])\n                .range([chartHeight, 0]);\n        }\n\n        /**\n         * Builds the SVG element that will contain the chart\n         * @param  {HTMLElement} container DOM element that will work as the container of the graph\n         * @private\n         */\n        function buildSVG(container){\n            if (!svg) {\n                svg = d3.select(container)\n                    .append('svg')\n                    .classed('britechart bar-chart', true);\n\n                buildContainerGroups();\n            }\n            svg.transition().attr({\n                width: width + margin.left + margin.right,\n                height: height + margin.top + margin.bottom\n            });\n        }\n\n        /**\n         * Draws the x and y axis on the svg object within their\n         * respective groups\n         * @private\n         */\n        function drawAxis(){\n            svg.select('.x-axis-group.axis')\n                .transition()\n                .ease(ease)\n                .attr('transform', 'translate(0,' + chartHeight + ')')\n                .call(xAxis);\n\n            svg.select('.y-axis-group.axis')\n                .call(yAxis);\n        }\n\n        /**\n         * Draws the bar elements within the chart group\n         * @private\n         */\n        function drawBars(){\n            let gapSize = xScale.rangeBand() / 100 * gap,\n                barW = xScale.rangeBand() - gapSize,\n                bars = svg.select('.chart-group').selectAll('.bar').data(data);\n\n            // Enter\n            bars.enter()\n                .append('rect')\n                .classed('bar', true)\n                .attr({\n                    width: barW,\n                    x: chartWidth, // Initially drawing the bars at the end of Y axis\n                    y: function(d) { return yScale(d.frequency); },\n                    height: function(d) { return chartHeight - yScale(d.frequency); }\n                })\n                .on('mouseover', dispatch.customHover);\n\n            // Update\n            bars.transition()\n                .ease(ease)\n                .attr({\n                    width: barW,\n                    x: function(d) { return xScale(d.letter) + gapSize/2; },\n                    y: function(d) { return yScale(d.frequency); },\n                    height: function(d) { return chartHeight - yScale(d.frequency); }\n                });\n\n            // Exit\n            bars.exit()\n                .transition().style({ opacity: 0 }).remove();\n        }\n\n        /**\n         * Gets or Sets the margin of the chart\n         * @param  {object} _x Margin object to get/set\n         * @return { margin | module} Current margin or Bar Chart module to chain calls\n         * @public\n         */\n        exports.margin = function(_x) {\n            if (!arguments.length) {\n                return margin;\n            }\n            margin = _x;\n            return this;\n        };\n\n        /**\n         * Gets or Sets the width of the chart\n         * @param  {number} _x Desired width for the graph\n         * @return { width | module} Current width or Bar Chart module to chain calls\n         * @public\n         */\n        exports.width = function(_x) {\n            if (!arguments.length) {\n                return width;\n            }\n            width = _x;\n            return this;\n        };\n\n        /**\n         * Gets or Sets the height of the chart\n         * @param  {number} _x Desired width for the graph\n         * @return { height | module} Current height or Bar Chart module to chain calls\n         * @public\n         */\n        exports.height = function(_x) {\n            if (!arguments.length) {\n                return height;\n            }\n            height = _x;\n            return this;\n        };\n\n        // Copies the method \"on\" from dispatch to exports, making it accesible\n        // from outside\n        // Reference: https://github.com/mbostock/d3/wiki/Internals#rebind\n        d3.rebind(exports, dispatch, 'on');\n\n        return exports;\n    };\n\n});\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/charts/bar.js\n **/","module.exports = __WEBPACK_EXTERNAL_MODULE_1__;\n\n\n/*****************\n ** WEBPACK FOOTER\n ** external \"d3\"\n ** module id = 1\n ** module chunks = 0 1 2 3 4\n **/"],"sourceRoot":""}