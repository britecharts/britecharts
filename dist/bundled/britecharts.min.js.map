{"version":3,"sources":["webpack:///webpack/universalModuleDefinition?5ca6***","webpack:///britecharts.min.js?3d71***","webpack:///webpack/bootstrap 739289ae8745c5a57f25?4043***","webpack:///./src/charts/tooltip.js?86d8***","webpack:///external \"d3\"?c0c4***"],"names":["root","factory","exports","module","require","define","amd","a","d3","i","this","__WEBPACK_EXTERNAL_MODULE_1__","modules","__webpack_require__","moduleId","installedModules","id","loaded","call","m","c","p","__WEBPACK_AMD_DEFINE_RESULT__","_selection","each","_data","chartWidth","width","margin","left","right","chartHeight","height","top","bottom","data","buildSVG","buildContainerGroups","container","svg","append","classed","attr","transform","select","drawTooltip","transition","hide","cleanContent","tooltipBody","selectAll","remove","tooltipTextContainer","tooltipBackground","x","tooltipWidth","y","tooltipHeight","rx","ry","tooltip","style","fill","stroke","stroke-width","tooltipTitle","dy","tooltipDivider","x1","y1","x2","y2","resetSizeAndPositionPointers","ttTextY","ttTextX","updateContent","topic","tooltipRight","tooltipLeftText","tooltipRightText","elementText","topicName","missingValue","value","text","textWrap","tooltipMaxTopicLength","textSize","node","getBBox","cx","cy","circleYOffset","r","colorMap","name","updatePositionAndSize","dataPoint","xPosition","tooltipOffset","updateTitle","tooltipTitleText","title","tooltipDateFormat","Date","date","updateTooltip","position","topics","forEach","xpos","words","word","line","lineNumber","lineHeight","tspan","split","reverse","parseFloat","pop","push","join","getComputedTextLength","time","format","show","_x","arguments","length","update","colorMapping","undefined"],"mappings":"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","file":"britecharts.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"d3\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"d3\"], factory);\n\telse {\n\t\tvar a = typeof exports === 'object' ? factory(require(\"d3\")) : factory(root[\"d3\"]);\n\t\tfor(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];\n\t}\n})(this, function(__WEBPACK_EXTERNAL_MODULE_1__) {\nreturn \n\n\n/** WEBPACK FOOTER **\n ** webpack/universalModuleDefinition\n **/","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"d3\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"d3\"], factory);\n\telse {\n\t\tvar a = typeof exports === 'object' ? factory(require(\"d3\")) : factory(root[\"d3\"]);\n\t\tfor(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];\n\t}\n})(this, function(__WEBPACK_EXTERNAL_MODULE_1__) {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_RESULT__;'use strict';\n\t\n\t!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {\n\t    'use strict';\n\t\n\t    var d3 = __webpack_require__(1);\n\t\n\t    /**\n\t     * @typdef D3Selection\n\t     * @type Array[]\n\t     */\n\t\n\t    /**\n\t     * @fileOverview Tooltip Component reusable API class that renders a\n\t     * simple and configurable tooltip element.\n\t     *\n\t     * @tutorial tooltip\n\t     * @exports charts/tooltip\n\t     * @requires d3\n\t     * @version 0.0.1\n\t     */\n\t    return function module() {\n\t\n\t        var margin = {\n\t            top: 2,\n\t            right: 2,\n\t            bottom: 2,\n\t            left: 2\n\t        },\n\t            width = 250,\n\t            height = 45,\n\t            title = 'Tooltip title',\n\t\n\t\n\t        // tooltip\n\t        tooltip,\n\t            tooltipOffset = {\n\t            y: -55,\n\t            x: 0\n\t        },\n\t            tooltipMaxTopicLength = 170,\n\t            tooltipTextContainer,\n\t            tooltipBackground,\n\t            tooltipDivider,\n\t            tooltipBody,\n\t            tooltipTitle,\n\t            tooltipWidth = 250,\n\t            tooltipHeight = 48,\n\t            ttTextX = 0,\n\t            ttTextY = 37,\n\t            textSize,\n\t            circleYOffset = 8,\n\t            colorMap,\n\t            tooltipDateFormat = d3.time.format('%B %d, %Y'),\n\t            chartWidth,\n\t            chartHeight,\n\t            data,\n\t            svg;\n\t\n\t        /**\n\t         * This function creates the graph using the selection as container\n\t         * @param  {D3Selection} _selection A d3 selection that represents\n\t         *                                  the container(s) where the chart(s) will be rendered\n\t         */\n\t        function exports(_selection) {\n\t            /* @param {object} _data The data to attach and generate the chart */\n\t            _selection.each(function (_data) {\n\t                chartWidth = width - margin.left - margin.right;\n\t                chartHeight = height - margin.top - margin.bottom;\n\t                data = _data;\n\t\n\t                buildSVG(this);\n\t            });\n\t        }\n\t\n\t        /**\n\t         * Builds containers for the tooltip\n\t         * Also applies the Margin convention\n\t         * @private\n\t         */\n\t        function buildContainerGroups() {\n\t            var container = svg.append('g').classed('tooltip-container-group', true).attr({\n\t                transform: 'translate(' + margin.left + ',' + margin.top + ')'\n\t            });\n\t\n\t            container.append('g').classed('tooltip-group', true);\n\t        }\n\t\n\t        /**\n\t         * Builds the SVG element that will contain the chart\n\t         * @param  {HTMLElement} container DOM element that will work as the container of the graph\n\t         * @private\n\t         */\n\t        function buildSVG(container) {\n\t            if (!svg) {\n\t                svg = d3.select(container).append('g').classed('britechart britechart-tooltip', true);\n\t\n\t                buildContainerGroups();\n\t                drawTooltip();\n\t            }\n\t            svg.transition().attr({\n\t                width: width + margin.left + margin.right,\n\t                height: height + margin.top + margin.bottom\n\t            });\n\t            // Hidden by default\n\t            exports.hide();\n\t        }\n\t\n\t        /**\n\t         * Resets the tooltipBody content\n\t         * @return void\n\t         */\n\t        function cleanContent() {\n\t            tooltipBody.selectAll('text').remove();\n\t            tooltipBody.selectAll('circle').remove();\n\t        }\n\t\n\t        /**\n\t         * Draws the different elements of the Tooltip box\n\t         * @return void\n\t         */\n\t        function drawTooltip() {\n\t            tooltipTextContainer = svg.selectAll('.tooltip-group').append('g').classed('tooltip-text', true);\n\t\n\t            tooltipBackground = tooltipTextContainer.append('rect').classed('tooltip-background', true).attr({\n\t                'x': -tooltipWidth / 4 + 10,\n\t                'y': 0,\n\t                'width': tooltipWidth,\n\t                'height': tooltipHeight - 1,\n\t                'rx': 3,\n\t                'ry': 3\n\t            });\n\t\n\t            tooltip = tooltipTextContainer.append('rect').classed('tooltip-text-container', true).attr({\n\t                'x': -tooltipWidth / 4 + 8,\n\t                'y': 0,\n\t                'width': tooltipWidth,\n\t                'height': tooltipHeight,\n\t                'rx': 3,\n\t                'ry': 3\n\t            }).style({\n\t                'fill': '#FFFFFF',\n\t                'stroke': '#D9D9D9',\n\t                'stroke-width': 1\n\t            });\n\t\n\t            tooltipTitle = tooltipTextContainer.append('text').classed('tooltip-title', true).attr({\n\t                'x': -tooltipWidth / 4 + 17,\n\t                'dy': '.35em',\n\t                'y': 16\n\t            }).style({\n\t                'fill': '#666666'\n\t            });\n\t\n\t            tooltipDivider = tooltipTextContainer.append('line').classed('tooltip-divider', true).attr({\n\t                'x1': -tooltipWidth / 4 + 15,\n\t                'y1': 31,\n\t                'x2': 265,\n\t                'y2': 31\n\t            }).style({\n\t                'stroke': '#D9D9D9'\n\t            });\n\t\n\t            tooltipBody = tooltipTextContainer.append('g').classed('tooltip-body', true).style({\n\t                'transform': 'translateY(8px)',\n\t                'fill': '#404040'\n\t            });\n\t        }\n\t\n\t        /**\n\t         * Resets the height of the tooltip and the pointer for the text\n\t         * position\n\t         */\n\t        function resetSizeAndPositionPointers() {\n\t            tooltipHeight = 48;\n\t            ttTextY = 37;\n\t            ttTextX = 0;\n\t        }\n\t\n\t        /**\n\t         * Draws the data entries inside the tooltip for a given topic\n\t         * @param  {obj} topic Topic to extract data from\n\t         * @return void\n\t         */\n\t        function updateContent(topic) {\n\t            var tooltipRight, tooltipLeftText, tooltipRightText, elementText;\n\t\n\t            tooltipLeftText = topic.topicName;\n\t\n\t            if (topic.missingValue) {\n\t                tooltipRightText = '-';\n\t            } else {\n\t                tooltipRightText = topic.value;\n\t            }\n\t\n\t            elementText = tooltipBody.append('text').classed('tooltip-left-text', true).attr({\n\t                'dy': '1em',\n\t                'x': ttTextX - 20,\n\t                'y': ttTextY\n\t            }).style('fill', 'black').text(tooltipLeftText).call(textWrap, tooltipMaxTopicLength, -25);\n\t\n\t            tooltipRight = tooltipBody.append('text').classed('tooltip-right-text', true).attr({\n\t                'dy': '1em',\n\t                'x': ttTextX + 8,\n\t                'y': ttTextY\n\t            }).style('fill', 'black').text(tooltipRightText);\n\t\n\t            textSize = elementText.node().getBBox();\n\t            tooltipHeight += textSize.height + 5;\n\t\n\t            // Not sure if necessary\n\t            tooltipRight.attr({\n\t                'x': tooltipWidth - tooltipRight.node().getBBox().width - 10 - tooltipWidth / 4\n\t            });\n\t\n\t            tooltipBody.append('circle').classed('tooltip-circle', true).attr({\n\t                'cx': 23 - tooltipWidth / 4,\n\t                'cy': ttTextY + circleYOffset,\n\t                'r': 5\n\t            }).style({\n\t                'fill': colorMap[topic.name],\n\t                'stroke-width': 1\n\t            });\n\t\n\t            ttTextY += textSize.height + 7;\n\t        }\n\t\n\t        /**\n\t         * Updates size and position of tooltip depending on the side of the chart we are in\n\t         * @param  {object} dataPoint DataPoint of the tooltip\n\t         * @param  {number} xPosition DataPoint's x position in the chart\n\t         * @return void\n\t         */\n\t        function updatePositionAndSize(dataPoint, xPosition) {\n\t            tooltip.attr({\n\t                'width': tooltipWidth,\n\t                'height': tooltipHeight + 10\n\t            });\n\t\n\t            tooltipBackground.attr({\n\t                'width': tooltipWidth - 3,\n\t                'height': tooltipHeight + 12\n\t            });\n\t\n\t            // show tooltip to the right\n\t            if (xPosition - tooltipWidth < 0) {\n\t                // Tooltip on the right\n\t                tooltipTextContainer.attr('transform', 'translate(' + (tooltipWidth - 185) + ',' + tooltipOffset.y + ')');\n\t            } else {\n\t                // Tooltip on the left\n\t                tooltipTextContainer.attr('transform', 'translate(' + -205 + ',' + tooltipOffset.y + ')');\n\t            }\n\t\n\t            tooltipDivider.attr({\n\t                'x2': tooltipWidth - 60\n\t            });\n\t        }\n\t\n\t        /**\n\t         * Updates value of tooltipTitle with the data meaning and the date\n\t         * @param  {obj} dataPoint Point of data to use as source\n\t         * @return void\n\t         */\n\t        function updateTitle(dataPoint) {\n\t            var tooltipTitleText = title + ' - ' + tooltipDateFormat(new Date(dataPoint.date));\n\t\n\t            tooltipTitle.text(tooltipTitleText);\n\t        }\n\t\n\t        /**\n\t         * Updates tooltip title, content, size and position\n\t         * @param  {object} dataPoint Current datapoint to show info about\n\t         * @return void\n\t         */\n\t        function updateTooltip(dataPoint, position) {\n\t            cleanContent();\n\t            resetSizeAndPositionPointers();\n\t            updateTitle(dataPoint);\n\t            dataPoint.topics.forEach(updateContent);\n\t            updatePositionAndSize(dataPoint, position);\n\t        }\n\t\n\t        /**\n\t         * Wraps a text given the text, width, x position and textFormatter function\n\t         * @param  {D3Selection} text  Selection with the text to wrap inside\n\t         * @param  {number} width Desired max width for that line\n\t         * @param  {number} xpos  Initial x position of the text\n\t         *\n\t         * REF: http://bl.ocks.org/mbostock/7555321\n\t         * More discussions on https://github.com/mbostock/d3/issues/1642\n\t         */\n\t        function textWrap(text, width, xpos) {\n\t            xpos = xpos || 0;\n\t\n\t            text.each(function () {\n\t                var words, word, line, lineNumber, lineHeight, y, dy, tspan;\n\t\n\t                text = d3.select(this);\n\t\n\t                words = text.text().split(/\\s+/).reverse();\n\t                line = [];\n\t                lineNumber = 0;\n\t                lineHeight = 1.2;\n\t                y = text.attr('y');\n\t                dy = parseFloat(text.attr('dy'));\n\t                tspan = text.text(null).append('tspan').attr({\n\t                    'x': xpos,\n\t                    'y': y,\n\t                    'dy': dy + 'em'\n\t                });\n\t\n\t                while (word = words.pop()) {\n\t                    line.push(word);\n\t                    tspan.text(line.join(' '));\n\t                    if (tspan.node().getComputedTextLength() > width) {\n\t                        line.pop();\n\t                        tspan.text(line.join(' '));\n\t                        line = [word];\n\t                        tspan = text.append('tspan').attr('x', xpos).attr('y', y).attr('dy', ++lineNumber * lineHeight + dy + 'em').text(word);\n\t                    }\n\t                }\n\t            });\n\t        }\n\t\n\t        /**\n\t         * Hides the tooltip\n\t         * @return {module} Tooltip module to chain calls\n\t         * @public\n\t         */\n\t        exports.hide = function () {\n\t            svg.style('display', 'none');\n\t\n\t            return this;\n\t        };\n\t\n\t        /**\n\t         * Shows the tooltip\n\t         * @return {module} Tooltip module to chain calls\n\t         * @public\n\t         */\n\t        exports.show = function () {\n\t            svg.style('display', 'block');\n\t\n\t            return this;\n\t        };\n\t\n\t        /**\n\t         * Gets or Sets the title of the tooltip\n\t         * @param  {string} _x Desired title\n\t         * @return { string | module} Current title or module to chain calls\n\t         * @public\n\t         */\n\t        exports.title = function (_x) {\n\t            if (!arguments.length) {\n\t                return title;\n\t            }\n\t            title = _x;\n\t            return this;\n\t        };\n\t\n\t        /**\n\t         * Updates the position and content of the tooltip\n\t         * @param  {obj} dataPoint    Datapoint to represent\n\t         * @param  {obj} colorMapping Color scheme of the topics\n\t         * @param  {number} position     X-scale position in pixels\n\t         * @return {module} Tooltip module to chain calls\n\t         * @public\n\t         */\n\t        exports.update = function (dataPoint, colorMapping, position) {\n\t            colorMap = colorMapping;\n\t            updateTooltip(dataPoint, position);\n\t\n\t            return this;\n\t        };\n\t\n\t        return exports;\n\t    };\n\t}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n/***/ },\n/* 1 */\n/***/ function(module, exports) {\n\n\tmodule.exports = __WEBPACK_EXTERNAL_MODULE_1__;\n\n/***/ }\n/******/ ])\n});\n;\n\n\n/** WEBPACK FOOTER **\n ** britecharts.min.js\n **/"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap 739289ae8745c5a57f25\n **/","define(function(require){\n    'use strict';\n\n    var d3 = require('d3');\n\n    /**\n     * @typdef D3Selection\n     * @type Array[]\n     */\n\n    /**\n     * @fileOverview Tooltip Component reusable API class that renders a\n     * simple and configurable tooltip element.\n     *\n     * @tutorial tooltip\n     * @exports charts/tooltip\n     * @requires d3\n     * @version 0.0.1\n     */\n    return function module() {\n\n        var margin = {\n                top: 2,\n                right: 2,\n                bottom: 2,\n                left: 2\n            },\n            width = 250,\n            height = 45,\n\n            title = 'Tooltip title',\n\n            // tooltip\n            tooltip,\n            tooltipOffset = {\n                y: -55,\n                x: 0\n            },\n            tooltipMaxTopicLength = 170,\n            tooltipTextContainer,\n            tooltipBackground,\n            tooltipDivider,\n            tooltipBody,\n            tooltipTitle,\n            tooltipWidth = 250,\n            tooltipHeight = 48,\n            ttTextX = 0,\n            ttTextY = 37,\n            textSize,\n\n            circleYOffset = 8,\n\n            colorMap,\n\n            tooltipDateFormat = d3.time.format('%B %d, %Y'),\n\n            chartWidth, chartHeight,\n            data,\n            svg;\n\n\n        /**\n         * This function creates the graph using the selection as container\n         * @param  {D3Selection} _selection A d3 selection that represents\n         *                                  the container(s) where the chart(s) will be rendered\n         */\n        function exports(_selection) {\n            /* @param {object} _data The data to attach and generate the chart */\n            _selection.each(function(_data){\n                chartWidth = width - margin.left - margin.right;\n                chartHeight = height - margin.top - margin.bottom;\n                data = _data;\n\n                buildSVG(this);\n            });\n        }\n\n        /**\n         * Builds containers for the tooltip\n         * Also applies the Margin convention\n         * @private\n         */\n        function buildContainerGroups() {\n            var container = svg.append('g')\n                .classed('tooltip-container-group', true)\n                .attr({\n                    transform: 'translate(' + margin.left + ',' + margin.top + ')'\n                });\n\n            container.append('g').classed('tooltip-group', true);\n        }\n\n        /**\n         * Builds the SVG element that will contain the chart\n         * @param  {HTMLElement} container DOM element that will work as the container of the graph\n         * @private\n         */\n        function buildSVG(container) {\n            if (!svg) {\n                svg = d3.select(container)\n                    .append('g')\n                    .classed('britechart britechart-tooltip', true);\n\n                buildContainerGroups();\n                drawTooltip();\n            }\n            svg.transition().attr({\n                width: width + margin.left + margin.right,\n                height: height + margin.top + margin.bottom\n            });\n            // Hidden by default\n            exports.hide();\n        }\n\n        /**\n         * Resets the tooltipBody content\n         * @return void\n         */\n        function cleanContent(){\n            tooltipBody.selectAll('text').remove();\n            tooltipBody.selectAll('circle').remove();\n        }\n\n        /**\n         * Draws the different elements of the Tooltip box\n         * @return void\n         */\n        function drawTooltip(){\n            tooltipTextContainer = svg.selectAll('.tooltip-group')\n                .append('g')\n                .classed('tooltip-text', true);\n\n            tooltipBackground = tooltipTextContainer\n                .append('rect')\n                .classed('tooltip-background', true)\n                .attr({\n                    'x': -tooltipWidth / 4 + 10,\n                    'y': 0,\n                    'width': tooltipWidth,\n                    'height': tooltipHeight-1,\n                    'rx': 3,\n                    'ry': 3\n                });\n\n            tooltip = tooltipTextContainer\n                .append('rect')\n                .classed('tooltip-text-container', true)\n                .attr({\n                    'x': -tooltipWidth / 4 + 8,\n                    'y': 0,\n                    'width': tooltipWidth,\n                    'height': tooltipHeight,\n                    'rx': 3,\n                    'ry': 3\n                })\n                .style({\n                    'fill': '#FFFFFF',\n                    'stroke': '#D9D9D9',\n                    'stroke-width': 1\n                });\n\n            tooltipTitle = tooltipTextContainer\n                .append('text')\n                .classed('tooltip-title', true)\n                .attr({\n                    'x': -tooltipWidth / 4 + 17,\n                    'dy': '.35em',\n                    'y': 16\n                })\n                .style({\n                    'fill': '#666666'\n                });\n\n            tooltipDivider = tooltipTextContainer\n                .append('line')\n                .classed('tooltip-divider', true)\n                .attr({\n                    'x1': -tooltipWidth / 4 + 15,\n                    'y1': 31,\n                    'x2': 265,\n                    'y2': 31\n                })\n                .style({\n                    'stroke': '#D9D9D9'\n                });\n\n            tooltipBody = tooltipTextContainer\n                .append('g')\n                .classed('tooltip-body', true)\n                .style({\n                    'transform': 'translateY(8px)',\n                    'fill': '#404040'\n                });\n        }\n\n        /**\n         * Resets the height of the tooltip and the pointer for the text\n         * position\n         */\n        function resetSizeAndPositionPointers() {\n            tooltipHeight = 48;\n            ttTextY = 37;\n            ttTextX = 0;\n        }\n\n        /**\n         * Draws the data entries inside the tooltip for a given topic\n         * @param  {obj} topic Topic to extract data from\n         * @return void\n         */\n        function updateContent(topic){\n            var tooltipRight,\n                tooltipLeftText,\n                tooltipRightText,\n                elementText;\n\n            tooltipLeftText = topic.topicName;\n\n            if (topic.missingValue) {\n                tooltipRightText = '-';\n            } else {\n                tooltipRightText = topic.value;\n            }\n\n            elementText = tooltipBody\n                .append('text')\n                .classed('tooltip-left-text', true)\n                .attr({\n                    'dy': '1em',\n                    'x': ttTextX - 20,\n                    'y': ttTextY\n                })\n                .style('fill', 'black')\n                .text(tooltipLeftText)\n                .call(textWrap, tooltipMaxTopicLength, -25);\n\n            tooltipRight = tooltipBody\n                .append('text')\n                .classed('tooltip-right-text', true)\n                .attr({\n                    'dy': '1em',\n                    'x': ttTextX + 8,\n                    'y': ttTextY\n                })\n                .style('fill', 'black')\n                .text(tooltipRightText);\n\n            textSize = elementText.node().getBBox();\n            tooltipHeight += textSize.height + 5;\n\n            // Not sure if necessary\n            tooltipRight.attr({\n                'x': tooltipWidth - tooltipRight.node().getBBox().width - 10 - tooltipWidth / 4\n            });\n\n            tooltipBody\n                .append('circle')\n                .classed('tooltip-circle', true)\n                .attr({\n                    'cx': 23 - tooltipWidth / 4,\n                    'cy': (ttTextY + circleYOffset),\n                    'r': 5\n                })\n                .style({\n                    'fill': colorMap[topic.name],\n                    'stroke-width': 1\n                });\n\n            ttTextY += textSize.height + 7;\n        }\n\n        /**\n         * Updates size and position of tooltip depending on the side of the chart we are in\n         * @param  {object} dataPoint DataPoint of the tooltip\n         * @param  {number} xPosition DataPoint's x position in the chart\n         * @return void\n         */\n        function updatePositionAndSize(dataPoint, xPosition){\n            tooltip\n                .attr({\n                    'width': tooltipWidth,\n                    'height': tooltipHeight + 10\n                });\n\n            tooltipBackground\n                .attr({\n                    'width': tooltipWidth - 3,\n                    'height': tooltipHeight + 12\n                });\n\n\n            // show tooltip to the right\n            if ((xPosition - tooltipWidth) < 0) {\n                // Tooltip on the right\n                tooltipTextContainer\n                    .attr('transform', 'translate(' + (tooltipWidth - 185) + ',' + tooltipOffset.y + ')');\n            } else {\n                // Tooltip on the left\n                tooltipTextContainer\n                    .attr('transform', 'translate(' + (-205) + ',' + tooltipOffset.y + ')');\n            }\n\n            tooltipDivider\n                .attr({\n                    'x2': tooltipWidth - 60\n                });\n        }\n\n        /**\n         * Updates value of tooltipTitle with the data meaning and the date\n         * @param  {obj} dataPoint Point of data to use as source\n         * @return void\n         */\n        function updateTitle(dataPoint) {\n            var tooltipTitleText = title + ' - ' + tooltipDateFormat(new Date(dataPoint.date));\n\n            tooltipTitle.text(tooltipTitleText);\n        }\n\n        /**\n         * Updates tooltip title, content, size and position\n         * @param  {object} dataPoint Current datapoint to show info about\n         * @return void\n         */\n        function updateTooltip(dataPoint, position) {\n            cleanContent();\n            resetSizeAndPositionPointers();\n            updateTitle(dataPoint);\n            dataPoint.topics.forEach(updateContent);\n            updatePositionAndSize(dataPoint, position);\n        }\n\n        /**\n         * Wraps a text given the text, width, x position and textFormatter function\n         * @param  {D3Selection} text  Selection with the text to wrap inside\n         * @param  {number} width Desired max width for that line\n         * @param  {number} xpos  Initial x position of the text\n         *\n         * REF: http://bl.ocks.org/mbostock/7555321\n         * More discussions on https://github.com/mbostock/d3/issues/1642\n         */\n        function textWrap(text, width, xpos) {\n            xpos = xpos || 0;\n\n            text.each(function() {\n                var words,\n                    word,\n                    line,\n                    lineNumber,\n                    lineHeight,\n                    y,\n                    dy,\n                    tspan;\n\n                text = d3.select(this);\n\n                words = text.text().split(/\\s+/).reverse();\n                line = [];\n                lineNumber = 0;\n                lineHeight = 1.2;\n                y = text.attr('y');\n                dy = parseFloat(text.attr('dy'));\n                tspan = text\n                    .text(null)\n                    .append('tspan')\n                    .attr({\n                        'x': xpos,\n                        'y': y,\n                        'dy': dy + 'em'\n                    });\n\n                while ((word = words.pop())) {\n                    line.push(word);\n                    tspan.text(line.join(' '));\n                    if (tspan.node().getComputedTextLength() > width) {\n                        line.pop();\n                        tspan.text(line.join(' '));\n                        line = [word];\n                        tspan = text.append('tspan')\n                            .attr('x', xpos)\n                            .attr('y', y)\n                            .attr('dy', ++lineNumber * lineHeight + dy + 'em')\n                            .text(word);\n                    }\n                }\n            });\n        }\n\n        /**\n         * Hides the tooltip\n         * @return {module} Tooltip module to chain calls\n         * @public\n         */\n        exports.hide = function() {\n            svg.style('display', 'none');\n\n            return this;\n        };\n\n        /**\n         * Shows the tooltip\n         * @return {module} Tooltip module to chain calls\n         * @public\n         */\n        exports.show = function() {\n            svg.style('display', 'block');\n\n            return this;\n        };\n\n        /**\n         * Gets or Sets the title of the tooltip\n         * @param  {string} _x Desired title\n         * @return { string | module} Current title or module to chain calls\n         * @public\n         */\n        exports.title = function(_x) {\n            if (!arguments.length) {\n                return title;\n            }\n            title = _x;\n            return this;\n        };\n\n        /**\n         * Updates the position and content of the tooltip\n         * @param  {obj} dataPoint    Datapoint to represent\n         * @param  {obj} colorMapping Color scheme of the topics\n         * @param  {number} position     X-scale position in pixels\n         * @return {module} Tooltip module to chain calls\n         * @public\n         */\n        exports.update = function(dataPoint, colorMapping, position) {\n            colorMap = colorMapping;\n            updateTooltip(dataPoint, position);\n\n            return this;\n        };\n\n        return exports;\n\n    };\n\n});\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/charts/tooltip.js\n **/","module.exports = __WEBPACK_EXTERNAL_MODULE_1__;\n\n\n/*****************\n ** WEBPACK FOOTER\n ** external \"d3\"\n ** module id = 1\n ** module chunks = 0 1 2 3 4\n **/"],"sourceRoot":""}