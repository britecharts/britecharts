{"version":3,"sources":["webpack:///webpack/universalModuleDefinition?5ca6********","webpack:///britecharts.min.js?3d71********","webpack:///webpack/bootstrap 375d19a8180a174898b6?e263********","webpack:///./src/charts/tooltip.js?86d8********","webpack:///external \"d3\"?c0c4********"],"names":["root","factory","exports","module","require","define","amd","a","d3","i","this","__WEBPACK_EXTERNAL_MODULE_1__","modules","__webpack_require__","moduleId","installedModules","id","loaded","call","m","c","p","__WEBPACK_AMD_DEFINE_RESULT__","_selection","each","_data","chartWidth","width","margin","left","right","chartHeight","height","top","bottom","data","buildSVG","buildContainerGroups","container","svg","append","classed","attr","transform","select","drawTooltip","transition","hide","cleanContent","tooltipBody","selectAll","remove","tooltipTextContainer","tooltip","x","tooltipWidth","y","tooltipHeight","rx","ry","style","fill","bodyFillColor","stroke","borderStrokeColor","stroke-width","tooltipTitle","dy","titleFillColor","tooltipDivider","x1","y1","x2","y2","textFillColor","formatDecimalValue","value","size","valueRangeLimits","small","medium","decimalValueFormats","formatIntegerValue","integerValueFormats","getFormattedValue","isInteger","getValueText","views","valueText","missingValue","toString","resetSizeAndPositionPointers","ttTextY","ttTextX","updateContent","topic","name","tooltipRight","tooltipLeftText","tooltipRightText","elementText","topicName","tooltipTextColor","text","textWrap","tooltipMaxTopicLength","textSize","node","getBBox","cx","cy","circleYOffset","r","colorMap","updatePositionAndSize","dataPoint","xPosition","tooltipOffset","updateTitle","date","Date","key","tooltipTitleText","title","tooltipDateFormat","updateTooltip","topics","values","forEach","xpos","words","word","line","lineNumber","lineHeight","tspan","split","reverse","parseFloat","pop","push","join","getComputedTextLength","entryLineLimit","time","format","large","show","_x","arguments","length","update","colorMapping","position","undefined"],"mappings":"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","file":"britecharts.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"d3\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"d3\"], factory);\n\telse {\n\t\tvar a = typeof exports === 'object' ? factory(require(\"d3\")) : factory(root[\"d3\"]);\n\t\tfor(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];\n\t}\n})(this, function(__WEBPACK_EXTERNAL_MODULE_1__) {\nreturn \n\n\n/** WEBPACK FOOTER **\n ** webpack/universalModuleDefinition\n **/","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"d3\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"d3\"], factory);\n\telse {\n\t\tvar a = typeof exports === 'object' ? factory(require(\"d3\")) : factory(root[\"d3\"]);\n\t\tfor(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];\n\t}\n})(this, function(__WEBPACK_EXTERNAL_MODULE_1__) {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_RESULT__;'use strict';\n\t\n\t!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {\n\t    'use strict';\n\t\n\t    var d3 = __webpack_require__(1);\n\t\n\t    /**\n\t     * Tooltip Component reusable API class that renders a\n\t     * simple and configurable tooltip element for Britechart's\n\t     * line chart or stacked area chart.\n\t     *\n\t     * @module Tooltip\n\t     * @version 0.0.1\n\t     * @tutorial tooltip\n\t     * @requires d3\n\t     *\n\t     * @example\n\t     * var lineChart = line(),\n\t     *     tooltip = tooltip();\n\t     *\n\t     * tooltip\n\t     *     .title('Tooltip title');\n\t     *\n\t     * lineChart\n\t     *     .width(500)\n\t     *     .on('customMouseOver', function() {\n\t     *          tooltip.show();\n\t     *     })\n\t     *     .on('customMouseMove', function(dataPoint, topicColorMap, dataPointXPosition) {\n\t     *          tooltip.update(dataPoint, topicColorMap, dataPointXPosition);\n\t     *     })\n\t     *     .on('customMouseOut', function() {\n\t     *          tooltip.hide();\n\t     *     });\n\t     *\n\t     * d3.select('.css-selector')\n\t     *     .datum(dataset)\n\t     *     .call(lineChart);\n\t     *\n\t     * d3.select('.metadata-group .hover-marker')\n\t     *     .datum([])\n\t     *     .call(tooltip);\n\t     *\n\t     */\n\t    return function module() {\n\t\n\t        var margin = {\n\t            top: 2,\n\t            right: 2,\n\t            bottom: 2,\n\t            left: 2\n\t        },\n\t            width = 250,\n\t            height = 45,\n\t            title = 'Tooltip title',\n\t\n\t\n\t        // tooltip\n\t        tooltip = void 0,\n\t            tooltipOffset = {\n\t            y: -55,\n\t            x: 0\n\t        },\n\t            tooltipMaxTopicLength = 170,\n\t            tooltipTextContainer = void 0,\n\t            tooltipDivider = void 0,\n\t            tooltipBody = void 0,\n\t            tooltipTitle = void 0,\n\t            tooltipWidth = 250,\n\t            tooltipHeight = 48,\n\t            ttTextX = 0,\n\t            ttTextY = 37,\n\t            textSize = void 0,\n\t            entryLineLimit = 3,\n\t            circleYOffset = 8,\n\t            colorMap = void 0,\n\t            bodyFillColor = '#FFFFFF',\n\t            borderStrokeColor = '#D2D6DF',\n\t            titleFillColor = '#6D717A',\n\t            textFillColor = '#282C35',\n\t            tooltipTextColor = '#000000',\n\t\n\t\n\t        // formats\n\t        tooltipDateFormat = d3.time.format('%b %d, %Y'),\n\t            valueRangeLimits = {\n\t            small: 10,\n\t            medium: 100\n\t        },\n\t            integerValueFormats = {\n\t            small: d3.format(''),\n\t            medium: d3.format(''),\n\t            large: d3.format('.2s')\n\t        },\n\t            decimalValueFormats = {\n\t            small: d3.format('.3f'),\n\t            medium: d3.format('.1f'),\n\t            large: d3.format('.2s')\n\t        },\n\t            chartWidth = void 0,\n\t            chartHeight = void 0,\n\t            data = void 0,\n\t            svg = void 0;\n\t\n\t        /**\n\t         * This function creates the graph using the selection as container\n\t         * @param {D3Selection} _selection A d3 selection that represents\n\t         *                                  the container(s) where the chart(s) will be rendered\n\t         * @param {Object} _data The data to attach and generate the chart\n\t         */\n\t        function exports(_selection) {\n\t            _selection.each(function (_data) {\n\t                chartWidth = width - margin.left - margin.right;\n\t                chartHeight = height - margin.top - margin.bottom;\n\t                data = _data;\n\t\n\t                buildSVG(this);\n\t            });\n\t        }\n\t\n\t        /**\n\t         * Builds containers for the tooltip\n\t         * Also applies the Margin convention\n\t         * @private\n\t         */\n\t        function buildContainerGroups() {\n\t            var container = svg.append('g').classed('tooltip-container-group', true).attr({\n\t                transform: 'translate( ' + margin.left + ', ' + margin.top + ')'\n\t            });\n\t\n\t            container.append('g').classed('tooltip-group', true);\n\t        }\n\t\n\t        /**\n\t         * Builds the SVG element that will contain the chart\n\t         * @param  {HTMLElement} container DOM element that will work as the container of the graph\n\t         * @private\n\t         */\n\t        function buildSVG(container) {\n\t            if (!svg) {\n\t                svg = d3.select(container).append('g').classed('britechart britechart-tooltip', true);\n\t\n\t                buildContainerGroups();\n\t                drawTooltip();\n\t            }\n\t            svg.transition().attr({\n\t                width: width + margin.left + margin.right,\n\t                height: height + margin.top + margin.bottom\n\t            });\n\t            // Hidden by default\n\t            exports.hide();\n\t        }\n\t\n\t        /**\n\t         * Resets the tooltipBody content\n\t         * @return void\n\t         */\n\t        function cleanContent() {\n\t            tooltipBody.selectAll('text').remove();\n\t            tooltipBody.selectAll('circle').remove();\n\t        }\n\t\n\t        /**\n\t         * Draws the different elements of the Tooltip box\n\t         * @return void\n\t         */\n\t        function drawTooltip() {\n\t            tooltipTextContainer = svg.selectAll('.tooltip-group').append('g').classed('tooltip-text', true);\n\t\n\t            tooltip = tooltipTextContainer.append('rect').classed('tooltip-text-container', true).attr({\n\t                'x': -tooltipWidth / 4 + 8,\n\t                'y': 0,\n\t                'width': tooltipWidth,\n\t                'height': tooltipHeight,\n\t                'rx': 3,\n\t                'ry': 3\n\t            }).style({\n\t                'fill': bodyFillColor,\n\t                'stroke': borderStrokeColor,\n\t                'stroke-width': 1\n\t            });\n\t\n\t            tooltipTitle = tooltipTextContainer.append('text').classed('tooltip-title', true).attr({\n\t                'x': -tooltipWidth / 4 + 17,\n\t                'dy': '.35em',\n\t                'y': 16\n\t            }).style({\n\t                'fill': titleFillColor\n\t            });\n\t\n\t            tooltipDivider = tooltipTextContainer.append('line').classed('tooltip-divider', true).attr({\n\t                'x1': -tooltipWidth / 4 + 15,\n\t                'y1': 31,\n\t                'x2': 265,\n\t                'y2': 31\n\t            }).style({\n\t                'stroke': borderStrokeColor\n\t            });\n\t\n\t            tooltipBody = tooltipTextContainer.append('g').classed('tooltip-body', true).style({\n\t                'transform': 'translateY(8px)',\n\t                'fill': textFillColor\n\t            });\n\t        }\n\t\n\t        /**\n\t         * Formats a floating point value depending on its value range\n\t         * @param  {Number} value Decimal point value to format\n\t         * @return {Number}       Formatted value to show\n\t         */\n\t        function formatDecimalValue(value) {\n\t            var size = 'large';\n\t\n\t            if (value < valueRangeLimits.small) {\n\t                size = 'small';\n\t            } else if (value < valueRangeLimits.medium) {\n\t                size = 'medium';\n\t            }\n\t\n\t            return decimalValueFormats[size](value);\n\t        }\n\t\n\t        /**\n\t         * Formats an integer value depending on its value range\n\t         * @param  {Number} value Decimal point value to format\n\t         * @return {Number}       Formatted value to show\n\t         */\n\t        function formatIntegerValue(value) {\n\t            var size = 'large';\n\t\n\t            if (value < valueRangeLimits.small) {\n\t                size = 'small';\n\t            }if (value < valueRangeLimits.medium) {\n\t                size = 'medium';\n\t            }\n\t\n\t            return integerValueFormats[size](value);\n\t        }\n\t\n\t        /**\n\t         * Formats the value depending on its characteristics\n\t         * @param  {Number} value Value to format\n\t         * @return {Number}       Formatted value\n\t         */\n\t        function getFormattedValue(value) {\n\t            if (!value) {\n\t                return 0;\n\t            }\n\t\n\t            if (isInteger(value)) {\n\t                value = formatIntegerValue(value);\n\t            } else {\n\t                value = formatDecimalValue(value);\n\t            }\n\t\n\t            return value;\n\t        }\n\t\n\t        /**\n\t         * Extracts the value from the data object\n\t         * @param  {Object} data Data value containing the info\n\t         * @return {String}      Value to show\n\t         */\n\t        function getValueText(data) {\n\t            var value = data.value ? data.value : data.views;\n\t            var valueText = void 0;\n\t\n\t            if (data.missingValue) {\n\t                valueText = '-';\n\t            } else {\n\t                valueText = getFormattedValue(value).toString();\n\t            }\n\t\n\t            return valueText;\n\t        }\n\t\n\t        /**\n\t         * Checks if a number is an integer of has decimal values\n\t         * @param  {Number}  value Value to check\n\t         * @return {Boolean}       If it is an iteger\n\t         */\n\t        function isInteger(value) {\n\t            return value % 1 === 0;\n\t        }\n\t\n\t        /**\n\t         * Resets the height of the tooltip and the pointer for the text\n\t         * position\n\t         */\n\t        function resetSizeAndPositionPointers() {\n\t            tooltipHeight = 48;\n\t            ttTextY = 37;\n\t            ttTextX = 0;\n\t        }\n\t\n\t        /**\n\t         * Draws the data entries inside the tooltip for a given topic\n\t         * @param  {Object} topic Topic to extract data from\n\t         * @return void\n\t         */\n\t        function updateContent(topic) {\n\t            var name = topic.name,\n\t                tooltipRight = void 0,\n\t                tooltipLeftText = void 0,\n\t                tooltipRightText = void 0,\n\t                elementText = void 0;\n\t\n\t            tooltipLeftText = topic.topicName || name;\n\t            tooltipRightText = getValueText(topic);\n\t\n\t            elementText = tooltipBody.append('text').classed('tooltip-left-text', true).attr({\n\t                'dy': '1em',\n\t                'x': ttTextX - 20,\n\t                'y': ttTextY\n\t            }).style('fill', tooltipTextColor).text(tooltipLeftText).call(textWrap, tooltipMaxTopicLength, -25);\n\t\n\t            tooltipRight = tooltipBody.append('text').classed('tooltip-right-text', true).attr({\n\t                'dy': '1em',\n\t                'x': ttTextX + 8,\n\t                'y': ttTextY\n\t            }).style('fill', tooltipTextColor).text(tooltipRightText);\n\t\n\t            textSize = elementText.node().getBBox();\n\t            tooltipHeight += textSize.height + 5;\n\t\n\t            // Not sure if necessary\n\t            tooltipRight.attr({\n\t                'x': tooltipWidth - tooltipRight.node().getBBox().width - 10 - tooltipWidth / 4\n\t            });\n\t\n\t            tooltipBody.append('circle').classed('tooltip-circle', true).attr({\n\t                'cx': 23 - tooltipWidth / 4,\n\t                'cy': ttTextY + circleYOffset,\n\t                'r': 5\n\t            }).style({\n\t                'fill': colorMap[name],\n\t                'stroke-width': 1\n\t            });\n\t\n\t            ttTextY += textSize.height + 7;\n\t        }\n\t\n\t        /**\n\t         * Updates size and position of tooltip depending on the side of the chart we are in\n\t         * @param  {Object} dataPoint DataPoint of the tooltip\n\t         * @param  {Number} xPosition DataPoint's x position in the chart\n\t         * @return void\n\t         */\n\t        function updatePositionAndSize(dataPoint, xPosition) {\n\t            tooltip.attr({\n\t                'width': tooltipWidth,\n\t                'height': tooltipHeight + 10\n\t            });\n\t\n\t            // show tooltip to the right\n\t            if (xPosition - tooltipWidth < 0) {\n\t                // Tooltip on the right\n\t                tooltipTextContainer.attr('transform', 'translate(' + (tooltipWidth - 185) + ',' + tooltipOffset.y + ')');\n\t            } else {\n\t                // Tooltip on the left\n\t                tooltipTextContainer.attr('transform', 'translate(' + -205 + ',' + tooltipOffset.y + ')');\n\t            }\n\t\n\t            tooltipDivider.attr({\n\t                'x2': tooltipWidth - 60\n\t            });\n\t        }\n\t\n\t        /**\n\t         * Updates value of tooltipTitle with the data meaning and the date\n\t         * @param  {Object} dataPoint Point of data to use as source\n\t         * @return void\n\t         */\n\t        function updateTitle(dataPoint) {\n\t            var date = dataPoint.date ? new Date(dataPoint.date) : new Date(dataPoint.key),\n\t                tooltipTitleText = title + ' - ' + tooltipDateFormat(date);\n\t\n\t            tooltipTitle.text(tooltipTitleText);\n\t        }\n\t\n\t        /**\n\t         * Updates tooltip title, content, size and position\n\t         *\n\t         * @param  {lineChartPointByDate} dataPoint  Current datapoint to show info about\n\t         * @param  {Number} xPosition           Position of the mouse on the X axis\n\t         * @return void\n\t         */\n\t        function updateTooltip(dataPoint, xPosition) {\n\t            var topics = dataPoint.topics ? dataPoint.topics : dataPoint.values;\n\t\n\t            cleanContent();\n\t            resetSizeAndPositionPointers();\n\t            updateTitle(dataPoint);\n\t            topics.forEach(updateContent);\n\t            updatePositionAndSize(dataPoint, xPosition);\n\t        }\n\t\n\t        /**\n\t         * Wraps a text given the text, width, x position and textFormatter function\n\t         * @param  {D3Selection} text  Selection with the text to wrap inside\n\t         * @param  {Number} width Desired max width for that line\n\t         * @param  {Number} xpos  Initial x position of the text\n\t         *\n\t         * REF: http://bl.ocks.org/mbostock/7555321\n\t         * More discussions on https://github.com/mbostock/d3/issues/1642\n\t         */\n\t        function textWrap(text, width, xpos) {\n\t            xpos = xpos || 0;\n\t\n\t            text.each(function () {\n\t                var words, word, line, lineNumber, lineHeight, y, dy, tspan;\n\t\n\t                text = d3.select(this);\n\t\n\t                words = text.text().split(/\\s+/).reverse();\n\t                line = [];\n\t                lineNumber = 0;\n\t                lineHeight = 1.2;\n\t                y = text.attr('y');\n\t                dy = parseFloat(text.attr('dy'));\n\t                tspan = text.text(null).append('tspan').attr({\n\t                    'x': xpos,\n\t                    'y': y,\n\t                    'dy': dy + 'em'\n\t                });\n\t\n\t                while (word = words.pop()) {\n\t                    line.push(word);\n\t                    tspan.text(line.join(' '));\n\t\n\t                    if (tspan.node().getComputedTextLength() > width) {\n\t                        line.pop();\n\t                        tspan.text(line.join(' '));\n\t\n\t                        if (lineNumber < entryLineLimit - 1) {\n\t                            line = [word];\n\t                            tspan = text.append('tspan').attr('x', xpos).attr('y', y).attr('dy', ++lineNumber * lineHeight + dy + 'em').text(word);\n\t                        }\n\t                    }\n\t                }\n\t            });\n\t        }\n\t\n\t        /**\n\t         * Hides the tooltip\n\t         * @return {Module} Tooltip module to chain calls\n\t         * @public\n\t         */\n\t        exports.hide = function () {\n\t            svg.style('display', 'none');\n\t\n\t            return this;\n\t        };\n\t\n\t        /**\n\t         * Shows the tooltip\n\t         * @return {Module} Tooltip module to chain calls\n\t         * @public\n\t         */\n\t        exports.show = function () {\n\t            svg.style('display', 'block');\n\t\n\t            return this;\n\t        };\n\t\n\t        /**\n\t         * Gets or Sets the title of the tooltip\n\t         * @param  {string} _x Desired title\n\t         * @return { string | module} Current title or module to chain calls\n\t         * @public\n\t         */\n\t        exports.title = function (_x) {\n\t            if (!arguments.length) {\n\t                return title;\n\t            }\n\t            title = _x;\n\t            return this;\n\t        };\n\t\n\t        /**\n\t         * Updates the position and content of the tooltip\n\t         * @param  {Object} dataPoint    Datapoint to represent\n\t         * @param  {Object} colorMapping Color scheme of the topics\n\t         * @param  {Number} position     X-scale position in pixels\n\t         * @return {Module} Tooltip module to chain calls\n\t         * @public\n\t         */\n\t        exports.update = function (dataPoint, colorMapping, position) {\n\t            colorMap = colorMapping;\n\t            updateTooltip(dataPoint, position);\n\t\n\t            return this;\n\t        };\n\t\n\t        return exports;\n\t    };\n\t}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n/***/ },\n/* 1 */\n/***/ function(module, exports) {\n\n\tmodule.exports = __WEBPACK_EXTERNAL_MODULE_1__;\n\n/***/ }\n/******/ ])\n});\n;\n\n\n/** WEBPACK FOOTER **\n ** britecharts.min.js\n **/"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap 375d19a8180a174898b6\n **/","define(function(require){\n    'use strict';\n\n    const d3 = require('d3');\n\n\n    /**\n     * Tooltip Component reusable API class that renders a\n     * simple and configurable tooltip element for Britechart's\n     * line chart or stacked area chart.\n     *\n     * @module Tooltip\n     * @version 0.0.1\n     * @tutorial tooltip\n     * @requires d3\n     *\n     * @example\n     * var lineChart = line(),\n     *     tooltip = tooltip();\n     *\n     * tooltip\n     *     .title('Tooltip title');\n     *\n     * lineChart\n     *     .width(500)\n     *     .on('customMouseOver', function() {\n     *          tooltip.show();\n     *     })\n     *     .on('customMouseMove', function(dataPoint, topicColorMap, dataPointXPosition) {\n     *          tooltip.update(dataPoint, topicColorMap, dataPointXPosition);\n     *     })\n     *     .on('customMouseOut', function() {\n     *          tooltip.hide();\n     *     });\n     *\n     * d3.select('.css-selector')\n     *     .datum(dataset)\n     *     .call(lineChart);\n     *\n     * d3.select('.metadata-group .hover-marker')\n     *     .datum([])\n     *     .call(tooltip);\n     *\n     */\n    return function module() {\n\n        let margin = {\n                top: 2,\n                right: 2,\n                bottom: 2,\n                left: 2\n            },\n            width = 250,\n            height = 45,\n\n            title = 'Tooltip title',\n\n            // tooltip\n            tooltip,\n            tooltipOffset = {\n                y: -55,\n                x: 0\n            },\n            tooltipMaxTopicLength = 170,\n            tooltipTextContainer,\n            tooltipDivider,\n            tooltipBody,\n            tooltipTitle,\n            tooltipWidth = 250,\n            tooltipHeight = 48,\n            ttTextX = 0,\n            ttTextY = 37,\n            textSize,\n            entryLineLimit = 3,\n\n            circleYOffset = 8,\n\n            colorMap,\n            bodyFillColor = '#FFFFFF',\n            borderStrokeColor = '#D2D6DF',\n            titleFillColor = '#6D717A',\n            textFillColor = '#282C35',\n            tooltipTextColor = '#000000',\n\n            // formats\n            tooltipDateFormat = d3.time.format('%b %d, %Y'),\n            valueRangeLimits = {\n                small: 10,\n                medium: 100\n            },\n            integerValueFormats = {\n                small: d3.format(''),\n                medium: d3.format(''),\n                large: d3.format('.2s')\n            },\n            decimalValueFormats = {\n                small: d3.format('.3f'),\n                medium: d3.format('.1f'),\n                large: d3.format('.2s')\n            },\n\n            chartWidth, chartHeight,\n            data,\n            svg;\n\n\n        /**\n         * This function creates the graph using the selection as container\n         * @param {D3Selection} _selection A d3 selection that represents\n         *                                  the container(s) where the chart(s) will be rendered\n         * @param {Object} _data The data to attach and generate the chart\n         */\n        function exports(_selection) {\n            _selection.each(function(_data){\n                chartWidth = width - margin.left - margin.right;\n                chartHeight = height - margin.top - margin.bottom;\n                data = _data;\n\n                buildSVG(this);\n            });\n        }\n\n        /**\n         * Builds containers for the tooltip\n         * Also applies the Margin convention\n         * @private\n         */\n        function buildContainerGroups() {\n            var container = svg.append('g')\n                .classed('tooltip-container-group', true)\n                .attr({\n                    transform: `translate( ${margin.left}, ${margin.top})`\n                });\n\n            container.append('g').classed('tooltip-group', true);\n        }\n\n        /**\n         * Builds the SVG element that will contain the chart\n         * @param  {HTMLElement} container DOM element that will work as the container of the graph\n         * @private\n         */\n        function buildSVG(container) {\n            if (!svg) {\n                svg = d3.select(container)\n                    .append('g')\n                    .classed('britechart britechart-tooltip', true);\n\n                buildContainerGroups();\n                drawTooltip();\n            }\n            svg.transition().attr({\n                width: width + margin.left + margin.right,\n                height: height + margin.top + margin.bottom\n            });\n            // Hidden by default\n            exports.hide();\n        }\n\n        /**\n         * Resets the tooltipBody content\n         * @return void\n         */\n        function cleanContent(){\n            tooltipBody.selectAll('text').remove();\n            tooltipBody.selectAll('circle').remove();\n        }\n\n        /**\n         * Draws the different elements of the Tooltip box\n         * @return void\n         */\n        function drawTooltip(){\n            tooltipTextContainer = svg.selectAll('.tooltip-group')\n                .append('g')\n                .classed('tooltip-text', true);\n\n            tooltip = tooltipTextContainer\n                .append('rect')\n                .classed('tooltip-text-container', true)\n                .attr({\n                    'x': -tooltipWidth / 4 + 8,\n                    'y': 0,\n                    'width': tooltipWidth,\n                    'height': tooltipHeight,\n                    'rx': 3,\n                    'ry': 3\n                })\n                .style({\n                    'fill': bodyFillColor,\n                    'stroke': borderStrokeColor,\n                    'stroke-width': 1\n                });\n\n            tooltipTitle = tooltipTextContainer\n                .append('text')\n                .classed('tooltip-title', true)\n                .attr({\n                    'x': -tooltipWidth / 4 + 17,\n                    'dy': '.35em',\n                    'y': 16\n                })\n                .style({\n                    'fill': titleFillColor\n                });\n\n            tooltipDivider = tooltipTextContainer\n                .append('line')\n                .classed('tooltip-divider', true)\n                .attr({\n                    'x1': -tooltipWidth / 4 + 15,\n                    'y1': 31,\n                    'x2': 265,\n                    'y2': 31\n                })\n                .style({\n                    'stroke': borderStrokeColor\n                });\n\n            tooltipBody = tooltipTextContainer\n                .append('g')\n                .classed('tooltip-body', true)\n                .style({\n                    'transform': 'translateY(8px)',\n                    'fill': textFillColor\n                });\n        }\n\n        /**\n         * Formats a floating point value depending on its value range\n         * @param  {Number} value Decimal point value to format\n         * @return {Number}       Formatted value to show\n         */\n        function formatDecimalValue(value) {\n            let size = 'large';\n\n            if (value < valueRangeLimits.small) {\n                size = 'small';\n            } else if (value < valueRangeLimits.medium) {\n                size = 'medium';\n            }\n\n            return decimalValueFormats[size](value);\n        }\n\n\n        /**\n         * Formats an integer value depending on its value range\n         * @param  {Number} value Decimal point value to format\n         * @return {Number}       Formatted value to show\n         */\n        function formatIntegerValue(value) {\n            let size = 'large';\n\n            if (value < valueRangeLimits.small) {\n                size = 'small';\n            } if (value < valueRangeLimits.medium) {\n                size = 'medium';\n            }\n\n            return integerValueFormats[size](value);\n        }\n\n        /**\n         * Formats the value depending on its characteristics\n         * @param  {Number} value Value to format\n         * @return {Number}       Formatted value\n         */\n        function getFormattedValue(value) {\n            if (!value) {\n                return 0;\n            }\n\n            if (isInteger(value)) {\n                value = formatIntegerValue(value);\n            } else {\n                value = formatDecimalValue(value);\n            }\n\n            return value;\n        }\n\n        /**\n         * Extracts the value from the data object\n         * @param  {Object} data Data value containing the info\n         * @return {String}      Value to show\n         */\n        function getValueText(data) {\n            let value = data.value ? data.value : data.views;\n            let valueText;\n\n            if (data.missingValue) {\n                valueText = '-';\n            } else {\n                valueText = getFormattedValue(value).toString();\n            }\n\n            return valueText;\n        }\n\n        /**\n         * Checks if a number is an integer of has decimal values\n         * @param  {Number}  value Value to check\n         * @return {Boolean}       If it is an iteger\n         */\n        function isInteger(value) {\n            return value % 1 === 0;\n        }\n\n        /**\n         * Resets the height of the tooltip and the pointer for the text\n         * position\n         */\n        function resetSizeAndPositionPointers() {\n            tooltipHeight = 48;\n            ttTextY = 37;\n            ttTextX = 0;\n        }\n\n        /**\n         * Draws the data entries inside the tooltip for a given topic\n         * @param  {Object} topic Topic to extract data from\n         * @return void\n         */\n        function updateContent(topic){\n            let name = topic.name,\n                tooltipRight,\n                tooltipLeftText,\n                tooltipRightText,\n                elementText;\n\n            tooltipLeftText = topic.topicName || name;\n            tooltipRightText = getValueText(topic);\n\n            elementText = tooltipBody\n                .append('text')\n                .classed('tooltip-left-text', true)\n                .attr({\n                    'dy': '1em',\n                    'x': ttTextX - 20,\n                    'y': ttTextY\n                })\n                .style('fill', tooltipTextColor)\n                .text(tooltipLeftText)\n                .call(textWrap, tooltipMaxTopicLength, -25);\n\n            tooltipRight = tooltipBody\n                .append('text')\n                .classed('tooltip-right-text', true)\n                .attr({\n                    'dy': '1em',\n                    'x': ttTextX + 8,\n                    'y': ttTextY\n                })\n                .style('fill', tooltipTextColor)\n                .text(tooltipRightText);\n\n            textSize = elementText.node().getBBox();\n            tooltipHeight += textSize.height + 5;\n\n            // Not sure if necessary\n            tooltipRight.attr({\n                'x': tooltipWidth - tooltipRight.node().getBBox().width - 10 - tooltipWidth / 4\n            });\n\n            tooltipBody\n                .append('circle')\n                .classed('tooltip-circle', true)\n                .attr({\n                    'cx': 23 - tooltipWidth / 4,\n                    'cy': (ttTextY + circleYOffset),\n                    'r': 5\n                })\n                .style({\n                    'fill': colorMap[name],\n                    'stroke-width': 1\n                });\n\n            ttTextY += textSize.height + 7;\n        }\n\n        /**\n         * Updates size and position of tooltip depending on the side of the chart we are in\n         * @param  {Object} dataPoint DataPoint of the tooltip\n         * @param  {Number} xPosition DataPoint's x position in the chart\n         * @return void\n         */\n        function updatePositionAndSize(dataPoint, xPosition){\n            tooltip\n                .attr({\n                    'width': tooltipWidth,\n                    'height': tooltipHeight + 10\n                });\n\n            // show tooltip to the right\n            if ((xPosition - tooltipWidth) < 0) {\n                // Tooltip on the right\n                tooltipTextContainer\n                    .attr('transform', 'translate(' + (tooltipWidth - 185) + ',' + tooltipOffset.y + ')');\n            } else {\n                // Tooltip on the left\n                tooltipTextContainer\n                    .attr('transform', 'translate(' + (-205) + ',' + tooltipOffset.y + ')');\n            }\n\n            tooltipDivider\n                .attr({\n                    'x2': tooltipWidth - 60\n                });\n        }\n\n        /**\n         * Updates value of tooltipTitle with the data meaning and the date\n         * @param  {Object} dataPoint Point of data to use as source\n         * @return void\n         */\n        function updateTitle(dataPoint) {\n            var date = dataPoint.date ? new Date(dataPoint.date) : new Date(dataPoint.key),\n                tooltipTitleText = title + ' - ' + tooltipDateFormat(date);\n\n            tooltipTitle.text(tooltipTitleText);\n        }\n\n        /**\n         * Updates tooltip title, content, size and position\n         *\n         * @param  {lineChartPointByDate} dataPoint  Current datapoint to show info about\n         * @param  {Number} xPosition           Position of the mouse on the X axis\n         * @return void\n         */\n        function updateTooltip(dataPoint, xPosition) {\n            var topics = dataPoint.topics ? dataPoint.topics : dataPoint.values;\n\n            cleanContent();\n            resetSizeAndPositionPointers();\n            updateTitle(dataPoint);\n            topics.forEach(updateContent);\n            updatePositionAndSize(dataPoint, xPosition);\n        }\n\n        /**\n         * Wraps a text given the text, width, x position and textFormatter function\n         * @param  {D3Selection} text  Selection with the text to wrap inside\n         * @param  {Number} width Desired max width for that line\n         * @param  {Number} xpos  Initial x position of the text\n         *\n         * REF: http://bl.ocks.org/mbostock/7555321\n         * More discussions on https://github.com/mbostock/d3/issues/1642\n         */\n        function textWrap(text, width, xpos) {\n            xpos = xpos || 0;\n\n            text.each(function() {\n                var words,\n                    word,\n                    line,\n                    lineNumber,\n                    lineHeight,\n                    y,\n                    dy,\n                    tspan;\n\n                text = d3.select(this);\n\n                words = text.text().split(/\\s+/).reverse();\n                line = [];\n                lineNumber = 0;\n                lineHeight = 1.2;\n                y = text.attr('y');\n                dy = parseFloat(text.attr('dy'));\n                tspan = text\n                    .text(null)\n                    .append('tspan')\n                    .attr({\n                        'x': xpos,\n                        'y': y,\n                        'dy': dy + 'em'\n                    });\n\n                while ((word = words.pop())) {\n                    line.push(word);\n                    tspan.text(line.join(' '));\n\n                    if (tspan.node().getComputedTextLength() > width) {\n                        line.pop();\n                        tspan.text(line.join(' '));\n\n                        if (lineNumber < entryLineLimit - 1) {\n                            line = [word];\n                            tspan = text.append('tspan')\n                                .attr('x', xpos)\n                                .attr('y', y)\n                                .attr('dy', ++lineNumber * lineHeight + dy + 'em')\n                                .text(word);\n                        }\n                    }\n                }\n            });\n        }\n\n        /**\n         * Hides the tooltip\n         * @return {Module} Tooltip module to chain calls\n         * @public\n         */\n        exports.hide = function() {\n            svg.style('display', 'none');\n\n            return this;\n        };\n\n        /**\n         * Shows the tooltip\n         * @return {Module} Tooltip module to chain calls\n         * @public\n         */\n        exports.show = function() {\n            svg.style('display', 'block');\n\n            return this;\n        };\n\n        /**\n         * Gets or Sets the title of the tooltip\n         * @param  {string} _x Desired title\n         * @return { string | module} Current title or module to chain calls\n         * @public\n         */\n        exports.title = function(_x) {\n            if (!arguments.length) {\n                return title;\n            }\n            title = _x;\n            return this;\n        };\n\n        /**\n         * Updates the position and content of the tooltip\n         * @param  {Object} dataPoint    Datapoint to represent\n         * @param  {Object} colorMapping Color scheme of the topics\n         * @param  {Number} position     X-scale position in pixels\n         * @return {Module} Tooltip module to chain calls\n         * @public\n         */\n        exports.update = function(dataPoint, colorMapping, position) {\n            colorMap = colorMapping;\n            updateTooltip(dataPoint, position);\n\n            return this;\n        };\n\n        return exports;\n\n    };\n\n});\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/charts/tooltip.js\n **/","module.exports = __WEBPACK_EXTERNAL_MODULE_1__;\n\n\n/*****************\n ** WEBPACK FOOTER\n ** external \"d3\"\n ** module id = 1\n ** module chunks = 0 1 2 3 4 5 6 7 8 9\n **/"],"sourceRoot":""}